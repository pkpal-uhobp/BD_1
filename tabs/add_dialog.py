from sqlalchemy import DateTime, Text
from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QComboBox, QCheckBox,
    QDateEdit, QPushButton, QScrollArea, QWidget, QTextEdit, QLineEdit, QDateTimeEdit)
from PySide6.QtCore import QDate, QDateTime
from sqlalchemy import Enum as SQLEnum, ARRAY, Boolean, Date, Numeric, Integer, String
import re
from plyer import notification


class AddRecordDialog(QDialog):
    """–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ë–î."""

    def __init__(self, db_instance, COLUMN_HEADERS_MAP, REVERSE_COLUMN_HEADERS_MAP, parent=None):
        super().__init__(parent)
        self.db_instance = db_instance
        self.COLUMN_HEADERS_MAP = COLUMN_HEADERS_MAP
        self.REVERSE_COLUMN_HEADERS_MAP = REVERSE_COLUMN_HEADERS_MAP
        if not self.db_instance or not self.db_instance.is_connected():
            notification.notify(
                title="–û—à–∏–±–∫–∞",
                message="–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!",
                timeout=3
            )
            self.reject()
            return
        self.setWindowTitle("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        self.setModal(True)
        self.resize(500, 600)
        self.input_widgets = {}
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout(self)
        # –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        table_label = QLabel("–¢–∞–±–ª–∏—Ü–∞:")
        self.table_combo = QComboBox()
        table_names = self.db_instance.get_table_names()
        if not table_names:
            notification.notify(
                title="–û—à–∏–±–∫–∞",
                message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü.",
                timeout=3
            )
            self.reject()
            return

        self.table_combo.addItems(table_names)
        layout.addWidget(table_label)
        layout.addWidget(self.table_combo)
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        self.fields_container = QWidget()
        self.fields_layout = QVBoxLayout(self.fields_container)
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setWidget(self.fields_container)
        layout.addWidget(scroll_area)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        self.load_table_fields(self.table_combo.currentText())

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞–±–ª–∏—Ü—ã
        self.table_combo.currentTextChanged.connect(self.load_table_fields)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.btn_add = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        self.btn_add.clicked.connect(self.on_add_clicked)
        layout.addWidget(self.btn_add)

    def _clear_layout(self, layout):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ—Ç layout."""
        while layout.count():
            item = layout.takeAt(0)
            if item.widget():
                item.widget().deleteLater()
            elif item.layout():
                self._clear_layout(item.layout())

    def clear_fields(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç –≤—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç layout."""
        self._clear_layout(self.fields_layout)
        self.input_widgets.clear()

    def load_table_fields(self, table_name: str):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        self.clear_fields()

        if table_name not in self.db_instance.tables:
            notification.notify(
                title="–û—à–∏–±–∫–∞",
                message=f"–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}' –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.",
                timeout=3
            )
            return

        table = self.db_instance.tables[table_name]

        for column in table.columns:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–µ PK ‚Äî –æ–Ω–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –ë–î
            if column.primary_key and column.autoincrement:
                continue

            row_layout = QHBoxLayout()
            display_name = self.COLUMN_HEADERS_MAP.get(column.name, column.name)
            label = QLabel(f"{display_name}:")
            label.setMinimumWidth(150)
            row_layout.addWidget(label)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ —Å–æ–∑–¥–∞—ë–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∏–¥–∂–µ—Ç
            widget = None
            # –í–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞ for column in table.columns:
            if hasattr(column.type, 'enums') and column.type.enums:
                widget = QComboBox()
                widget.addItems(column.type.enums)  # –µ—Å–ª–∏ enum –∑–∞–¥–∞–Ω —è–≤–Ω–æ
                widget.setEditable(False)
                placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            elif isinstance(column.type, String):
                widget = QLineEdit()
                placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"
            elif isinstance(column.type, Integer):
                widget = QLineEdit()
                placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ"
            elif isinstance(column.type, Numeric):
                widget = QLineEdit()
                placeholder = "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Å —Ç–æ—á–∫–æ–π)"
            elif isinstance(column.type, Boolean):
                widget = QCheckBox("–î–∞")
                placeholder = ""
            elif isinstance(column.type, Date):
                widget = QDateEdit()
                widget.setCalendarPopup(True)
                widget.setDate(QDate.currentDate())
                placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
            elif isinstance(column.type, DateTime):
                widget = QDateTimeEdit()
                widget.setCalendarPopup(True)
                widget.setDateTime(QDateTime.currentDateTime())
                placeholder = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è"
            elif isinstance(column.type, ARRAY):
                # –ú–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å: ARRAY of —á—Ç–æ?
                if isinstance(column.type.item_type, String):
                    widget = QLineEdit()
                    placeholder = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ: –∑–Ω–∞—á1:–∑–Ω–∞—á2"
                else:
                    widget = QLineEdit()
                    placeholder = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –¥–≤–æ–µ—Ç–æ—á–∏–µ"
            elif isinstance(column.type, Text):
                widget = QTextEdit()  # –∏–ª–∏ QLineEdit, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ
                placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç"
            else:
                widget = QLineEdit()
                placeholder = "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
            if isinstance(widget, QLineEdit):
                widget.setPlaceholderText(placeholder)
            row_layout.addWidget(widget)
            self.fields_layout.addLayout(row_layout)
            self.input_widgets[display_name] = widget

    def on_add_clicked(self):
        table_name = self.table_combo.currentText()
        if not table_name:
            notification.notify(title="–û—à–∏–±–∫–∞", message="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É!", timeout=3)
            return

        data = {}
        table = self.db_instance.tables[table_name]
        for display_name, widget in self.input_widgets.items():
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É
            col_name = self.REVERSE_COLUMN_HEADERS_MAP.get(display_name,
                                                           display_name)  # üëà –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –≤ —Ü–∏–∫–ª–µ!
            try:
                column = getattr(table.c, col_name)
            except AttributeError:
                notification.notify(
                    title="–û—à–∏–±–∫–∞",
                    message=f"–ö–æ–ª–æ–Ω–∫–∞ '{col_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.",
                    timeout=5
                )
                return

            # --- –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º ---
            if isinstance(widget, QComboBox) and (hasattr(column.type, 'enums') or isinstance(column.type, SQLEnum)):
                value = widget.currentText()
                if not value:
                    if not column.nullable:
                        notification.notify(title="–û—à–∏–±–∫–∞", message=f"–ü–æ–ª–µ '{display_name}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.", timeout=3)
                        return
                    else:
                        data[col_name] = None
                else:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ enums
                    allowed_values = getattr(column.type, 'enums', [])
                    if allowed_values and value not in allowed_values:
                        notification.notify(
                            title="–û—à–∏–±–∫–∞",
                            message=f"–ó–Ω–∞—á–µ–Ω–∏–µ '{value}' –Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ –¥–ª—è –ø–æ–ª—è '{display_name}'.",
                            timeout=5
                        )
                        return
                    data[col_name] = value

            elif isinstance(widget, QLineEdit) and isinstance(column.type, ARRAY):
                text = widget.text().strip()
                if not text:
                    if not column.nullable:
                        notification.notify(title="–û—à–∏–±–∫–∞", message=f"–ü–æ–ª–µ '{display_name}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.", timeout=3)
                        return
                    data[col_name] = []
                else:
                    items = [item.strip() for item in text.split(":") if item.strip()]
                    if not items and not column.nullable:
                        notification.notify(title="–û—à–∏–±–∫–∞", message=f"–ü–æ–ª–µ '{display_name}' –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
                                            timeout=3)
                        return
                    data[col_name] = items

            elif isinstance(widget, QCheckBox):  # Boolean
                data[col_name] = widget.isChecked()

            elif isinstance(widget, QDateEdit):  # Date
                qdate = widget.date()
                if qdate.isValid():
                    data[col_name] = qdate.toString("yyyy-MM-dd")
                else:
                    if not column.nullable:
                        notification.notify(title="–û—à–∏–±–∫–∞", message=f"–ü–æ–ª–µ '{display_name}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.", timeout=3)
                        return
                    else:
                        data[col_name] = None

            elif isinstance(widget, QDateTimeEdit):  # DateTime
                qdatetime = widget.dateTime()
                if qdatetime.isValid():
                    data[col_name] = qdatetime.toString("yyyy-MM-dd HH:mm:ss")
                else:
                    if not column.nullable:
                        notification.notify(title="–û—à–∏–±–∫–∞", message=f"–ü–æ–ª–µ '{display_name}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.", timeout=3)
                        return
                    else:
                        data[col_name] = None

            elif isinstance(widget, QTextEdit):  # Text
                text = widget.toPlainText().strip()
                if not text:
                    if not column.nullable:
                        notification.notify(title="–û—à–∏–±–∫–∞", message=f"–ü–æ–ª–µ '{display_name}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.", timeout=3)
                        return
                    data[col_name] = None
                else:
                    data[col_name] = text

            elif isinstance(widget, QLineEdit):  # String / Integer / Numeric
                text = widget.text().strip()
                if not text:
                    if not column.nullable:
                        notification.notify(title="–û—à–∏–±–∫–∞", message=f"–ü–æ–ª–µ '{display_name}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.", timeout=3)
                        return
                    data[col_name] = None
                else:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∫–æ–ª–æ–Ω–∫–∏
                    if isinstance(column.type, Integer):
                        if not text.isdigit():
                            notification.notify(
                                title="–û—à–∏–±–∫–∞",
                                message=f"–ü–æ–ª–µ '{display_name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.",
                                timeout=3
                            )
                            return
                        data[col_name] = int(text)

                    elif isinstance(column.type, Numeric):
                        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ —Ü–µ–ª—ã—Ö, –∏ –¥—Ä–æ–±–Ω—ã—Ö: "5", "5.0", "3.14"
                        if not re.match(r'^-?\d+(\.\d+)?$', text):
                            notification.notify(
                                title="–û—à–∏–±–∫–∞",
                                message=f"–ü–æ–ª–µ '{display_name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 3.14).",
                                timeout=3
                            )
                            return
                        try:
                            data[col_name] = float(text)
                        except ValueError:
                            notification.notify(
                                title="–û—à–∏–±–∫–∞",
                                message=f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ '{display_name}'.",
                                timeout=3
                            )
                            return

                    elif isinstance(column.type, String):
                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –¥–ª–∏–Ω–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        max_length = getattr(column.type, 'length', None)
                        if max_length and len(text) > max_length:
                            notification.notify(
                                title="–û—à–∏–±–∫–∞",
                                message=f"–ü–æ–ª–µ '{display_name}' –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å {max_length} —Å–∏–º–≤–æ–ª–æ–≤.",
                                timeout=5
                            )
                            return
                        data[col_name] = text

                    else:
                        # fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤
                        data[col_name] = text

            else:
                notification.notify(
                    title="–û—à–∏–±–∫–∞",
                    message=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–∏–¥–∂–µ—Ç–∞ –¥–ª—è –ø–æ–ª—è '{display_name}'.",
                    timeout=5
                )
                return

        # --- –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: –≤—Å–µ –ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã? ---
        # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è)
        for col in table.columns:
            if not col.nullable and not col.primary_key and col.name not in data:
                display = self.COLUMN_HEADERS_MAP.get(col.name, col.name)
                notification.notify(
                    title="–û—à–∏–±–∫–∞",
                    message=f"–ü–æ–ª–µ '{display}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.",
                    timeout=5
                )
                return

        # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        success = self.db_instance.insert_data(table_name, data)
        if success:
            notification.notify(
                title="‚úÖ –£—Å–ø–µ—Ö",
                message=f"–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'.",
                timeout=5
            )
            self.accept()
        else:
            notification.notify(
                title="‚ùå –û—à–∏–±–∫–∞",
                message=f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ (db/db_app.log).",
                timeout=5
            )
