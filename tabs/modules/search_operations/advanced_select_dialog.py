from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton,
    QComboBox, QFormLayout, QMessageBox, QWidget, QTextEdit, QCheckBox,
    QGroupBox, QScrollArea, QListWidget, QListWidgetItem, QSplitter,
    QTabWidget, QTableWidget, QTableWidgetItem, QHeaderView, QSpinBox
)
from PySide6.QtCore import Qt, QSize, Signal
from PySide6.QtGui import QFont, QPalette, QColor
from plyer import notification
import re


class SortColumnWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ —Å –µ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
    
    def __init__(self, column_name, parent=None):
        super().__init__(parent)
        self.column_name = column_name
        self.setup_ui()
        
    def setup_ui(self):
        layout = QHBoxLayout()
        layout.setContentsMargins(5, 5, 5, 5)
        self.setLayout(layout)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
        self.column_label = QLabel(self.column_name)
        self.column_label.setObjectName("sortColumnLabel")
        self.column_label.setMinimumWidth(150)
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.direction_combo = QComboBox()
        self.direction_combo.setObjectName("sortDirectionCombo")
        self.direction_combo.addItems(["ASC", "DESC"])
        self.direction_combo.setMinimumWidth(80)
        self.direction_combo.setCurrentIndex(0)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ASC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # –î–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±–æ—Ä–∞, –±–µ–∑ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.direction_combo.setEditable(False)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        palette = self.direction_combo.palette()
        palette.setColor(QPalette.Window, QColor(25, 25, 35))
        palette.setColor(QPalette.WindowText, QColor(255, 255, 255))
        palette.setColor(QPalette.Base, QColor(25, 25, 35))
        palette.setColor(QPalette.AlternateBase, QColor(35, 35, 45))
        palette.setColor(QPalette.Text, QColor(255, 255, 255))
        palette.setColor(QPalette.Button, QColor(25, 25, 35))
        palette.setColor(QPalette.ButtonText, QColor(255, 255, 255))
        palette.setColor(QPalette.Highlight, QColor(100, 255, 218))
        palette.setColor(QPalette.HighlightedText, QColor(10, 10, 15))
        self.direction_combo.setPalette(palette)
        
        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        self.remove_btn = QPushButton("‚ùå")
        self.remove_btn.setObjectName("removeSortBtn")
        self.remove_btn.setMaximumWidth(30)
        self.remove_btn.setMaximumHeight(30)
        
        layout.addWidget(self.column_label)
        layout.addWidget(QLabel("‚Üí"))
        layout.addWidget(self.direction_combo)
        layout.addWidget(self.remove_btn)
        layout.addStretch()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è
        self.remove_btn.clicked.connect(self.remove_self)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.direction_combo.setCurrentText("ASC")
        
    def remove_self(self):
        """–£–¥–∞–ª—è–µ—Ç —ç—Ç–æ—Ç –≤–∏–¥–∂–µ—Ç"""
        print(f"–ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–∞—Ç–∞ –¥–ª—è: {self.column_name}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        # –ù–∞—Ö–æ–¥–∏–º –≥–ª–∞–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        parent = self.parent()
        while parent and not hasattr(parent, 'remove_sort_widget'):
            parent = parent.parent()
        
        if parent and hasattr(parent, 'remove_sort_widget'):
            print(f"–ù–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å —Å –º–µ—Ç–æ–¥–æ–º remove_sort_widget: {type(parent)}")
            parent.remove_sort_widget(self)
        else:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—å —Å –º–µ—Ç–æ–¥–æ–º remove_sort_widget")
            
    def get_sort_clause(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç SQL –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞"""
        direction = self.direction_combo.currentText()
        return f'"{self.column_name}" {direction}'


class AdvancedSelectDialog(QDialog):
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    results_to_main_table = Signal(list)
    
    def __init__(self, db_instance, parent=None):
        super().__init__(parent)
        self.db_instance = db_instance
        self.setWindowTitle("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π SELECT")
        self.setModal(True)
        self.setMinimumSize(800, 600)
        self.setMaximumSize(1000, 800)
        self.resize(900, 700)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É
        self.set_dark_palette()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(15)
        self.setLayout(main_layout)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—É—é –æ–±–ª–∞—Å—Ç—å
        self.scroll_area = QScrollArea()
        self.scroll_area.setObjectName("mainScrollArea")
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.content_widget = QWidget()
        self.content_widget.setObjectName("contentWidget")
        self.content_layout = QVBoxLayout()
        self.content_widget.setLayout(self.content_layout)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.setup_ui()
        self.apply_styles()
        
    def set_dark_palette(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—ë–º–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É"""
        dark_palette = QPalette()
        dark_palette.setColor(QPalette.Window, QColor(18, 18, 24))
        dark_palette.setColor(QPalette.WindowText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Base, QColor(25, 25, 35))
        dark_palette.setColor(QPalette.AlternateBase, QColor(35, 35, 45))
        dark_palette.setColor(QPalette.ToolTipBase, QColor(64, 255, 218))
        dark_palette.setColor(QPalette.ToolTipText, QColor(18, 18, 24))
        dark_palette.setColor(QPalette.Text, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Button, QColor(40, 40, 50))
        dark_palette.setColor(QPalette.ButtonText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.BrightText, QColor(64, 255, 218))
        dark_palette.setColor(QPalette.Highlight, QColor(64, 255, 218))
        dark_palette.setColor(QPalette.HighlightedText, QColor(18, 18, 24))
        self.setPalette(dark_palette)
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_label = QLabel("–†–ê–°–®–ò–†–ï–ù–ù–´–ô SELECT")
        header_label.setObjectName("headerLabel")
        header_label.setAlignment(Qt.AlignCenter)
        self.content_layout.addWidget(header_label)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)
        query_panel = self.create_query_panel()
        self.content_layout.addWidget(query_panel)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–∫—Ä–æ–ª–ª-–æ–±–ª–∞—Å—Ç—å
        self.scroll_area.setWidget(self.content_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª-–æ–±–ª–∞—Å—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        self.layout().addWidget(self.scroll_area)
        
        # –ö–Ω–æ–ø–∫–∏ (–≤–Ω–µ —Å–∫—Ä–æ–ª–ª-–æ–±–ª–∞—Å—Ç–∏)
        buttons_layout = QHBoxLayout()
        
        self.execute_button = QPushButton("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥–ª–∞–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É")
        self.execute_button.setObjectName("executeButton")
        self.execute_button.clicked.connect(self.execute_and_send_query)
        
        self.preview_button = QPushButton("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä SQL")
        self.preview_button.setObjectName("previewButton")
        self.preview_button.clicked.connect(self.preview_sql)
        
        self.clear_button = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å")
        self.clear_button.setObjectName("clearButton")
        self.clear_button.clicked.connect(self.clear_all)
        
        self.close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        self.close_button.setObjectName("closeButton")
        self.close_button.clicked.connect(self.accept)
        
        buttons_layout.addWidget(self.execute_button)
        buttons_layout.addWidget(self.preview_button)
        buttons_layout.addWidget(self.clear_button)
        buttons_layout.addStretch()
        buttons_layout.addWidget(self.close_button)
        
        self.layout().addLayout(buttons_layout)
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        self.last_query_results = []
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è WHERE –∏ HAVING
        self.where_input.textChanged.connect(self.validate_where_condition)
        self.having_input.textChanged.connect(self.validate_having_condition)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.populate_tables()
        
    def create_query_panel(self):
        """–°–æ–∑–¥–∞–µ—Ç –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        panel = QWidget()
        panel.setObjectName("queryPanel")
        layout = QVBoxLayout()
        panel.setLayout(layout)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        tab_widget = QTabWidget()
        tab_widget.setObjectName("tabWidget")
        
        # –í–∫–ª–∞–¥–∫–∞ "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
        basic_tab = QWidget()
        basic_layout = QVBoxLayout()
        basic_tab.setLayout(basic_layout)
        
        # –ì—Ä—É–ø–ø–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã
        table_group = QGroupBox("–í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã")
        table_group.setObjectName("tableGroup")
        table_layout = QFormLayout()
        table_group.setLayout(table_layout)
        
        self.table_combo = QComboBox()
        self.table_combo.setObjectName("tableCombo")
        self.table_combo.currentTextChanged.connect(self.populate_columns)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–∞
        palette = self.table_combo.palette()
        palette.setColor(QPalette.Window, QColor(25, 25, 35))
        palette.setColor(QPalette.WindowText, QColor(255, 255, 255))
        palette.setColor(QPalette.Base, QColor(25, 25, 35))
        palette.setColor(QPalette.AlternateBase, QColor(35, 35, 45))
        palette.setColor(QPalette.Text, QColor(255, 255, 255))
        palette.setColor(QPalette.Button, QColor(25, 25, 35))
        palette.setColor(QPalette.ButtonText, QColor(255, 255, 255))
        palette.setColor(QPalette.Highlight, QColor(100, 255, 218))
        palette.setColor(QPalette.HighlightedText, QColor(10, 10, 15))
        self.table_combo.setPalette(palette)
        
        table_layout.addRow("–¢–∞–±–ª–∏—Ü–∞:", self.table_combo)
        
        basic_layout.addWidget(table_group)
        
        # –ì—Ä—É–ø–ø–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
        columns_group = QGroupBox("–í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤")
        columns_group.setObjectName("columnsGroup")
        columns_layout = QVBoxLayout()
        columns_group.setLayout(columns_layout)
        
        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        self.available_columns = QListWidget()
        self.available_columns.setObjectName("availableColumns")
        self.available_columns.setSelectionMode(QListWidget.MultiSelection)
        columns_layout.addWidget(QLabel("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:"))
        columns_layout.addWidget(self.available_columns)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞–º–∏
        columns_buttons_layout = QHBoxLayout()
        
        self.add_column_btn = QPushButton("‚û° –î–æ–±–∞–≤–∏—Ç—å")
        self.add_column_btn.setObjectName("addColumnBtn")
        self.add_column_btn.clicked.connect(self.add_selected_columns)
        
        self.add_all_btn = QPushButton("‚û°‚û° –í—Å–µ")
        self.add_all_btn.setObjectName("addAllBtn")
        self.add_all_btn.clicked.connect(self.add_all_columns)
        
        columns_buttons_layout.addWidget(self.add_column_btn)
        columns_buttons_layout.addWidget(self.add_all_btn)
        columns_layout.addLayout(columns_buttons_layout)
        
        # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        self.selected_columns = QListWidget()
        self.selected_columns.setObjectName("selectedColumns")
        self.selected_columns.setSelectionMode(QListWidget.MultiSelection)
        columns_layout.addWidget(QLabel("–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:"))
        columns_layout.addWidget(self.selected_columns)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
        remove_buttons_layout = QHBoxLayout()
        
        self.remove_column_btn = QPushButton("‚¨Ö –£–¥–∞–ª–∏—Ç—å")
        self.remove_column_btn.setObjectName("removeColumnBtn")
        self.remove_column_btn.clicked.connect(self.remove_selected_columns)
        
        self.remove_all_btn = QPushButton("‚¨Ö‚¨Ö –í—Å–µ")
        self.remove_all_btn.setObjectName("removeAllBtn")
        self.remove_all_btn.clicked.connect(self.remove_all_columns)
        
        remove_buttons_layout.addWidget(self.remove_column_btn)
        remove_buttons_layout.addWidget(self.remove_all_btn)
        columns_layout.addLayout(remove_buttons_layout)
        
        basic_layout.addWidget(columns_group)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        tab_widget.addTab(basic_tab, "–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í–∫–ª–∞–¥–∫–∞ "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞"
        filter_tab = QWidget()
        filter_layout = QVBoxLayout()
        filter_tab.setLayout(filter_layout)
        
        # –ì—Ä—É–ø–ø–∞ WHERE
        where_group = QGroupBox("WHERE (–£—Å–ª–æ–≤–∏—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏)")
        where_group.setObjectName("whereGroup")
        where_layout = QVBoxLayout()
        where_group.setLayout(where_layout)
        
        self.where_input = QLineEdit()
        self.where_input.setObjectName("whereInput")
        self.where_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: age > 18 AND name LIKE '%John%'")
        where_layout.addWidget(self.where_input)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫/—É—Å–ø–µ—Ö–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WHERE
        self.where_error_label = QLabel()
        self.where_error_label.setObjectName("whereErrorLabel")
        self.where_error_label.setWordWrap(True)
        self.where_error_label.hide()
        where_layout.addWidget(self.where_error_label)
        
        filter_layout.addWidget(where_group)
        
        # –ì—Ä—É–ø–ø–∞ ORDER BY - –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        order_group = QGroupBox("ORDER BY (–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞)")
        order_group.setObjectName("orderGroup")
        order_layout = QVBoxLayout()
        order_group.setLayout(order_layout)
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.available_order_columns = QListWidget()
        self.available_order_columns.setObjectName("availableOrderColumns")
        self.available_order_columns.setSelectionMode(QListWidget.MultiSelection)
        # –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±–æ—Ä–∞, –±–µ–∑ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.available_order_columns.setEditTriggers(QListWidget.NoEditTriggers)
        order_layout.addWidget(QLabel("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:"))
        order_layout.addWidget(self.available_order_columns)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        order_add_buttons_layout = QHBoxLayout()
        
        self.add_order_btn = QPushButton("‚û° –î–æ–±–∞–≤–∏—Ç—å")
        self.add_order_btn.setObjectName("addOrderBtn")
        self.add_order_btn.clicked.connect(self.add_order_column)
        
        self.add_all_order_btn = QPushButton("‚û°‚û° –í—Å–µ")
        self.add_all_order_btn.setObjectName("addAllOrderBtn")
        self.add_all_order_btn.clicked.connect(self.add_all_order_columns)
        
        order_add_buttons_layout.addWidget(self.add_order_btn)
        order_add_buttons_layout.addWidget(self.add_all_order_btn)
        order_layout.addLayout(order_add_buttons_layout)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        order_layout.addWidget(QLabel("–°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏:"))
        self.sort_widgets_container = QWidget()
        self.sort_widgets_container.setObjectName("sortWidgetsContainer")
        self.sort_widgets_layout = QVBoxLayout()
        self.sort_widgets_layout.setContentsMargins(0, 0, 0, 0)
        self.sort_widgets_container.setLayout(self.sort_widgets_layout)
        order_layout.addWidget(self.sort_widgets_container)
        
        filter_layout.addWidget(order_group)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        tab_widget.addTab(filter_tab, "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ç—ã"
        group_tab = QWidget()
        group_tab_layout = QVBoxLayout()
        group_tab.setLayout(group_tab_layout)
        
        # –ì—Ä—É–ø–ø–∞ GROUP BY - –ø–µ—Ä–µ–¥–µ–ª–∞–µ–º –≤ —Å—Ç–∏–ª–µ 1-–π –≤–∫–ª–∞–¥–∫–∏
        group_group = QGroupBox("GROUP BY (–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞)")
        group_group.setObjectName("groupGroup")
        group_layout = QVBoxLayout()
        group_group.setLayout(group_layout)
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        self.available_group_columns = QListWidget()
        self.available_group_columns.setObjectName("availableGroupColumns")
        self.available_group_columns.setSelectionMode(QListWidget.MultiSelection)
        # –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±–æ—Ä–∞, –±–µ–∑ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.available_group_columns.setEditTriggers(QListWidget.NoEditTriggers)
        group_layout.addWidget(QLabel("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã:"))
        group_layout.addWidget(self.available_group_columns)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        group_add_buttons_layout = QHBoxLayout()
        
        self.add_group_btn = QPushButton("‚û° –î–æ–±–∞–≤–∏—Ç—å")
        self.add_group_btn.setObjectName("addGroupBtn")
        self.add_group_btn.clicked.connect(self.add_group_column)
        
        self.add_all_group_btn = QPushButton("‚û°‚û° –í—Å–µ")
        self.add_all_group_btn.setObjectName("addAllGroupBtn")
        self.add_all_group_btn.clicked.connect(self.add_all_group_columns)
        
        group_add_buttons_layout.addWidget(self.add_group_btn)
        group_add_buttons_layout.addWidget(self.add_all_group_btn)
        group_layout.addLayout(group_add_buttons_layout)
        
        # –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        self.group_columns = QListWidget()
        self.group_columns.setObjectName("groupColumns")
        self.group_columns.setSelectionMode(QListWidget.MultiSelection)
        group_layout.addWidget(QLabel("–°—Ç–æ–ª–±—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏:"))
        group_layout.addWidget(self.group_columns)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        group_remove_buttons_layout = QHBoxLayout()
        
        self.remove_group_btn = QPushButton("‚¨Ö –£–¥–∞–ª–∏—Ç—å")
        self.remove_group_btn.setObjectName("removeGroupBtn")
        self.remove_group_btn.clicked.connect(self.remove_group_column)
        
        self.remove_all_group_btn = QPushButton("‚¨Ö‚¨Ö –í—Å–µ")
        self.remove_all_group_btn.setObjectName("removeAllGroupBtn")
        self.remove_all_group_btn.clicked.connect(self.remove_all_group_columns)
        
        group_remove_buttons_layout.addWidget(self.remove_group_btn)
        group_remove_buttons_layout.addWidget(self.remove_all_group_btn)
        group_layout.addLayout(group_remove_buttons_layout)
        
        group_tab_layout.addWidget(group_group)
        
        # –ì—Ä—É–ø–ø–∞ –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π - –ø–µ—Ä–µ–¥–µ–ª–∞–µ–º –≤ —Å—Ç–∏–ª–µ 1-–π –≤–∫–ª–∞–¥–∫–∏
        agg_group = QGroupBox("–ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        agg_group.setObjectName("aggGroup")
        agg_layout = QVBoxLayout()
        agg_group.setLayout(agg_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        agg_add_buttons_layout = QHBoxLayout()
        
        self.add_agg_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é")
        self.add_agg_btn.setObjectName("addAggBtn")
        self.add_agg_btn.clicked.connect(self.add_aggregate_function)
        
        agg_add_buttons_layout.addWidget(self.add_agg_btn)
        agg_add_buttons_layout.addStretch()
        agg_layout.addLayout(agg_add_buttons_layout)
        
        # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        self.agg_functions = QListWidget()
        self.agg_functions.setObjectName("aggFunctions")
        agg_layout.addWidget(QLabel("–ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:"))
        agg_layout.addWidget(self.agg_functions)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        agg_remove_buttons_layout = QHBoxLayout()
        
        self.remove_agg_btn = QPushButton("‚¨Ö –£–¥–∞–ª–∏—Ç—å")
        self.remove_agg_btn.setObjectName("removeAggBtn")
        self.remove_agg_btn.clicked.connect(self.remove_aggregate_function)
        
        self.remove_all_agg_btn = QPushButton("‚¨Ö‚¨Ö –í—Å–µ")
        self.remove_all_agg_btn.setObjectName("removeAllAggBtn")
        self.remove_all_agg_btn.clicked.connect(self.remove_all_aggregate_functions)
        
        agg_remove_buttons_layout.addWidget(self.remove_agg_btn)
        agg_remove_buttons_layout.addWidget(self.remove_all_agg_btn)
        agg_layout.addLayout(agg_remove_buttons_layout)
        
        group_tab_layout.addWidget(agg_group)
        
        # –ì—Ä—É–ø–ø–∞ HAVING
        having_group = QGroupBox("HAVING (–£—Å–ª–æ–≤–∏—è –¥–ª—è –≥—Ä—É–ø–ø)")
        having_group.setObjectName("havingGroup")
        having_layout = QVBoxLayout()
        having_group.setLayout(having_layout)
        
        self.having_input = QLineEdit()
        self.having_input.setObjectName("havingInput")
        self.having_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: COUNT(*) > 5")
        having_layout.addWidget(self.having_input)
        
        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫/—É—Å–ø–µ—Ö–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ HAVING
        self.having_error_label = QLabel()
        self.having_error_label.setObjectName("havingErrorLabel")
        self.having_error_label.setWordWrap(True)
        self.having_error_label.hide()
        having_layout.addWidget(self.having_error_label)
        
        group_tab_layout.addWidget(having_group)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        tab_widget.addTab(group_tab, "–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ç—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π layout
        layout.addWidget(tab_widget)
        
        return panel
        
        
    def populate_tables(self):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü"""
        try:
            if not self.db_instance or not self.db_instance.is_connected():
                return
                
            tables = self.db_instance.get_tables()
            self.table_combo.clear()
            self.table_combo.addItems(tables)
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
            if tables:
                self.populate_columns(tables[0])
                
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
            
    def populate_columns(self, table_name):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            if not table_name or not self.db_instance or not self.db_instance.is_connected():
                return
                
            columns = self.db_instance.get_table_columns(table_name)
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
            self.available_columns.clear()
            self.selected_columns.clear()
            self.group_columns.clear()
            self.agg_functions.clear()
            
            # –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏
            self.available_order_columns.clear()
            self.available_group_columns.clear()
            
            # –û—á–∏—â–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            self.clear_all_sort_widgets()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            self.available_columns.addItems(columns)
            self.available_group_columns.addItems(columns)
            
            # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –∞–ª–∏–∞—Å—ã)
            # –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã, –Ω–æ –æ–±–Ω–æ–≤–∏–º –∏—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            self.available_order_columns.addItems(columns)
            
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤: {e}")
            
    def add_selected_columns(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"""
        selected_items = self.available_columns.selectedItems()
        for item in selected_items:
            if self.selected_columns.findItems(item.text(), Qt.MatchExactly):
                continue
            self.selected_columns.addItem(item.text())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.update_available_order_columns()
            
    def add_all_columns(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"""
        self.selected_columns.clear()
        for i in range(self.available_columns.count()):
            item = self.available_columns.item(i)
            self.selected_columns.addItem(item.text())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.update_available_order_columns()
            
    def remove_selected_columns(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"""
        selected_items = self.selected_columns.selectedItems()
        for item in selected_items:
            self.selected_columns.takeItem(self.selected_columns.row(item))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.update_available_order_columns()
            
    def remove_all_columns(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"""
        self.selected_columns.clear()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.update_available_order_columns()
        
    def update_available_order_columns(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        self.available_order_columns.clear()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –∞–ª–∏–∞—Å—ã)
        for i in range(self.selected_columns.count()):
            column_text = self.selected_columns.item(i).text()
            self.available_order_columns.addItem(column_text)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∏—Ö –∞–ª–∏–∞—Å–∞–º–∏
        for i in range(self.agg_functions.count()):
            agg_text = self.agg_functions.item(i).text()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–ª–∏–∞—Å –∏–∑ –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Ñ–æ—Ä–º–∞—Ç: "FUNCTION(column) AS alias")
            if " AS " in agg_text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–ª–∏–∞—Å –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "MAX(reader_id) AS mx"
                alias = agg_text.split(" AS ")[-1].strip('"')
                self.available_order_columns.addItem(alias)
        
    def add_group_column(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
        selected_items = self.available_group_columns.selectedItems()
        for item in selected_items:
            if self.group_columns.findItems(item.text(), Qt.MatchExactly):
                continue
            self.group_columns.addItem(item.text())
            
    def add_all_group_columns(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
        self.group_columns.clear()
        for i in range(self.available_group_columns.count()):
            item = self.available_group_columns.item(i)
            self.group_columns.addItem(item.text())
            
    def remove_group_column(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –∏–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
        selected_items = self.group_columns.selectedItems()
        for item in selected_items:
            self.group_columns.takeItem(self.group_columns.row(item))
            
    def remove_all_group_columns(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏"""
        self.group_columns.clear()
            
    def add_aggregate_function(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        dialog = AggregateFunctionDialog(self.selected_columns, self)
        if dialog.exec() == QDialog.Accepted:
            agg_func = dialog.get_aggregate_function()
            if agg_func:
                self.agg_functions.addItem(agg_func)
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                self.update_available_order_columns()
                
    def remove_aggregate_function(self):
        """–£–¥–∞–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
        selected_items = self.agg_functions.selectedItems()
        for item in selected_items:
            self.agg_functions.takeItem(self.agg_functions.row(item))
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.update_available_order_columns()
            
    def remove_all_aggregate_functions(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        self.agg_functions.clear()
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.update_available_order_columns()
            
    def add_order_column(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        selected_items = self.available_order_columns.selectedItems()
        for item in selected_items:
            column_name = item.text()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Å—Ç–æ–ª–±–µ—Ü
            if not self.is_sort_column_added(column_name):
                self.add_sort_widget(column_name)
                
    def add_all_order_columns(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        self.clear_all_sort_widgets()
        for i in range(self.available_order_columns.count()):
            item = self.available_order_columns.item(i)
            self.add_sort_widget(item.text())
            
    def add_sort_widget(self, column_name):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞"""
        sort_widget = SortColumnWidget(column_name, self.sort_widgets_container)
        sort_widget.setParent(self.sort_widgets_container)
        self.sort_widgets_layout.addWidget(sort_widget)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        sort_widget.direction_combo.setCurrentIndex(0)
        sort_widget.direction_combo.setCurrentText("ASC")
        sort_widget.direction_combo.update()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é
        sort_widget.remove_btn.clicked.connect(lambda: self.remove_sort_widget(sort_widget))
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ –Ω–æ–≤–æ–º—É –≤–∏–¥–∂–µ—Ç—É
        sort_widget.setStyleSheet("""
            SortColumnWidget {
                background: rgba(25, 25, 35, 0.8);
                border: 2px solid #44475a;
                border-radius: 6px;
                margin: 2px;
                padding: 5px;
            }
            
            #sortColumnLabel {
                color: #f8f8f2;
                font-size: 13px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
            }
            
            #sortDirectionCombo {
                background: rgba(15, 15, 25, 0.8);
                border: 2px solid #44475a;
                border-radius: 4px;
                padding: 4px;
                font-size: 12px;
                font-family: 'Consolas', 'Fira Code', monospace;
                color: #ffffff;
                min-width: 60px;
            }
            
            #sortDirectionCombo:focus {
                border: 2px solid #64ffda;
                background: rgba(35, 35, 45, 0.9);
            }
            
            #sortDirectionCombo::drop-down {
                border: none;
                width: 15px;
            }
            
            #sortDirectionCombo::down-arrow {
                image: none;
                border: 2px solid #64ffda;
                width: 4px;
                height: 4px;
                background: #64ffda;
                border-radius: 2px;
            }
            
            #sortDirectionCombo QAbstractItemView {
                background: rgba(15, 15, 25, 0.95);
                border: 2px solid #44475a;
                border-radius: 4px;
                color: #ffffff;
                selection-background-color: #64ffda;
                selection-color: #0a0a0f;
                font-family: 'Consolas', 'Fira Code', monospace;
                font-size: 12px;
            }
            
            #sortDirectionCombo QAbstractItemView::item {
                padding: 6px;
                border-bottom: 1px solid #44475a40;
            }
            
            #sortDirectionCombo QAbstractItemView::item:hover {
                background-color: rgba(100, 255, 218, 0.2);
            }
            
            #sortDirectionCombo QAbstractItemView::item:selected {
                background-color: #64ffda;
                color: #0a0a0f;
            }
            
            #removeSortBtn {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #ff6b6b, 
                                          stop: 1 #ff5252);
                border: 1px solid #ff6b6b;
                border-radius: 4px;
                color: #ffffff;
                font-size: 10px;
                font-weight: bold;
            }
            
            #removeSortBtn:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #ff5252, 
                                          stop: 1 #f44336);
                border: 2px solid #ff6b6b;
            }
        """)
        
    def is_sort_column_added(self, column_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        for i in range(self.sort_widgets_layout.count()):
            widget = self.sort_widgets_layout.itemAt(i).widget()
            if isinstance(widget, SortColumnWidget) and widget.column_name == column_name:
                return True
        return False
        
    def remove_sort_widget(self, widget):
        """–£–¥–∞–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        print(f"–£–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏: {widget.column_name}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        # –£–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç –∏–∑ layout
        self.sort_widgets_layout.removeWidget(widget)
        # –£–¥–∞–ª—è–µ–º –≤–∏–¥–∂–µ—Ç
        widget.deleteLater()
            
    def clear_all_sort_widgets(self):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –≤–∏–¥–∂–µ—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
        while self.sort_widgets_layout.count():
            child = self.sort_widgets_layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()
            
    def execute_and_send_query(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥–ª–∞–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if not self.db_instance or not self.db_instance.is_connected():
                self.show_error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
                
            # –°—Ç—Ä–æ–∏–º SQL –∑–∞–ø—Ä–æ—Å
            sql_query = self.build_sql_query()
            
            if not sql_query:
                self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏ —Å—Ç–æ–ª–±—Ü—ã.")
                return
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            results = self.db_instance.execute_custom_query(sql_query)
            
            if not results:
                self.show_error("–ó–∞–ø—Ä–æ—Å –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                return
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≥–ª–∞–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            self.results_to_main_table.emit(results)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            self.show_info(f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            self.accept()
            
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}"
            self.show_error(error_msg)
            
    def build_sql_query(self):
        """–°—Ç—Ä–æ–∏—Ç SQL –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            table_name = self.table_combo.currentText()
            if not table_name:
                return None
                
            # SELECT —á–∞—Å—Ç—å
            select_parts = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            for i in range(self.selected_columns.count()):
                column = self.selected_columns.item(i).text()
                select_parts.append(f'"{column}"')
                
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            for i in range(self.agg_functions.count()):
                agg_func = self.agg_functions.item(i).text()
                select_parts.append(agg_func)
                
            if not select_parts:
                select_parts = ["*"]
                
            select_clause = "SELECT " + ", ".join(select_parts)
            
            # FROM —á–∞—Å—Ç—å
            from_clause = f'FROM "{table_name}"'
            
            # WHERE —á–∞—Å—Ç—å
            where_clause = ""
            where_condition = self.where_input.text().strip()
            if where_condition:
                where_clause = f"WHERE {where_condition}"
                
            # GROUP BY —á–∞—Å—Ç—å
            group_clause = ""
            group_columns = []
            for i in range(self.group_columns.count()):
                group_columns.append(f'"{self.group_columns.item(i).text()}"')
            if group_columns:
                group_clause = f"GROUP BY {', '.join(group_columns)}"
                
            # HAVING —á–∞—Å—Ç—å
            having_clause = ""
            having_condition = self.having_input.text().strip()
            if having_condition:
                having_clause = f"HAVING {having_condition}"
                
            # ORDER BY —á–∞—Å—Ç—å - –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
            order_clause = ""
            order_columns = []
            for i in range(self.sort_widgets_layout.count()):
                widget = self.sort_widgets_layout.itemAt(i).widget()
                if isinstance(widget, SortColumnWidget):
                    order_columns.append(widget.get_sort_clause())
            if order_columns:
                order_clause = f"ORDER BY {', '.join(order_columns)}"
                
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            query_parts = [select_clause, from_clause]
            if where_clause:
                query_parts.append(where_clause)
            if group_clause:
                query_parts.append(group_clause)
            if having_clause:
                query_parts.append(having_clause)
            if order_clause:
                query_parts.append(order_clause)
                
            return " ".join(query_parts)
            
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
            
        
    def preview_sql(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä SQL –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            sql_query = self.build_sql_query()
            if not sql_query:
                self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏ —Å—Ç–æ–ª–±—Ü—ã.")
                return
                
            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ SQL
            from PySide6.QtWidgets import QDialog, QVBoxLayout, QTextEdit, QPushButton, QHBoxLayout
            from PySide6.QtCore import Qt
            
            dialog = QDialog(self)
            dialog.setWindowTitle("–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä SQL")
            dialog.setModal(True)
            dialog.setMinimumSize(600, 400)
            
            layout = QVBoxLayout()
            dialog.setLayout(layout)
            
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è SQL
            sql_text = QTextEdit()
            sql_text.setPlainText(sql_query)
            sql_text.setReadOnly(True)
            sql_text.setFont(QFont("Consolas", 12))
            layout.addWidget(sql_text)
            
            # –ö–Ω–æ–ø–∫–∏
            buttons_layout = QHBoxLayout()
            
            copy_button = QPushButton(" –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
            copy_button.clicked.connect(lambda: self.copy_to_clipboard(sql_query))
            
            close_button = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_button.clicked.connect(dialog.accept)
            
            buttons_layout.addWidget(copy_button)
            buttons_layout.addStretch()
            buttons_layout.addWidget(close_button)
            layout.addLayout(buttons_layout)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
            dialog.setStyleSheet("""
                QDialog {
                    background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,
                                              stop: 0 #0a0a0f, 
                                              stop: 1 #1a1a2e);
                    border: 2px solid #44475a;
                    border-radius: 10px;
                }
                QTextEdit {
                    background: rgba(15, 15, 25, 0.8);
                    border: 2px solid #44475a;
                    border-radius: 6px;
                    padding: 10px;
                    font-family: 'Consolas', 'Fira Code', monospace;
                    color: #f8f8f2;
                    font-size: 12px;
                }
                QPushButton {
                    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                              stop: 0 #44475a, 
                                              stop: 1 #2a2a3a);
                    border: 2px solid #6272a4;
                    border-radius: 6px;
                    color: #f8f8f2;
                    font-size: 12px;
                    font-weight: bold;
                    font-family: 'Consolas', 'Fira Code', monospace;
                    padding: 8px 12px;
                    min-width: 80px;
                }
                QPushButton:hover {
                    background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                              stop: 0 #6272a4, 
                                              stop: 1 #44475a);
                    border: 2px solid #64ffda;
                    color: #64ffda;
                }
            """)
            
            dialog.exec()
            
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
            
    def copy_to_clipboard(self, text):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        try:
            from PySide6.QtWidgets import QApplication
            clipboard = QApplication.clipboard()
            clipboard.setText(text)
            self.show_info("SQL –∑–∞–ø—Ä–æ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        except Exception as e:
            self.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            
    def show_info(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", message)
        
        
    def clear_all(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.selected_columns.clear()
        self.group_columns.clear()
        self.agg_functions.clear()
        self.where_input.clear()
        self.having_input.clear()
        
        # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        self.clear_where_error()
        self.clear_having_error()
        
        # –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–µ —Å–ø–∏—Å–∫–∏
        self.available_order_columns.clear()
        self.available_group_columns.clear()
        
        # –û—á–∏—â–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        self.clear_all_sort_widgets()
        
        # –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.last_query_results = []
        
    def show_error(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        QMessageBox.warning(self, "–û—à–∏–±–∫–∞", message)
        
    def validate_where_condition(self, text):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç SQL —É—Å–ª–æ–≤–∏–µ WHERE –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        text = text.strip()
        
        if not text:
            self.clear_where_error()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É SQL
        is_valid, error_message, success_message = self.validate_sql_condition(text)
        
        if not is_valid:
            self.set_where_error(error_message)
        else:
            if success_message:
                self.set_where_success(success_message)
            else:
                self.clear_where_error()
                
    def validate_sql_condition(self, condition):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç SQL —É—Å–ª–æ–≤–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_valid, error_message, success_message)"""
        import re
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        condition = re.sub(r'\s+', ' ', condition.strip())
        
        if not condition:
            return True, "", ""
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–ø–∞—Å–Ω—ã–µ SQL –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        dangerous_patterns = [
            r'\b(DROP|DELETE|INSERT|UPDATE|CREATE|ALTER|TRUNCATE)\b',
            r'\b(EXEC|EXECUTE|sp_|xp_)\b',
            r'--',  # SQL –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            r'/\*.*?\*/',  # –ë–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            r';\s*$',  # –¢–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ
        ]
        
        for pattern in dangerous_patterns:
            if re.search(pattern, condition, re.IGNORECASE):
                return False, "‚úï –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ SQL –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–∑–æ–≤—ã–µ SQL –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã
        allowed_operators = ['=', '!=', '<>', '<', '>', '<=', '>=', 'LIKE', 'ILIKE', 'IN', 'NOT IN', 'IS NULL', 'IS NOT NULL']
        logical_operators = ['AND', 'OR', 'NOT']
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫
        if condition.count('(') != condition.count(')'):
            return False, "‚úï –ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏", ""
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç—ã–µ —É—Å–ª–æ–≤–∏—è
        if condition in ['AND', 'OR', 'NOT']:
            return False, "‚úï –ù–µ–ø–æ–ª–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ", ""
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –ª–∏—Ç–µ—Ä–∞–ª–æ–≤
        if condition.count("'") % 2 != 0:
            return False, "‚úï –ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –∫–∞–≤—ã—á–∫–∏", ""
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å LIKE —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if 'LIKE' in condition.upper() or 'ILIKE' in condition.upper():
            if not re.search(r"LIKE\s+['\"].*['\"]", condition, re.IGNORECASE):
                return False, "‚úï LIKE –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç—Ä–æ–∫–æ–≤—ã–π –ª–∏—Ç–µ—Ä–∞–ª", ""
        
        # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
        return True, "", "‚úì –í–∞–ª–∏–¥–Ω–æ–µ SQL —É—Å–ª–æ–≤–∏–µ"
        
    def set_where_error(self, message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è WHERE"""
        self.where_error_label.setText(message)
        self.where_error_label.setProperty("class", "error-label")
        self.where_error_label.setStyleSheet(self.styleSheet())
        self.where_error_label.show()
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.where_input.setProperty("class", "error")
        self.where_input.setStyleSheet(self.styleSheet())
        
    def set_where_success(self, message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Å–ø–µ—Ö –¥–ª—è –ø–æ–ª—è WHERE"""
        self.where_error_label.setText(message)
        self.where_error_label.setProperty("class", "success-label")
        self.where_error_label.setStyleSheet(self.styleSheet())
        self.where_error_label.show()
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.where_input.setProperty("class", "success")
        self.where_input.setStyleSheet(self.styleSheet())
        
    def clear_where_error(self):
        """–û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è WHERE"""
        self.where_error_label.hide()
        self.where_error_label.setText("")
        self.where_error_label.setProperty("class", "error-label")
        self.where_error_label.setStyleSheet(self.styleSheet())
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.where_input.setProperty("class", "")
        self.where_input.setStyleSheet(self.styleSheet())
        
    def validate_having_condition(self, text):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç SQL —É—Å–ª–æ–≤–∏–µ HAVING –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        text = text.strip()
        
        if not text:
            self.clear_having_error()
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É SQL
        is_valid, error_message, success_message = self.validate_sql_condition(text)
        
        if not is_valid:
            self.set_having_error(error_message)
        else:
            if success_message:
                self.set_having_success(success_message)
            else:
                self.clear_having_error()
                
    def set_having_error(self, message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è HAVING"""
        self.having_error_label.setText(message)
        self.having_error_label.setProperty("class", "error-label")
        self.having_error_label.setStyleSheet(self.styleSheet())
        self.having_error_label.show()
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.having_input.setProperty("class", "error")
        self.having_input.setStyleSheet(self.styleSheet())
        
    def set_having_success(self, message):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Å–ø–µ—Ö –¥–ª—è –ø–æ–ª—è HAVING"""
        self.having_error_label.setText(message)
        self.having_error_label.setProperty("class", "success-label")
        self.having_error_label.setStyleSheet(self.styleSheet())
        self.having_error_label.show()
        
        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.having_input.setProperty("class", "success")
        self.having_input.setStyleSheet(self.styleSheet())
        
    def clear_having_error(self):
        """–û—á–∏—â–∞–µ—Ç –æ—à–∏–±–∫—É –¥–ª—è –ø–æ–ª—è HAVING"""
        self.having_error_label.hide()
        self.having_error_label.setText("")
        self.having_error_label.setProperty("class", "error-label")
        self.having_error_label.setStyleSheet(self.styleSheet())
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ–ª—è –≤–≤–æ–¥–∞
        self.having_input.setProperty("class", "")
        self.having_input.setStyleSheet(self.styleSheet())
        
    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏"""
        self.setStyleSheet("""
            /* –û—Å–Ω–æ–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥ */
            QDialog {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,
                                          stop: 0 #0a0a0f, 
                                          stop: 1 #1a1a2e);
                border: 2px solid #44475a;
                border-radius: 10px;
            }
            
            /* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */
            #headerLabel {
                font-size: 20px;
                font-weight: bold;
                color: #64ffda;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 15px;
                background: rgba(10, 10, 15, 0.7);
                border-radius: 8px;
                border: 1px solid #64ffda;
            }
            
            
            /* –í–∫–ª–∞–¥–∫–∏ */
            #tabWidget {
                background: transparent;
            }
            
            QTabWidget::pane {
                border: 2px solid #44475a;
                border-radius: 8px;
                background: rgba(15, 15, 25, 0.6);
            }
            
            QTabWidget::tab-bar {
                alignment: left;
            }
            
            QTabBar::tab {
                background: rgba(25, 25, 35, 0.8);
                border: 2px solid #44475a;
                border-bottom: none;
                border-radius: 8px 8px 0 0;
                padding: 10px 15px;
                margin-right: 2px;
                color: #f8f8f2;
                font-size: 13px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
            }
            
            QTabBar::tab:selected {
                background: rgba(100, 255, 218, 0.2);
                border-color: #64ffda;
                color: #64ffda;
            }
            
            QTabBar::tab:hover {
                background: rgba(100, 255, 218, 0.1);
                border-color: #6272a4;
            }
            
            /* –ü–∞–Ω–µ–ª—å */
            #queryPanel {
                background: rgba(15, 15, 25, 0.6);
                border-radius: 8px;
                padding: 10px;
            }
            
            /* –ì—Ä—É–ø–ø—ã */
            QGroupBox {
                font-size: 14px;
                font-weight: bold;
                color: #64ffda;
                font-family: 'Consolas', 'Fira Code', monospace;
                border: 2px solid #44475a;
                border-radius: 8px;
                margin: 10px 0;
                padding: 10px;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px 0 5px;
                background: rgba(10, 10, 15, 0.9);
            }
            
            /* –ú–µ—Ç–∫–∏ */
            QLabel {
                color: #ffffff;
                font-size: 13px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
            }
            
            /* –í—ã–ø–∞–¥–∞—é—â–∏–µ —Å–ø–∏—Å–∫–∏ */
            QComboBox {
                background: rgba(25, 25, 35, 0.9);
                border: 2px solid #44475a;
                border-radius: 6px;
                padding: 8px;
                font-size: 13px;
                font-family: 'Consolas', 'Fira Code', monospace;
                color: #ffffff;
                min-height: 20px;
            }
            
            QComboBox#tableCombo {
                background: rgba(25, 25, 35, 0.9);
                border: 2px solid #44475a;
                border-radius: 6px;
                padding: 8px;
                font-size: 13px;
                font-family: 'Consolas', 'Fira Code', monospace;
                color: #ffffff;
                min-height: 20px;
            }
            
            QComboBox#tableCombo:focus {
                border: 2px solid #64ffda;
                background: rgba(35, 35, 45, 0.9);
            }
            
            QComboBox#tableCombo::drop-down {
                border: none;
                background: rgba(25, 25, 35, 0.9);
            }
            
            QComboBox#tableCombo::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #64ffda;
                margin-right: 5px;
            }
            
            QComboBox#tableCombo QAbstractItemView {
                background: rgba(25, 25, 35, 0.95);
                border: 2px solid #64ffda;
                border-radius: 6px;
                color: #ffffff;
                selection-background-color: #64ffda;
                selection-color: #0a0a0f;
            }
            
            QComboBox#sortDirectionCombo {
                background: rgba(25, 25, 35, 0.9);
                border: 2px solid #44475a;
                border-radius: 6px;
                padding: 4px;
                font-size: 12px;
                font-family: 'Consolas', 'Fira Code', monospace;
                color: #ffffff;
                min-height: 20px;
            }
            
            QComboBox#sortDirectionCombo:focus {
                border: 2px solid #64ffda;
                background: rgba(35, 35, 45, 0.9);
            }
            
            QComboBox#sortDirectionCombo QAbstractItemView {
                background: rgba(25, 25, 35, 0.95);
                border: 2px solid #64ffda;
                border-radius: 6px;
                color: #ffffff;
                selection-background-color: #64ffda;
                selection-color: #0a0a0f;
            }
            
            QComboBox:editable {
                background: rgba(15, 15, 25, 0.8);
                border: 2px solid #64ffda;
            }
            
            QComboBox:editable:focus {
                border: 2px solid #64ffda;
                background: rgba(35, 35, 45, 0.9);
            }
            
            QComboBox:focus {
                border: 2px solid #64ffda;
                background: rgba(35, 35, 45, 0.9);
            }
            
            /* –ü–æ–ª—è –≤–≤–æ–¥–∞ */
            QLineEdit {
                background: rgba(15, 15, 25, 0.8);
                border: 2px solid #44475a;
                border-radius: 6px;
                padding: 8px;
                font-size: 13px;
                font-family: 'Consolas', 'Fira Code', monospace;
                color: #f8f8f2;
                selection-background-color: #64ffda;
                selection-color: #0a0a0f;
            }
            
            QLineEdit:focus {
                border: 2px solid #64ffda;
                background: rgba(35, 35, 45, 0.9);
            }
            
            QLineEdit::placeholder {
                color: #6272a4;
                font-style: italic;
            }
            
            QComboBox::drop-down {
                border: none;
                width: 20px;
            }
            
            QComboBox::down-arrow {
                image: none;
                border: 2px solid #64ffda;
                width: 6px;
                height: 6px;
                background: #64ffda;
                border-radius: 3px;
            }
            
            QComboBox QAbstractItemView {
                background: rgba(25, 25, 35, 0.95);
                border: 2px solid #44475a;
                border-radius: 6px;
                color: #ffffff;
                selection-background-color: #64ffda;
                selection-color: #0a0a0f;
                font-family: 'Consolas', 'Fira Code', monospace;
                font-size: 13px;
            }
            
            QComboBox QAbstractItemView::item {
                padding: 8px;
                border-bottom: 1px solid #44475a40;
            }
            
            QComboBox QAbstractItemView::item:hover {
                background-color: rgba(100, 255, 218, 0.2);
            }
            
            QComboBox QAbstractItemView::item:selected {
                background-color: #64ffda;
                color: #0a0a0f;
            }
            
            
            /* –°–ø–∏—Å–∫–∏ */
            QListWidget {
                background: rgba(15, 15, 25, 0.8);
                border: 2px solid #44475a;
                border-radius: 6px;
                padding: 5px;
                font-size: 13px;
                font-family: 'Consolas', 'Fira Code', monospace;
                color: #f8f8f2;
                selection-background-color: #64ffda;
                selection-color: #0a0a0f;
            }
            
            QListWidget:focus {
                border: 2px solid #64ffda;
            }
            
            QListWidget::item {
                padding: 5px;
                border-bottom: 1px solid #44475a40;
            }
            
            QListWidget::item:selected {
                background-color: #64ffda40;
                color: #64ffda;
            }
            
            QListWidget::item:hover {
                background-color: rgba(100, 255, 218, 0.2);
            }
            
            /* –ö–Ω–æ–ø–∫–∏ */
            QPushButton {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #44475a, 
                                          stop: 1 #2a2a3a);
                border: 2px solid #6272a4;
                border-radius: 6px;
                color: #f8f8f2;
                font-size: 12px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 8px 12px;
                min-width: 80px;
            }
            
            QPushButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #6272a4, 
                                          stop: 1 #44475a);
                border: 2px solid #64ffda;
                color: #64ffda;
            }
            
            QPushButton:pressed {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #2a2a3a, 
                                          stop: 1 #1a1a2e);
                padding: 7px 11px;
            }
            
            /* –ö–Ω–æ–ø–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ */
            #addOrderBtn, #addAllOrderBtn,
            #addGroupBtn, #removeGroupBtn, #addAllGroupBtn, #removeAllGroupBtn,
            #addAggBtn, #removeAggBtn, #removeAllAggBtn {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #6272a4, 
                                          stop: 1 #44475a);
                border: 2px solid #64ffda;
                border-radius: 6px;
                color: #64ffda;
                font-size: 12px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 6px 10px;
                min-width: 60px;
            }
            
            #addOrderBtn:hover, #addAllOrderBtn:hover,
            #addGroupBtn:hover, #removeGroupBtn:hover, #addAllGroupBtn:hover, #removeAllGroupBtn:hover,
            #addAggBtn:hover, #removeAggBtn:hover, #removeAllAggBtn:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #64ffda, 
                                          stop: 1 #50e3c2);
                color: #0a0a0f;
            }
            
            /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */
            #sortWidgetsContainer {
                background: rgba(15, 15, 25, 0.6);
                border: 2px solid #44475a;
                border-radius: 6px;
                padding: 10px;
                min-height: 100px;
            }
            
            /* –í–∏–¥–∂–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ */
            SortColumnWidget {
                background: rgba(25, 25, 35, 0.8);
                border: 2px solid #44475a;
                border-radius: 6px;
                margin: 2px;
                padding: 5px;
            }
            
            #sortColumnLabel {
                color: #f8f8f2;
                font-size: 13px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
            }
            
            #sortDirectionCombo {
                background: rgba(15, 15, 25, 0.8);
                border: 2px solid #44475a;
                border-radius: 4px;
                padding: 4px;
                font-size: 12px;
                font-family: 'Consolas', 'Fira Code', monospace;
                color: #ffffff;
                min-width: 60px;
            }
            
            #sortDirectionCombo:focus {
                border: 2px solid #64ffda;
                background: rgba(35, 35, 45, 0.9);
            }
            
            #sortDirectionCombo::drop-down {
                border: none;
                width: 15px;
            }
            
            #sortDirectionCombo::down-arrow {
                image: none;
                border: 2px solid #64ffda;
                width: 4px;
                height: 4px;
                background: #64ffda;
                border-radius: 2px;
            }
            
            #sortDirectionCombo QAbstractItemView {
                background: rgba(15, 15, 25, 0.95);
                border: 2px solid #44475a;
                border-radius: 4px;
                color: #ffffff;
                selection-background-color: #64ffda;
                selection-color: #0a0a0f;
                font-family: 'Consolas', 'Fira Code', monospace;
                font-size: 12px;
            }
            
            #sortDirectionCombo QAbstractItemView::item {
                padding: 6px;
                border-bottom: 1px solid #44475a40;
            }
            
            #sortDirectionCombo QAbstractItemView::item:hover {
                background-color: rgba(100, 255, 218, 0.2);
            }
            
            #sortDirectionCombo QAbstractItemView::item:selected {
                background-color: #64ffda;
                color: #0a0a0f;
            }
            
            #sortDirectionCombo::drop-down {
                border: none;
                width: 15px;
            }
            
            #sortDirectionCombo::down-arrow {
                image: none;
                border: 2px solid #64ffda;
                width: 4px;
                height: 4px;
                background: #64ffda;
                border-radius: 2px;
            }
            
            #removeSortBtn {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #ff6b6b, 
                                          stop: 1 #ff5252);
                border: 1px solid #ff6b6b;
                border-radius: 4px;
                color: #ffffff;
                font-size: 10px;
                font-weight: bold;
            }
            
            #removeSortBtn:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #ff5252, 
                                          stop: 1 #f44336);
                border: 2px solid #ff6b6b;
            }
            
            /* –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ */
            #executeButton {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                          stop: 0 #64ffda, 
                                          stop: 1 #00bcd4);
                border: none;
                border-radius: 6px;
                color: #0a0a0f;
                font-size: 14px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 10px 20px;
                min-width: 120px;
            }
            
            #executeButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                          stop: 0 #50e3c2, 
                                          stop: 1 #00acc1);
                border: 2px solid #64ffda;
            }
            
            #clearButton {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                          stop: 0 #ff6b6b, 
                                          stop: 1 #ff5252);
                border: none;
                border-radius: 6px;
                color: #ffffff;
                font-size: 14px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 10px 20px;
                min-width: 120px;
            }
            
            #clearButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                          stop: 0 #ff5252, 
                                          stop: 1 #f44336);
                border: 2px solid #ff6b6b;
            }
            
            #closeButton {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                          stop: 0 #6272a4, 
                                          stop: 1 #44475a);
                border: none;
                border-radius: 6px;
                color: #f8f8f2;
                font-size: 14px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 10px 20px;
                min-width: 120px;
            }
            
            #closeButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                          stop: 0 #44475a, 
                                          stop: 1 #2a2a3a);
                border: 2px solid #6272a4;
            }
            
            #previewButton {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                          stop: 0 #ffd700, 
                                          stop: 1 #ffb347);
                border: none;
                border-radius: 6px;
                color: #0a0a0f;
                font-size: 14px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 10px 20px;
                min-width: 120px;
            }
            
            #previewButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 0,
                                          stop: 0 #ffed4e, 
                                          stop: 1 #ffa726);
                border: 2px solid #ffd700;
            }
            
            
            
            /* –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã */
            QScrollBar:vertical {
                border: none;
                background: #1a1a2e;
                width: 12px;
                margin: 0px;
                border-radius: 6px;
            }
            
            QScrollBar::handle:vertical {
                background: #64ffda;
                border-radius: 6px;
                min-height: 25px;
            }
            
            QScrollBar::handle:vertical:hover {
                background: #50e3c2;
            }
            
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                height: 0px;
            }
            
            /* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä–æ–ª–ª–±–∞—Ä—ã */
            QScrollBar:horizontal {
                border: none;
                background: #1a1a2e;
                height: 12px;
                margin: 0px;
                border-radius: 6px;
            }
            
            QScrollBar::handle:horizontal {
                background: #64ffda;
                border-radius: 6px;
                min-width: 25px;
            }
            
            QScrollBar::handle:horizontal:hover {
                background: #50e3c2;
            }
            
            QScrollBar::add-line:horizontal, QScrollBar::sub-line:horizontal {
                width: 0px;
            }
            
            /* –°–∫—Ä–æ–ª–ª-–æ–±–ª–∞—Å—Ç—å */
            #mainScrollArea {
                border: 2px solid #44475a;
                border-radius: 8px;
                background: rgba(15, 15, 25, 0.6);
            }
            
            #mainScrollArea QWidget {
                background: transparent;
            }
            
            /* –ö–æ–Ω—Ç–µ–Ω—Ç-–≤–∏–¥–∂–µ—Ç */
            #contentWidget {
                background: transparent;
            }
            
            /* –°—Ç–∏–ª–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ WHERE */
            QLineEdit.error, QComboBox.error, QTextEdit.error, QSpinBox.error, QDoubleSpinBox.error {
                border: 2px solid #ff5555 !important;
                background: rgba(75, 25, 35, 0.8) !important;
            }
            
            QLineEdit.success, QComboBox.success, QTextEdit.success, QSpinBox.success, QDoubleSpinBox.success {
                border: 2px solid #50fa7b !important;
                background: rgba(25, 75, 35, 0.3) !important;
            }
            
            .error-label {
                color: #ff5555;
                font-size: 11px;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 2px 5px;
                background: rgba(255, 85, 85, 0.1);
                border-radius: 4px;
                margin-top: 2px;
                border-left: 3px solid #ff5555;
            }
            
            .success-label {
                color: #50fa7b;
                font-size: 11px;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 2px 5px;
                background: rgba(80, 250, 123, 0.1);
                border-radius: 4px;
                margin-top: 2px;
                border-left: 3px solid #50fa7b;
            }
        """)


class AggregateFunctionDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
    
    def __init__(self, columns_list, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é")
        self.setModal(True)
        self.setMinimumSize(400, 300)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º–Ω—É—é –ø–∞–ª–∏—Ç—Ä—É
        self.set_dark_palette()
        
        layout = QVBoxLayout()
        self.setLayout(layout)
        
        # –í—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
        layout.addWidget(QLabel("–§—É–Ω–∫—Ü–∏—è:"))
        self.function_combo = QComboBox()
        self.function_combo.addItems([
            "COUNT(*)", "COUNT(column)", "SUM(column)", "AVG(column)", 
            "MIN(column)", "MAX(column)", "DISTINCT column"
        ])
        layout.addWidget(self.function_combo)
        
        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞
        layout.addWidget(QLabel("–°—Ç–æ–ª–±–µ—Ü:"))
        self.column_combo = QComboBox()
        self.column_combo.setEditable(False)  # –¢–æ–ª—å–∫–æ –≤—ã–±–æ—Ä, –±–µ–∑ –≤–≤–æ–¥–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.column_combo.setInsertPolicy(QComboBox.NoInsert)
        for i in range(columns_list.count()):
            column_text = columns_list.item(i).text()
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (—Ñ–æ—Ä–º–∞—Ç: "column_name AS alias")
            if " AS " in column_text:
                display_text = column_text
            else:
                display_text = column_text
            self.column_combo.addItem(display_text)
        layout.addWidget(self.column_combo)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–∞–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if self.column_combo.count() > 0:
            self.column_combo.setCurrentIndex(0)
            self.column_combo.setCurrentText(self.column_combo.itemText(0))
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–∞
        self.column_combo.currentTextChanged.connect(self.on_column_selected)
        self.column_combo.currentIndexChanged.connect(self.on_column_index_changed)
        
        # –ê–ª–∏–∞—Å
        layout.addWidget(QLabel("–ê–ª–∏–∞—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"))
        self.alias_input = QLineEdit()
        self.alias_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: total_count")
        layout.addWidget(self.alias_input)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        
        ok_button = QPushButton("OK")
        ok_button.clicked.connect(self.accept)
        
        cancel_button = QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_button.clicked.connect(self.reject)
        
        buttons_layout.addWidget(ok_button)
        buttons_layout.addWidget(cancel_button)
        layout.addLayout(buttons_layout)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
        self.function_combo.currentTextChanged.connect(self.on_function_changed)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
        self.update_column_display()
        
        self.apply_styles()
        
    def set_dark_palette(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç—ë–º–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É"""
        dark_palette = QPalette()
        dark_palette.setColor(QPalette.Window, QColor(18, 18, 24))
        dark_palette.setColor(QPalette.WindowText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Base, QColor(25, 25, 35))
        dark_palette.setColor(QPalette.AlternateBase, QColor(35, 35, 45))
        dark_palette.setColor(QPalette.ToolTipBase, QColor(64, 255, 218))
        dark_palette.setColor(QPalette.ToolTipText, QColor(18, 18, 24))
        dark_palette.setColor(QPalette.Text, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Button, QColor(40, 40, 50))
        dark_palette.setColor(QPalette.ButtonText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.BrightText, QColor(64, 255, 218))
        dark_palette.setColor(QPalette.Highlight, QColor(64, 255, 218))
        dark_palette.setColor(QPalette.HighlightedText, QColor(18, 18, 24))
        self.setPalette(dark_palette)
        
    def on_function_changed(self, function):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏"""
        if function == "COUNT(*)":
            self.column_combo.setEnabled(False)
            self.column_combo.setCurrentText("")  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –¥–ª—è COUNT(*)
        else:
            self.column_combo.setEnabled(True)
            # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
            if not self.column_combo.currentText() or self.column_combo.currentText().strip() == "":
                self.update_column_display()
            
    def on_column_selected(self, column):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–±—Ü–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
        self.column_combo.setCurrentText(column)
        
    def on_column_index_changed(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç–æ–ª–±—Ü–∞"""
        if index >= 0:
            column_text = self.column_combo.itemText(index)
            self.column_combo.setCurrentText(column_text)
            
    def update_column_display(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞"""
        if self.column_combo.count() > 0:
            current_text = self.column_combo.currentText()
            if not current_text or current_text.strip() == "":
                # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                first_item = self.column_combo.itemText(0)
                self.column_combo.setCurrentText(first_item)
                self.column_combo.setCurrentIndex(0)
            
    def get_aggregate_function(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–≥—Ä–µ–≥–∞—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
        function = self.function_combo.currentText()
        alias = self.alias_input.text().strip()
        
        if function == "COUNT(*)":
            result = "COUNT(*)"
        else:
            column = self.column_combo.currentText()
            if column and column.strip():
                result = function.replace("column", f'"{column}"')
            else:
                result = function  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü –Ω–µ –≤—ã–±—Ä–∞–Ω
                
        if alias:
            result += f' AS "{alias}"'
            
        return result
        
    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏"""
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,
                                          stop: 0 #0a0a0f, 
                                          stop: 1 #1a1a2e);
                border: 2px solid #44475a;
                border-radius: 10px;
            }
            
            QLabel {
                color: #ffffff;
                font-size: 13px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
            }
            
            QComboBox {
                background: rgba(15, 15, 25, 0.8);
                border: 2px solid #44475a;
                border-radius: 8px;
                padding: 12px;
                font-size: 15px;
                font-family: 'Consolas', 'Fira Code', monospace;
                color: #ffffff;
                min-height: 20px;
            }
            
            QComboBox:focus {
                border: 2px solid #64ffda;
                background: rgba(35, 35, 45, 0.9);
            }
            
            QComboBox::drop-down {
                border: none;
                width: 20px;
            }
            
            QComboBox::down-arrow {
                image: none;
                border: 2px solid #64ffda;
                width: 6px;
                height: 6px;
                background: #64ffda;
                border-radius: 3px;
            }
            
            QComboBox QAbstractItemView {
                background: rgba(15, 15, 25, 0.95);
                border: 2px solid #44475a;
                border-radius: 6px;
                color: #ffffff;
                selection-background-color: #64ffda;
                selection-color: #0a0a0f;
                font-family: 'Consolas', 'Fira Code', monospace;
                font-size: 13px;
            }
            
            QComboBox QAbstractItemView::item {
                padding: 8px;
                border-bottom: 1px solid #44475a40;
            }
            
            QComboBox QAbstractItemView::item:hover {
                background-color: rgba(100, 255, 218, 0.2);
            }
            
            QComboBox QAbstractItemView::item:selected {
                background-color: #64ffda;
                color: #0a0a0f;
            }
            
            QLineEdit {
                background: rgba(15, 15, 25, 0.8);
                border: 2px solid #44475a;
                border-radius: 8px;
                padding: 12px;
                font-size: 15px;
                font-family: 'Consolas', 'Fira Code', monospace;
                color: #f8f8f2;
                selection-background-color: #64ffda;
                selection-color: #0a0a0f;
            }
            
            QLineEdit:focus {
                border: 2px solid #64ffda;
                background: rgba(35, 35, 45, 0.9);
            }
            
            QLineEdit::placeholder {
                color: #6272a4;
                font-style: italic;
            }
            
            QPushButton {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #44475a, 
                                          stop: 1 #2a2a3a);
                border: 2px solid #6272a4;
                border-radius: 8px;
                color: #f8f8f2;
                font-size: 14px;
                font-weight: bold;
                font-family: 'Consolas', 'Fira Code', monospace;
                padding: 12px 16px;
                min-width: 100px;
                min-height: 20px;
            }
            
            QPushButton:hover {
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                                          stop: 0 #6272a4, 
                                          stop: 1 #44475a);
                border: 2px solid #64ffda;
                color: #64ffda;
            }
        """)
