from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QWidget,
    QGroupBox, QFormLayout, QComboBox, QLineEdit, QCheckBox, QMessageBox
)
from PySide6.QtCore import Qt
from PySide6.QtGui import QPalette, QColor
from custom.array_line_edit import ArrayLineEdit
from custom.enum_editor import EnumEditor
import re
import logging


class ConstraintsDialog(QDialog):
    """–û—Ç–¥–µ–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–∞."""
    
    def __init__(self, db_instance, parent=None):
        super().__init__(parent)
        self.db_instance = db_instance
        self.setWindowTitle("üîí –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –°–¢–û–õ–ë–¶–ê")
        self.setModal(True)
        self.resize(500, 400)
        self._set_dark_palette()
        self.init_ui()
        self.apply_styles()
    
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox()
        header.setObjectName("dialogHeader")
        header_l = QVBoxLayout(header)
        title = QLabel("–ù–ê–°–¢–†–û–ô–ö–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô")
        title.setObjectName("dialogTitle")
        title.setAlignment(Qt.AlignCenter)
        subtitle = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞")
        subtitle.setObjectName("dialogSubtitle")
        subtitle.setAlignment(Qt.AlignCenter)
        header_l.addWidget(title)
        header_l.addWidget(subtitle)
        layout.addWidget(header)
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        box_constraints = QGroupBox("üîí –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ò –ö–õ–Æ–ß–ò")
        box_constraints.setObjectName("settingsGroup")
        form_cons = QFormLayout(box_constraints)
        form_cons.setLabelAlignment(Qt.AlignRight)
        
        self.pk_check = QCheckBox("PRIMARY KEY")
        self.ai_check = QCheckBox("AUTOINCREMENT")
        # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ PK: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏–º NOT NULL, –±–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏, 
        # —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–±—Ä–∞—Ç—å AUTOINCREMENT (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        self.pk_check.toggled.connect(self._on_pk_toggled)
        # –í–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–µ–Ω–∏–µ NOT NULL / NULL –æ—Å—Ç–∞—ë—Ç—Å—è –Ω–∏–∂–µ
        self.unique_check = QCheckBox("UNIQUE")
        self.not_null_check = QCheckBox("NOT NULL")
        self.null_check = QCheckBox("NULL")
        self.not_null_check.toggled.connect(lambda v: self.null_check.setChecked(False) if v else None)
        self.null_check.toggled.connect(lambda v: self.not_null_check.setChecked(False) if v else None)
        
        form_cons.addRow(self._label("–ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á:"), self.pk_check)
        form_cons.addRow(self._label("–ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç:"), self.ai_check)
        form_cons.addRow(self._label("–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:"), self.unique_check)
        form_cons.addRow(self._label("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"), self.not_null_check)
        form_cons.addRow(self._label("–†–∞–∑—Ä–µ—à–∏—Ç—å NULL:"), self.null_check)
        
        # FK
        self.fk_check = QCheckBox("FOREIGN KEY")
        self.fk_check.toggled.connect(self.on_fk_toggled)
        form_cons.addRow(self._label("–í–Ω–µ—à–Ω–∏–π –∫–ª—é—á:"), self.fk_check)
        fk_row = QWidget()
        fk_l = QHBoxLayout(fk_row)
        fk_l.setContentsMargins(0, 0, 0, 0)
        self.ref_table = QComboBox()
        self.ref_table.setEnabled(False)
        self.ref_column = QComboBox()
        self.ref_column.setEnabled(False)
        self.ref_table.addItems(self.db_instance.get_table_names() or [])
        self.ref_table.currentTextChanged.connect(self._fill_ref_columns)
        self._fill_ref_columns(self.ref_table.currentText())
        fk_l.addWidget(self.ref_table)
        fk_l.addWidget(self.ref_column)
        form_cons.addRow(self._label("–¢–∞–±–ª–∏—Ü–∞/—Å—Ç–æ–ª–±–µ—Ü:"), fk_row)
        layout.addWidget(box_constraints)
        
        # –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        box_extra = QGroupBox("üîß –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´")
        box_extra.setObjectName("settingsGroup")
        form_extra = QFormLayout(box_extra)
        form_extra.setLabelAlignment(Qt.AlignRight)
        self.default_edit = QLineEdit()
        self.default_edit.setPlaceholderText("–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç")
        self.check_edit = QLineEdit()
        self.check_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: value > 0")
        form_extra.addRow(self._label("–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:"), self.default_edit)
        form_extra.addRow(self._label("CHECK –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:"), self.check_edit)
        layout.addWidget(box_extra)
        
        # –ö–Ω–æ–ø–∫–∏
        btn_row = QWidget()
        btn_l = QHBoxLayout(btn_row)
        btn_l.setContentsMargins(16, 10, 16, 10)
        self.btn_ok = QPushButton("‚úÖ –ü–†–ò–ú–ï–ù–ò–¢–¨")
        self.btn_ok.setObjectName("primaryButton")
        self.btn_cancel = QPushButton("‚úñ –û–¢–ú–ï–ù–ê")
        self.btn_cancel.setObjectName("secondaryButton")
        self.btn_cancel.clicked.connect(self.reject)
        self.btn_ok.clicked.connect(self.accept)
        btn_l.addWidget(self.btn_ok)
        btn_l.addWidget(self.btn_cancel)
        layout.addWidget(btn_row)

    def _on_pk_toggled(self, checked: bool):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è PK
        # 1) NOT NULL –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
        self.not_null_check.setChecked(True if checked else self.not_null_check.isChecked())
        self.not_null_check.setEnabled(not checked)
        # 2) NULL –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è, –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ PK
        if checked:
            self.null_check.setChecked(False)
        self.null_check.setEnabled(not checked)
        # 3) UNIQUE –º–æ–∂–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ PK ‚Äî –æ–Ω –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, –≤—ã–∫–ª—é—á–∏–º –∏ –∑–∞–±–ª–æ–∫–∏—Ä—É–µ–º
        self.unique_check.setChecked(False)
        self.unique_check.setEnabled(not checked)
        # 4) AUTOINCREMENT –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ PK (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∏—Ç—å –ø–æ –∂–µ–ª–∞–Ω–∏—é)
        self.ai_check.setEnabled(checked)
        if not checked:
            self.ai_check.setChecked(False)
    
    def _label(self, text):
        l = QLabel(text)
        l.setObjectName("fieldLabel")
        return l
    
    def _set_dark_palette(self):
        dark_palette = QPalette()
        dark_palette.setColor(QPalette.Window, QColor(18, 18, 24))
        dark_palette.setColor(QPalette.WindowText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Base, QColor(25, 25, 35))
        dark_palette.setColor(QPalette.AlternateBase, QColor(35, 35, 45))
        dark_palette.setColor(QPalette.Text, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Button, QColor(40, 40, 50))
        dark_palette.setColor(QPalette.ButtonText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Highlight, QColor(64, 255, 218))
        dark_palette.setColor(QPalette.HighlightedText, QColor(18, 18, 24))
        self.setPalette(dark_palette)
    
    def apply_styles(self):
        self.setStyleSheet("""
            QDialog { background: qlineargradient(x1:0,y1:0,x2:1,y2:1, stop:0 #0a0a0f, stop:1 #1a1a2e); color:#ffffff; }
            #dialogHeader { background: rgba(10,10,15,.7); border:2px solid #64ffda; border-radius:12px; padding:18px; }
            #dialogTitle { font-size:20px; font-weight:bold; color:#64ffda; letter-spacing:2px; }
            #dialogSubtitle { color:#50fa7b; font-size:12px; }
            #settingsGroup { border:2px solid #44475a; border-radius:12px; padding:16px; background:rgba(15,15,25,.6); }
            #settingsGroup::title { left:18px; padding:0 8px; color:#64ffda; font-weight:bold; }
            #fieldLabel { color:#ffffff; font-weight:bold; }
            QLineEdit, QComboBox { background: rgba(15, 15, 25, 0.8); border:2px solid #44475a; border-radius:8px; padding:10px; color:#ffffff; }
            QLineEdit:focus, QComboBox:focus { border:2px solid #64ffda; }
            QComboBox QAbstractItemView { background: rgba(15, 15, 25, 0.95); border:2px solid #64ffda; border-radius:8px; color:#ffffff; selection-background-color: #64ffda; selection-color: #0a0a0f; }
            QComboBox::drop-down { border: none; background: rgba(15, 15, 25, 0.8); }
            QComboBox::down-arrow { border: none; }
            QCheckBox { color:#ffffff; font-weight:bold; }
            QCheckBox::indicator { width:18px; height:18px; }
            QCheckBox::indicator:unchecked { border:2px solid #44475a; background:rgba(25,25,35,.8); border-radius:4px; }
            QCheckBox::indicator:checked { border:2px solid #64ffda; background:#64ffda; border-radius:4px; }
            #primaryButton { background: qlineargradient(x1:0,y1:0,x2:1,y2:0, stop:0 #64ffda, stop:1 #00bcd4); border:none; border-radius:10px; color:#0a0a0f; font-weight:bold; padding:12px 24px; }
            #primaryButton:hover { border:2px solid #64ffda; background: qlineargradient(x1:0,y1:0,x2:1,y2:0, stop:0 #50e3c2, stop:1 #00acc1); }
            #secondaryButton { background: qlineargradient(x1:0,y1:0,x2:1,y2:0, stop:0 #ff6b6b, stop:1 #ff5252); border:none; border-radius:10px; color:#0a0a0f; font-weight:bold; padding:12px 20px; }
        """)
    
    def on_fk_toggled(self, checked: bool):
        self.ref_table.setEnabled(checked)
        self.ref_column.setEnabled(checked)
    
    def _fill_ref_columns(self, table_name: str):
        self.ref_column.clear()
        if table_name:
            self.ref_column.addItems(self.db_instance.get_column_names(table_name) or [])
    
    def get_constraints(self):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."""
        return {
            'primary_key': self.pk_check.isChecked(),
            'autoincrement': self.ai_check.isChecked(),
            'unique': self.unique_check.isChecked(),
            'nullable': not self.not_null_check.isChecked() if self.not_null_check.isChecked() else (self.null_check.isChecked() if self.null_check.isChecked() else True),
            'default': self.default_edit.text().strip() or None,
            'check': self.check_edit.text().strip() or None,
            'foreign_key': f"{self.ref_table.currentText()}.{self.ref_column.currentText()}" if self.fk_check.isChecked() and self.ref_table.currentText() and self.ref_column.currentText() else None
        }


class AddColumnDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ARRAY/ENUM, –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä."""

    def __init__(self, db_instance, parent=None):
        super().__init__(parent)
        self.db_instance = db_instance
        self.setWindowTitle("‚ûï –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–¢–û–õ–ë–¶–ê")
        self.setModal(True)
        self.resize(600, 500)  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self._set_dark_palette()
        self._setup_logging()
        # –•—Ä–∞–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –º–µ–∂–¥—É –æ—Ç–∫—Ä—ã—Ç–∏—è–º–∏ –æ–∫–Ω–∞
        self.constraints: dict = {}
        self.init_ui()
        self.apply_styles()

    # --- UI ---
    def init_ui(self):
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(12)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QGroupBox()
        header.setObjectName("dialogHeader")
        header_l = QVBoxLayout(header)
        title = QLabel("–î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –°–¢–û–õ–ë–¶–ê")
        title.setObjectName("dialogTitle")
        title.setAlignment(Qt.AlignCenter)
        subtitle = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞")
        subtitle.setObjectName("dialogSubtitle")
        subtitle.setAlignment(Qt.AlignCenter)
        header_l.addWidget(title)
        header_l.addWidget(subtitle)
        layout.addWidget(header)

        # 1) –¢–∞–±–ª–∏—Ü–∞
        box_table = QGroupBox("üìã –í–´–ë–û–† –¢–ê–ë–õ–ò–¶–´")
        box_table.setObjectName("settingsGroup")
        form_table = QFormLayout(box_table)
        form_table.setLabelAlignment(Qt.AlignRight)
        self.table_combo = QComboBox()
        self.table_combo.setObjectName("fieldCombo")
        self.table_combo.addItems(self.db_instance.get_table_names() or [])
        form_table.addRow(self._label("–¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"), self.table_combo)
        layout.addWidget(box_table)

        # 2) –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        box_params = QGroupBox("‚öôÔ∏è –ü–ê–†–ê–ú–ï–¢–†–´ –°–¢–û–õ–ë–¶–ê")
        box_params.setObjectName("settingsGroup")
        self.form_params = QFormLayout(box_params)
        self.form_params.setLabelAlignment(Qt.AlignRight)

        self.name_edit = QLineEdit()
        self.name_edit.setObjectName("fieldEdit")
        self.name_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: publication_year")
        self.form_params.addRow(self._label("–ò–º—è —Å—Ç–æ–ª–±—Ü–∞:"), self.name_edit)

        self.type_combo = QComboBox()
        self.type_combo.setObjectName("fieldCombo")
        self.type_combo.addItems([
            "String(255)", "Text", "Integer", "SmallInteger", "BigInteger",
            "Numeric(10, 2)", "Boolean", "Date", "ARRAY", "ENUM"
        ])
        self.type_combo.currentTextChanged.connect(self.on_type_changed)
        self.form_params.addRow(self._label("–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:"), self.type_combo)

        # –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏ —Ç–∏–ø–æ–≤
        self.type_extra = QWidget()
        self.type_extra_layout = QFormLayout(self.type_extra)
        self.type_extra_layout.setContentsMargins(0, 0, 0, 0)
        self.form_params.addRow("", self.type_extra)

        # –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è ARRAY –∏ ENUM
        self.array_item_combo = QComboBox()
        self.array_item_combo.addItems(["String(255)", "Integer", "Numeric(10, 2)"])
        self.array_values = ArrayLineEdit()
        self.array_values.setArray([], delimiter=":")

        self.enum_editor = EnumEditor()

        self.on_type_changed(self.type_combo.currentText())
        layout.addWidget(box_params)

        # –ö–Ω–æ–ø–∫–∏
        btn_row = QWidget()
        btn_l = QHBoxLayout(btn_row)
        btn_l.setContentsMargins(16, 10, 16, 10)
        self.btn_constraints = QPushButton("üîí –ù–ê–°–¢–†–û–ò–¢–¨ –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø")
        self.btn_constraints.setObjectName("secondaryButton")
        self.btn_ok = QPushButton("‚úÖ –î–û–ë–ê–í–ò–¢–¨ –°–¢–û–õ–ë–ï–¶")
        self.btn_ok.setObjectName("primaryButton")
        self.btn_cancel = QPushButton("‚úñ –û–¢–ú–ï–ù–ê")
        self.btn_cancel.setObjectName("secondaryButton")
        self.btn_cancel.clicked.connect(self.reject)
        self.btn_ok.clicked.connect(self.on_ok)
        self.btn_constraints.clicked.connect(self.open_constraints)
        btn_l.addWidget(self.btn_constraints)
        btn_l.addWidget(self.btn_ok)
        btn_l.addWidget(self.btn_cancel)
        layout.addWidget(btn_row)

    def _label(self, text):
        l = QLabel(text)
        l.setObjectName("fieldLabel")
        return l

    def _setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ db/db_app.log"""
        self.logger = logging.getLogger('AddColumnDialog')
        self.logger.setLevel(logging.INFO)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        if not self.logger.handlers:
            handler = logging.FileHandler('db/db_app.log', encoding='utf-8')
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
    
    def validate_column_name(self, name: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Å—Ç–æ–ª–±—Ü–∞"""
        if not name:
            return False, "–ò–º—è —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        if not re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', name):
            return False, "–ò–º—è —Å—Ç–æ–ª–±—Ü–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã –∏–ª–∏ _"
        
        if len(name) > 63:
            return False, "–ò–º—è —Å—Ç–æ–ª–±—Ü–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 63 —Å–∏–º–≤–æ–ª–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
        reserved_words = {
            'select', 'from', 'where', 'insert', 'update', 'delete', 'create', 'drop',
            'alter', 'table', 'database', 'index', 'view', 'procedure', 'function',
            'trigger', 'constraint', 'primary', 'foreign', 'key', 'unique', 'check',
            'default', 'null', 'not', 'and', 'or', 'in', 'like', 'between', 'is'
        }
        
        if name.lower() in reserved_words:
            return False, f"'{name}' —è–≤–ª—è–µ—Ç—Å—è –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º SQL"
        
        return True, ""
    
    def validate_table_name(self, name: str) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        if not name:
            return False, "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        if name not in (self.db_instance.get_table_names() or []):
            return False, f"–¢–∞–±–ª–∏—Ü–∞ '{name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        
        return True, ""

    def _set_dark_palette(self):
        dark_palette = QPalette()
        dark_palette.setColor(QPalette.Window, QColor(18, 18, 24))
        dark_palette.setColor(QPalette.WindowText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Base, QColor(25, 25, 35))
        dark_palette.setColor(QPalette.AlternateBase, QColor(35, 35, 45))
        dark_palette.setColor(QPalette.Text, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Button, QColor(40, 40, 50))
        dark_palette.setColor(QPalette.ButtonText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Highlight, QColor(64, 255, 218))
        dark_palette.setColor(QPalette.HighlightedText, QColor(18, 18, 24))
        self.setPalette(dark_palette)

    def apply_styles(self):
        self.setStyleSheet("""
            QDialog { background: qlineargradient(x1:0,y1:0,x2:1,y2:1, stop:0 #0a0a0f, stop:1 #1a1a2e); color:#ffffff; }
            #dialogHeader { background: rgba(10,10,15,.7); border:2px solid #64ffda; border-radius:12px; padding:18px; }
            #dialogTitle { font-size:20px; font-weight:bold; color:#64ffda; letter-spacing:2px; }
            #dialogSubtitle { color:#50fa7b; font-size:12px; }
            #settingsGroup { border:2px solid #44475a; border-radius:12px; padding:16px; background:rgba(15,15,25,.6); }
            #settingsGroup::title { left:18px; padding:0 8px; color:#64ffda; font-weight:bold; }
            #fieldLabel { color:#ffffff; font-weight:bold; }
            QLineEdit, QComboBox { background: rgba(15, 15, 25, 0.8); border:2px solid #44475a; border-radius:8px; padding:10px; color:#ffffff; }
            QLineEdit:focus, QComboBox:focus { border:2px solid #64ffda; }
            QComboBox QAbstractItemView { background: rgba(15, 15, 25, 0.95); border:2px solid #64ffda; border-radius:8px; color:#ffffff; selection-background-color: #64ffda; selection-color: #0a0a0f; }
            QComboBox::drop-down { border: none; background: rgba(15, 15, 25, 0.8); }
            QComboBox::down-arrow { border: none; }
            #primaryButton { background: qlineargradient(x1:0,y1:0,x2:1,y2:0, stop:0 #64ffda, stop:1 #00bcd4); border:none; border-radius:10px; color:#0a0a0f; font-weight:bold; padding:12px 24px; }
            #primaryButton:hover { border:2px solid #64ffda; background: qlineargradient(x1:0,y1:0,x2:1,y2:0, stop:0 #50e3c2, stop:1 #00acc1); }
            #secondaryButton { background: qlineargradient(x1:0,y1:0,x2:1,y2:0, stop:0 #ff6b6b, stop:1 #ff5252); border:none; border-radius:10px; color:#0a0a0f; font-weight:bold; padding:12px 20px; }
        """)

    # --- Dynamic type UI ---
    def on_type_changed(self, text: str):
        # clear
        while self.type_extra_layout.rowCount():
            self.type_extra_layout.removeRow(0)
        if text == "ARRAY":
            self.type_extra_layout.addRow(self._label("–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞:"), self.array_item_combo)
            self.type_extra_layout.addRow(self._label("–ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π:"), self.array_values)
        elif text == "ENUM":
            self.type_extra_layout.addRow(self._label("–ó–Ω–∞—á–µ–Ω–∏—è ENUM:"), self.enum_editor)

    def open_constraints(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."""
        dialog = ConstraintsDialog(self.db_instance, self)
        # –ï—Å–ª–∏ —Ä–∞–Ω–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–∏—Ä–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ‚Äî –ø—Ä–∏–º–µ–Ω–∏–º –∏—Ö –∫ —Ñ–æ—Ä–º–µ
        if self.constraints:
            try:
                dialog.pk_check.setChecked(bool(self.constraints.get('primary_key')))
                dialog.ai_check.setChecked(bool(self.constraints.get('autoincrement')))
                dialog.unique_check.setChecked(bool(self.constraints.get('unique')))
                # nullable –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ not_null_check/null_check
                nullable = self.constraints.get('nullable')
                if nullable is not None:
                    dialog.not_null_check.setChecked(not nullable)
                    dialog.null_check.setChecked(bool(nullable))
                dialog.default_edit.setText(str(self.constraints.get('default') or ""))
                dialog.check_edit.setText(str(self.constraints.get('check') or ""))
                fk = self.constraints.get('foreign_key')
                if fk:
                    ref_table, ref_col = fk.split('.', 1)
                    dialog.fk_check.setChecked(True)
                    # –£—Å—Ç–∞–Ω–æ–≤–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã/—Å—Ç–æ–ª–±—Ü–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                    idx = dialog.ref_table.findText(ref_table)
                    if idx >= 0:
                        dialog.ref_table.setCurrentIndex(idx)
                        dialog._fill_ref_columns(ref_table)
                        cidx = dialog.ref_column.findText(ref_col)
                        if cidx >= 0:
                            dialog.ref_column.setCurrentIndex(cidx)
            except Exception:
                pass
        if dialog.exec() == QDialog.Accepted:
            self.constraints = dialog.get_constraints()
        else:
            self.constraints = {}

    # --- Submit ---
    def on_ok(self):
        table_name = self.table_combo.currentText().strip()
        column_name = self.name_edit.text().strip()
        dtype = self.type_combo.currentText()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        is_valid_table, table_error = self.validate_table_name(table_name)
        if not is_valid_table:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", table_error)
            self.logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {table_error}")
            return
        
        is_valid_column, column_error = self.validate_column_name(column_name)
        if not is_valid_column:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", column_error)
            self.logger.warning(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–∞: {column_error}")
            return

        # –¢–∏–ø
        from sqlalchemy import String, Text, Integer, SmallInteger, BigInteger, Numeric, Boolean, Date
        from sqlalchemy import Enum as SQLEnum
        from sqlalchemy import ARRAY as SA_ARRAY

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ò–ù–°–¢–ê–ù–°–´ —Ç–∏–ø–æ–≤, –∏–Ω–∞—á–µ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –æ—à–∏–±–∫–µ TypeEngine.compile()
        base_map = {
            "String(255)": String(255),
            "Text": Text(),
            "Integer": Integer(),
            "SmallInteger": SmallInteger(),
            "BigInteger": BigInteger(),
            "Numeric(10, 2)": Numeric(10, 2),
            "Boolean": Boolean(),
            "Date": Date(),
        }
        
        try:
            if dtype == "ARRAY":
                base = base_map.get(self.array_item_combo.currentText(), String(255))
                column_type = SA_ARRAY(base)
            elif dtype == "ENUM":
                values = self.enum_editor.get_values()
                if not values:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–ª—è ENUM –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ.")
                    self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å ENUM –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏–π")
                    return
                column_type = SQLEnum(*values, name=f"enum_{column_name}")
            else:
                column_type = base_map.get(dtype, String(255))
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–ª–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞)
        kwargs = {}
        if hasattr(self, 'constraints'):
            constraints = self.constraints
            if constraints.get('primary_key'):
                kwargs["primary_key"] = True
            if constraints.get('autoincrement'):
                kwargs["autoincrement"] = True
            if constraints.get('unique'):
                kwargs["unique"] = True
            if constraints.get('nullable') is not None:
                kwargs["nullable"] = constraints['nullable']
            if constraints.get('default'):
                kwargs["default"] = constraints['default']
            if constraints.get('check'):
                kwargs["check"] = constraints['check']
            if constraints.get('foreign_key'):
                kwargs["foreign_key"] = constraints['foreign_key']

        # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–º—É –≤–∏–¥—É
        def is_integer_dtype(t: str) -> bool:
            return t in {"Integer", "SmallInteger", "BigInteger"}

        def table_row_count(tbl: str) -> int:
            try:
                from sqlalchemy import text as _sql_text
                with self.db_instance.engine.connect() as _conn:
                    return _conn.execute(_sql_text(f'SELECT COUNT(*) FROM "{tbl}"')).scalar() or 0
            except Exception:
                return 0

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω PK –∏–ª–∏ AUTOINCREMENT ‚Äì –ø—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø –∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if kwargs.get("primary_key") or kwargs.get("autoincrement"):
            if not is_integer_dtype(dtype):
                rc = table_row_count(table_name)
                if rc > 0:
                    QMessageBox.information(self, "–ò–∑–º–µ–Ω—ë–Ω —Ç–∏–ø",
                                            "–î–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ –≤ –Ω–µ–ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ –≤—ã–±—Ä–∞–Ω —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π —Ç–∏–ø Integer.")
                    self.type_combo.setCurrentText("Integer")
                    dtype = "Integer"
                else:
                    # –ü—É—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ AUTOINCREMENT —Ç–æ–ª—å–∫–æ –¥–ª—è integer
                    if kwargs.get("autoincrement"):
                        self.type_combo.setCurrentText("Integer")
                        dtype = "Integer"
        if kwargs.get("primary_key"):
            # PK –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç NOT NULL –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç UNIQUE
            kwargs["nullable"] = False
            kwargs.pop("unique", None)

        # AUTOINCREMENT: —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∏ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å FK
        if kwargs.get("autoincrement"):
            if not is_integer_dtype(dtype):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "AUTOINCREMENT –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤.")
                self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ AUTOINCREMENT –¥–ª—è –Ω–µ—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞")
                return
            if kwargs.get("foreign_key"):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "AUTOINCREMENT –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º —Å FOREIGN KEY.")
                return

        # –í–∑–∞–∏–º–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞: AUTOINCREMENT –¥–æ–ø—É—Å—Ç–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
        if kwargs.get("autoincrement"):
            if dtype not in {"Integer", "SmallInteger", "BigInteger"}:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "AUTOINCREMENT –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤.")
                self.logger.warning("–ü–æ–ø—ã—Ç–∫–∞ AUTOINCREMENT –¥–ª—è –Ω–µ—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞")
                return

        # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ–ø—É—Å—Ç–∞ –∏ NOT NULL –±–µ–∑ DEFAULT ‚Äî –æ—Å–ª–∞–±–ª—è–µ–º –¥–æ NULL, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NotNullViolation
        try:
            from sqlalchemy import text as _sql_text
            # –û—Å–ª–∞–±–ª—è–µ–º NOT NULL —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ PK-—Å—Ü–µ–Ω–∞—Ä–∏–π ‚Äî –ø—Ä–∏ PK –º—ã –∑–∞–ø–æ–ª–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–∞–º–∏
            if kwargs.get("nullable") is False and not kwargs.get("default") and not kwargs.get("primary_key"):
                with self.db_instance.engine.connect() as _conn:
                    rc = _conn.execute(_sql_text(f'SELECT COUNT(*) FROM "{table_name}"')).scalar() or 0
                if rc > 0:
                    self.logger.warning("–¢–∞–±–ª–∏—Ü–∞ –Ω–µ–ø—É—Å—Ç–∞ ‚Äî NOT NULL –±–µ–∑ DEFAULT –ø–æ–Ω–∏–∂–µ–Ω –¥–æ NULL")
                    QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                                        "–¢–∞–±–ª–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ. NOT NULL –±–µ–∑ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º.\n"
                                        "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å–ª–∞–±–ª–µ–Ω–æ –¥–æ NULL.")
                    kwargs["nullable"] = True
        except Exception:
            pass

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}' —Å —Ç–∏–ø–æ–º '{dtype}'")
        
        try:
            success = self.db_instance.add_column(table_name, column_name, column_type, **kwargs)
            if success:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–æ–ª–±–µ—Ü '{column_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'.")
                self.logger.info(f"–°—Ç–æ–ª–±–µ—Ü '{column_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'")
                self.accept()
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü '{column_name}' –≤ —Ç–∞–±–ª–∏—Ü—É '{table_name}'")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞: {str(e)}")
            self.logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ '{column_name}': {str(e)}")

