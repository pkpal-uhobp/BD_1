from PySide6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QWidget,
    QGroupBox, QFormLayout, QComboBox, QMessageBox
)
from PySide6.QtCore import Qt
from PySide6.QtGui import QPalette, QColor


class DropColumnDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ –∫—Ä–∞—Å–∏–≤—ã–º —Ç—ë–º–Ω—ã–º UI."""

    def __init__(self, db_instance, parent=None):
        super().__init__(parent)
        self.db_instance = db_instance
        self.setWindowTitle("üóë –£–î–ê–õ–ï–ù–ò–ï –°–¢–û–õ–ë–¶–ê")
        self.setModal(True)
        self.setFixedSize(600, 500)
        self._set_dark_palette()

        self._init_ui()
        self._apply_styles()

    def _set_dark_palette(self):
        dark_palette = QPalette()
        dark_palette.setColor(QPalette.Window, QColor(18, 18, 24))
        dark_palette.setColor(QPalette.WindowText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Base, QColor(25, 25, 35))
        dark_palette.setColor(QPalette.AlternateBase, QColor(35, 35, 45))
        dark_palette.setColor(QPalette.Text, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Button, QColor(40, 40, 50))
        dark_palette.setColor(QPalette.ButtonText, QColor(240, 240, 240))
        dark_palette.setColor(QPalette.Highlight, QColor(64, 255, 218))
        dark_palette.setColor(QPalette.HighlightedText, QColor(18, 18, 24))
        self.setPalette(dark_palette)

    def _apply_styles(self):
        self.setStyleSheet("""
            QDialog { background: qlineargradient(x1:0,y1:0,x2:1,y2:1, stop:0 #0a0a0f, stop:1 #1a1a2e); color:#ffffff; }
            #dialogHeader { background: rgba(10,10,15,.7); border:2px solid #64ffda; border-radius:12px; padding:18px; }
            #dialogTitle { font-size:20px; font-weight:bold; color:#64ffda; letter-spacing:2px; }
            #dialogSubtitle { color:#50fa7b; font-size:12px; }
            #settingsGroup { border:2px solid #44475a; border-radius:12px; padding:16px; background:rgba(15,15,25,.6); }
            #settingsGroup::title { left:18px; padding:0 8px; color:#64ffda; font-weight:bold; }
            #fieldLabel { color:#ffffff; font-weight:bold; }
            QLineEdit, QComboBox { background: rgba(15, 15, 25, 0.8); border:2px solid #44475a; border-radius:8px; padding:10px; color:#ffffff; }
            QLineEdit:focus, QComboBox:focus { border:2px solid #64ffda; }
            QComboBox QAbstractItemView { background: rgba(15, 15, 25, 0.95); border: 2px solid #64ffda; border-radius: 8px; color: #f8f8f2; selection-background-color: #64ffda; selection-color: #0a0a0f; outline: none; }
            #warningBox { border:2px solid #ffb86c; border-radius:12px; padding:16px; background: rgba(255, 184, 108, 0.08); }
            #warningTitle { color:#ffb86c; font-weight:bold; }
            #dangerText { color:#ff5555; font-weight:bold; }
            #primaryButton { background: qlineargradient(x1:0,y1:0,x2:1,y2:0, stop:0 #64ffda, stop:1 #00bcd4); border:none; border-radius:10px; color:#0a0a0f; font-weight:bold; padding:12px 24px; }
            #primaryButton:hover { border:2px solid #64ffda; background: qlineargradient(x1:0,y1:0,x2:1,y2:0, stop:0 #50e3c2, stop:1 #00acc1); }
            #secondaryButton { background: qlineargradient(x1:0,y1:0,x2:1,y2:0, stop:0 #ff6b6b, stop:1 #ff5252); border:none; border-radius:10px; color:#0a0a0f; font-weight:bold; padding:12px 20px; }
        """)

    def _init_ui(self):
        root = QVBoxLayout(self)
        root.setContentsMargins(20, 20, 20, 20)
        root.setSpacing(14)

        header = QGroupBox()
        header.setObjectName("dialogHeader")
        header_l = QVBoxLayout(header)
        title = QLabel("–£–î–ê–õ–ï–ù–ò–ï –°–¢–û–õ–ë–¶–ê")
        title.setObjectName("dialogTitle")
        title.setAlignment(Qt.AlignCenter)
        subtitle = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ —Å—Ç–æ–ª–±–µ—Ü.\n–ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ‚Äî CASCADE –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
        subtitle.setObjectName("dialogSubtitle")
        subtitle.setAlignment(Qt.AlignCenter)
        header_l.addWidget(title)
        header_l.addWidget(subtitle)
        root.addWidget(header)

        box_select = QGroupBox("üìã –í–´–ë–û–† –¢–ê–ë–õ–ò–¶–´ –ò –°–¢–û–õ–ë–¶–ê")
        box_select.setObjectName("settingsGroup")
        form = QFormLayout(box_select)
        form.setLabelAlignment(Qt.AlignRight)

        self.table_combo = QComboBox()
        self.table_combo.addItems(self.db_instance.get_table_names() or [])
        self.column_combo = QComboBox()
        self._fill_columns(self.table_combo.currentText())
        self.table_combo.currentTextChanged.connect(self._fill_columns)
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ–¥–µ–Ω–∏—è –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–æ–ª–±—Ü–∞
        self.column_combo.currentTextChanged.connect(self._on_column_changed)
        form.addRow(self._label("–¢–∞–±–ª–∏—Ü–∞:"), self.table_combo)
        form.addRow(self._label("–°—Ç–æ–ª–±–µ—Ü:"), self.column_combo)
        root.addWidget(box_select)

        # –ë–ª–æ–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É–±—Ä–∞–Ω –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ, CASCADE –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

        btn_row = QWidget()
        btn_l = QHBoxLayout(btn_row)
        btn_l.setContentsMargins(0, 0, 0, 0)
        btn_l.addStretch()
        self.btn_ok = QPushButton("üóë –£–î–ê–õ–ò–¢–¨")
        self.btn_ok.setObjectName("primaryButton")
        self.btn_cancel = QPushButton("–û–¢–ú–ï–ù–ê")
        self.btn_cancel.setObjectName("secondaryButton")
        self.btn_cancel.clicked.connect(self.reject)
        self.btn_ok.clicked.connect(self._on_delete)
        btn_l.addWidget(self.btn_ok)
        btn_l.addWidget(self.btn_cancel)
        root.addWidget(btn_row)

    def _label(self, text: str) -> QLabel:
        l = QLabel(text)
        l.setObjectName("fieldLabel")
        return l

    def _fill_columns(self, table_name: str):
        self.column_combo.clear()
        if not table_name:
            return
        self.column_combo.addItems(self.db_instance.get_column_names(table_name) or [])
        # –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –æ–±–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self._on_column_changed(self.column_combo.currentText())

    def _on_column_changed(self, column_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–∏ –∏—Ö –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ—Ç CASCADE."""
        table = self.table_combo.currentText().strip()
        if not table or not column_name:
            return
        deps = self.db_instance.get_column_dependencies(table, column_name) or {}
        total = sum(len(v) for v in deps.values())
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫ —É–±—Ä–∞–Ω ‚Äî –ø–æ–≤–µ–¥–µ–Ω–∏–µ CASCADE –æ—Å—Ç–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –±–µ–∑ –¥–æ–ø. UI

    def _on_delete(self):
        table = self.table_combo.currentText().strip()
        column = self.column_combo.currentText().strip()
        # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å CASCADE –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º
        deps = self.db_instance.get_column_dependencies(table, column) or {}
        total = sum(len(v) for v in deps.values())
        cascade = total > 0

        if not table or not column:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—É –∏ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        message = (
            f"–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü '{column}' –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table}'" +
            (" —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ (CASCADE)" if cascade else "") +
            "?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
        )
        confirm = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            message,
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        if confirm != QMessageBox.Yes:
            return

        try:
            ok = self.db_instance.drop_column_safe(table, column, force=cascade)
            # –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –∑–∞–≤–∏—Å–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã —É–∂–µ –Ω–∞ —ç—Ç–∞–ø–µ –ë–î ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º —Å CASCADE
            if not ok and not cascade:
                ok = self.db_instance.drop_column_safe(table, column, force=True)
            if ok:
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–æ–ª–±–µ—Ü '{column}' —É–¥–∞–ª—ë–Ω –∏–∑ '{table}'.")
                parent = self.parent()
                if parent and hasattr(parent, 'COLUMN_HEADERS_MAP'):
                    headers = getattr(parent, 'COLUMN_HEADERS_MAP')
                    if column in headers:
                        headers.pop(column)
                    if hasattr(parent, 'REVERSE_COLUMN_HEADERS_MAP'):
                        parent.REVERSE_COLUMN_HEADERS_MAP = {v: k for k, v in headers.items()}
                self.accept()
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü. –°–º. –ª–æ–≥–∏.")
        except Exception as e:
            # –ù–∞ —Å–ª—É—á–∞–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥—Ä–∞–π–≤–µ—Ä–∞: –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å CASCADE –æ–¥–∏–Ω —Ä–∞–∑
            if not cascade:
                try:
                    ok_retry = self.db_instance.drop_column_safe(table, column, force=True)
                    if ok_retry:
                        QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–°—Ç–æ–ª–±–µ—Ü '{column}' —É–¥–∞–ª—ë–Ω –∏–∑ '{table}' (CASCADE).")
                        parent = self.parent()
                        if parent and hasattr(parent, 'COLUMN_HEADERS_MAP'):
                            headers = getattr(parent, 'COLUMN_HEADERS_MAP')
                            if column in headers:
                                headers.pop(column)
                            if hasattr(parent, 'REVERSE_COLUMN_HEADERS_MAP'):
                                parent.REVERSE_COLUMN_HEADERS_MAP = {v: k for k, v in headers.items()}
                        self.accept()
                        return
                except Exception:
                    pass
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞: {str(e)}")


