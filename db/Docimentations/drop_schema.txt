Метод drop_schema() класса DB

Назначение:
Удаляет все таблицы схемы базы данных. Выполняет DDL-операции удаления таблиц в обратном порядке зависимостей с учетом каскадных связей.

Параметры:
Метод не принимает параметров.

Возвращаемое значение:
- bool: True - если схема успешно удалена
- bool: False - если произошла ошибка при удалении схемы или нет подключения

Выполняемые действия:

1. Проверка подключения:
   - Вызывает is_connected() для проверки наличия активного соединения
   - Если нет подключения, возвращает False

2. Удаление таблиц:
   - Выполняет self.metadata.drop_all(self.engine) для удаления всех таблиц
   - Учитывает внешние ключи и каскадные зависимости
   - Удаляет таблицы в правильном порядке для избежания конфликтов

3. Логирование:
   - INFO: "Выполнение DDL: DROP TABLES..." (перед удалением)
   - INFO: "Схема успешно удалена" (при успешном удалении)
   - ERROR: "Ошибка удаления схемы: {сообщение ошибки}" (при исключениях)

Примеры вызова:

1. Базовое использование:
   db = DB()
   if db.connect():
       if db.drop_schema():
           print("Схема БД успешно удалена")
       else:
           print("Ошибка удаления схемы")

2. Полный цикл создания и удаления:
   db = DB()
   db.connect()
   # Создаем схему
   db.create_schema()
   # Работаем с данными...
   # Удаляем схему
   db.drop_schema()

3. С обработкой ошибок:
   db = DB()
   try:
       if db.connect():
           if db.drop_schema():
               print("Схема очищена")
           else:
               print("Не удалось удалить схему")
   except Exception as e:
       print(f"Критическая ошибка: {e}")

4. Для тестирования:
   def test_database_operations():
       db = DB()
       db.connect()
       # Очищаем предыдущее состояние
       db.drop_schema()
       # Создаем новую схему
       db.create_schema()
       # Выполняем тесты...
       # Очищаем после тестов
       db.drop_schema()

Побочные эффекты:
- УДАЛЕНИЕ ВСЕХ ДАННЫХ из таблиц БД
- Удаление таблиц и их структуры
- Запись DDL-операций в лог
- Освобождение дискового пространства БД
- Потеря всех ограничений, индексов и связей

Особенности:
- Деструктивная операция - НЕВОЗМОЖНО ВОССТАНОВИТЬ ДАННЫЕ
- Учитывает каскадные зависимости между таблицами
- Потокобезопасный метод
- Поддерживает повторный вызов (если таблиц нет - операция безопасна)
- Использует транзакционный подход при удалении

Логирование DDL операций:
- INFO: "Выполнение DDL: DROP TABLES..."
- INFO: "Схема успешно удалена"
- ERROR: "Ошибка удаления схемы: {сообщение ошибки}"

Ограничения:
- Требует наличия соответствующих привилегий в БД (DROP TABLE)
- Не может удалить таблицы, если нет прав доступа
- Не удаляет другие объекты БД (представления, функции, триггеры)

Предупреждения:
  МЕТОД УДАЛЯЕТ ВСЕ ДАННЫЕ БЕЗ ВОЗМОЖНОСТИ ВОССТАНОВЛЕНИЯ
  ИСПОЛЬЗУЙТЕ ТОЛЬКО ДЛЯ ТЕСТИРОВАНИЯ И РАЗВЕРТЫВАНИЯ
  ОБЯЗАТЕЛЬНО СДЕЛАЙТЕ РЕЗЕРВНУЮ КОПИЮ ПЕРЕД ИСПОЛЬЗОВАНИЕМ

Рекомендации по использованию:
- Используйте только в тестовой среде
- Создавайте резервные копии перед вызовом
- Применяйте при полной очистке БД для тестирования
- Полезен для сброса состояния в unit-тестах
- Можно использовать для подготовки "чистой" БД

Пример использования в тестах:
   def setUp(self):
       self.db = DB()
       self.db.connect()
       self.db.drop_schema()    # Очистка
       self.db.create_schema()  # Создание чистой схемы

   def tearDown(self):
       self.db.drop_schema()    # Очистка после теста
       self.db.disconnect()

Особенности удаления таблиц:
- Таблица "Issued_Books" удаляется первой (из-за внешних ключей)
- Таблицы "Readers" и "Books" удаляются после
- Все данные, ограничения и индексы теряются
- Структура таблиц полностью удаляется из БД