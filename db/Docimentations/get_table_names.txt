Метод get_table_names() класса DB

Назначение:
Возвращает список названий всех таблиц, существующих в текущей базе данных. Использует SQLAlchemy inspector для получения информации о структуре БД.

Параметры:
Метод не принимает параметров.

Возвращаемое значение:
- List[str]: список строк с названиями таблиц (пустой список если нет подключения или ошибка)
- Пример: ['Books', 'Readers', 'Issued_Books']

Выполняемые действия:

1. Проверка подключения:
   - Вызывает is_connected() для проверки наличия активного соединения
   - Если нет подключения, возвращает пустой список

2. Инспекция БД:
   - Создает SQLAlchemy inspector объект
   - Вызывает inspector.get_table_names() для получения списка таблиц

3. Логирование:
   - INFO: "Получение списка таблиц из БД..." (перед выполнением)
   - INFO: "Получено {count} таблиц: {table_list}" (при успешном получении)
   - ERROR: "Ошибка получения списка таблиц: {сообщение ошибки}" (при исключениях)

Примеры вызова:

1. Базовое использование:
   db = DB()
   if db.connect():
       table_names = db.get_table_names()
       print(f"Найдено таблиц: {len(table_names)}")
       for table in table_names:
           print(f"  - {table}")

2. Проверка наличия таблиц:
   db = DB()
   db.connect()
   tables = db.get_table_names()
   if 'Books' in tables:
       print("Таблица Books существует")
   else:
       print("Таблица Books отсутствует")

3. С обработкой ошибок:
   db = DB()
   try:
       if db.connect():
           tables = db.get_table_names()
           if tables:
               print(f"Доступные таблицы: {', '.join(tables)}")
           else:
               print("В базе данных нет таблиц")
       else:
           print("Нет подключения к БД")
   except Exception as e:
       print(f"Ошибка при получении списка таблиц: {e}")

4. Для диагностики состояния БД:
   def diagnose_database(db):
       if not db.is_connected():
           print("Нет подключения к БД")
           return

       tables = db.get_table_names()
       print(f"Статус БД: {len(tables)} таблиц найдено")
       for table in tables:
           print(f"  ✓ {table}")

5. В комбинации с другими методами:
   db = DB()
   db.connect()
   # Проверяем существующие таблицы
   existing_tables = db.get_table_names()
   # Создаем схему если таблиц нет
   if not existing_tables:
       db.create_schema()
   # Показываем финальный список
   final_tables = db.get_table_names()
   print(f"Таблицы в БД: {final_tables}")

Побочные эффекты:
- Выполняет запрос к системным таблицам БД
- Запись операций в лог-файл
- Минимальная нагрузка на БД (только чтение метаданных)
- Не модифицирует данные или структуру БД

Особенности:
- Только чтение - безопасная операция
- Возвращает только пользовательские таблицы (не системные)
- Учитывает текущую схему БД
- Работает с любыми таблицами (не только определенными в metadata)
- Потокобезопасный метод

Логирование операций:
- INFO: "Получение списка таблиц из БД..."
- INFO: "Получено {count} таблиц: {table_list}"
- ERROR: "Ошибка получения списка таблиц: {сообщение ошибки}"

Ограничения:
- Требует прав на чтение системных метаданных
- Может не показать таблицы из других схем (зависит от настроек БД)
- Время выполнения зависит от количества таблиц в БД

Рекомендации по использованию:
- Используйте для диагностики состояния БД
- Применяйте при инициализации для проверки структуры
- Полезен для автоматического определения доступных таблиц
- Можно использовать для валидации перед операциями с таблицами

Примеры возвращаемых значений:
- При полной схеме: ['Books', 'Readers', 'Issued_Books']
- При пустой БД: []
- При частичной схеме: ['Books', 'Readers']
- При ошибках: []

Пример комплексного использования:
   def check_database_integrity(db):
       tables = db.get_table_names()
       expected_tables = ['Books', 'Readers', 'Issued_Books']

       missing = set(expected_tables) - set(tables)
       extra = set(tables) - set(expected_tables)

       if missing:
           print(f"Отсутствующие таблицы: {missing}")
       if extra:
           print(f"Дополнительные таблицы: {extra}")
       if not missing and not extra:
           print("Структура БД соответствует ожиданиям")

       return len(missing) == 0