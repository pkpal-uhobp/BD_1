Метод _check_foreign_key_exists() класса DB

Назначение:
Приватный метод проверки существования записи с указанным значением в указанной таблице и колонке. Используется для валидации внешних ключей перед вставкой или обновлением данных.

Параметры:
- table_name (str): название таблицы, в которой проверяется существование записи
  Примеры: "Books", "Readers"

- column_name (str): название колонки, в которой ищется значение
  Примеры: "id_book", "reader_id"

- value (Any): значение для поиска (может быть int, str или другим типом)
  Примеры: 1, 42, "some_value", None

Возвращаемое значение:
- bool: True - если запись с таким значением существует
- bool: False - если запись не существует, значение None, таблица не найдена или произошла ошибка

Выполняемые действия:

1. Проверка входных параметров:
   - Если value равен None, возвращает False
   - Проверяет существование table_name в self.tables
   - Проверяет существование column_name в указанной таблице

2. Выполнение SELECT-запроса:
   - Создает SELECT запрос с LIMIT 1 для проверки существования
   - Ищет запись где column_name = value
   - Использует engine.connect() для выполнения запроса

3. Обработка результата:
   - Если fetchone() возвращает запись - возвращает True
   - Если fetchone() возвращает None - возвращает False
   - При ошибках возвращает False (без выбрасывания исключений)

Примеры вызова:

1. Проверка существования книги:
   db = DB()
   if db.connect():
       # Проверяем существует ли книга с id=1
       exists = db._check_foreign_key_exists("Books", "id_book", 1)
       if exists:
           print("Книга с id=1 существует")
       else:
           print("Книга с id=1 не найдена")

2. Проверка существования читателя:
   db = DB()
   db.connect()
   # Проверяем существует ли читатель с id=5
   reader_exists = db._check_foreign_key_exists("Readers", "reader_id", 5)
   print(f"Читатель существует: {reader_exists}")

3. С различными типами значений:
   # С целочисленным значением
   db._check_foreign_key_exists("Books", "id_book", 42)

   # С None (всегда возвращает False)
   db._check_foreign_key_exists("Readers", "reader_id", None)  # False

   # С несуществующей таблицей
   db._check_foreign_key_exists("NonExistent", "id", 1)  # False

4. Использование в контексте вставки данных:
   def safe_insert_issued_book(db, book_id, reader_id):
       # Проверяем существование книги
       if not db._check_foreign_key_exists("Books", "id_book", book_id):
           print(f"Книга с id={book_id} не существует")
           return False

       # Проверяем существование читателя
       if not db._check_foreign_key_exists("Readers", "reader_id", reader_id):
           print(f"Читатель с id={reader_id} не существует")
           return False

       # Можно безопасно вставлять запись
       return db.insert_data("Issued_Books", {
           "book_id": book_id,
           "reader_id": reader_id,
           "issue_date": "2023-12-01",
           "expected_return_date": "2023-12-15"
       })

Использование в других методах:
Метод вызывается автоматически из:
- insert_data() - при вставке в таблицу "Issued_Books" для проверки book_id и reader_id
- Может использоваться в update_data() для проверки внешних ключей

Пример интеграции в insert_data:
   if table_name == "Issued_Books":
       book_id = data.get("book_id")
       if not self._check_foreign_key_exists("Books", "id_book", book_id):
           msg = f"Книга с id_book = {book_id} не существует. Сначала добавьте книгу."
           self.logger.error(msg)
           return False

Особенности:
- Приватный метод (начинается с _)
- Не выбрасывает исключения при ошибках (возвращает False)
- Использует LIMIT 1 для оптимизации производительности
- Проверяет только существование записи (не возвращает сами данные)
- Работает с любыми типами значений
- Безопасен для вызова с None значениями

Логирование:
- Метод не производит прямого логирования
- При ошибках подавляет исключения и возвращает False

Производительность:
- Использует LIMIT 1 для минимизации нагрузки на БД
- Проверяет только одну запись, не загружает все данные
- Быстрая операция для таблиц с индексами по проверяемым колонкам

Ограничения:
- Требует прав на чтение из указанной таблицы
- Может быть медленным без индексов на проверяемых колонках
- Не работает с составными внешними ключами (только одиночные колонки)

Рекомендации по использованию:
- Не вызывайте напрямую (используется внутренне)
- Полезен для понимания механизма проверки внешних ключей
- Может использоваться для предварительной валидации перед операциями
- Рекомендуется наличие индексов на внешних ключах для лучшей производительности

Примеры возвращаемых значений:
- db._check_foreign_key_exists("Books", "id_book", 1) → True (если книга существует)
- db._check_foreign_key_exists("Readers", "reader_id", 999) → False (если читатель не найден)
- db._check_foreign_key_exists("Books", "id_book", None) → False (None всегда False)
- db._check_foreign_key_exists("NonExistent", "id", 1) → False (несуществующая таблица)