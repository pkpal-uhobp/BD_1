Метод _build_metadata() класса DB

Назначение:
Приватный метод, который создает и инициализирует метаданные таблиц базы данных. Определяет структуру трех основных таблиц: Books, Readers и Issued_Books с их колонками, ограничениями и связями.

Параметры:
Метод не принимает параметров, работает с атрибутами текущего объекта.

Возвращаемое значение:
Метод не возвращает значения (None), но модифицирует внутренние атрибуты объекта.

Инициализируемые компоненты:

1. ENUM Типы:
   - BookGenre: перечисление жанров книг
     Значения: 'Роман', 'Повесть', 'Рассказ', 'Поэзия', 'Детектив', 'Триллер',
               'Научная фантастика', 'Фэнтези', 'Научная литература', 'Биография',
               'Мемуары', 'История', 'Философия', 'Психология', 'Саморазвитие',
               'Детская литература', 'Приключения', 'Ужасы', 'Классика', 'Эссе',
               'Пьеса', 'Научно-популярное', 'Путешествия'

   - DiscountCategory: категории скидок читателей
     Значения: 'Студент', 'Пенсионер', 'Ветеран', 'Член_клуба', 'Обычный'

   - DamageType: типы повреждений книг
     Значения: 'Нет', 'Царапина', 'Порвана_обложка', 'Потеряна_страница',
               'Запачкана', 'Утеряна'

2. Таблица "Books":
   Колонки:
   - id_book (Integer, PK, autoincrement): уникальный идентификатор книги
   - title (String(255), NOT NULL): название книги
   - authors (ARRAY(String(255)), NOT NULL): массив авторов книги
   - genre (BookGenre, NOT NULL): жанр книги
   - deposit_amount (Numeric(10, 2), NOT NULL): сумма залога
   - daily_rental_rate (Numeric(10, 2), NOT NULL): стоимость аренды в день
     Комментарий: "Base rental cost per day"

   Ограничения:
   - UniqueConstraint("title", "authors", name="uq_books_title_authors")
   - CheckConstraint("deposit_amount >= 0", name="chk_books_deposit_non_negative")
   - CheckConstraint("daily_rental_rate > 0", name="chk_books_daily_rate_positive")
   - CheckConstraint("array_length(authors, 1) > 0", name="chk_books_authors_not_empty")

3. Таблица "Readers":
   Колонки:
   - reader_id (Integer, PK, autoincrement): уникальный идентификатор читателя
   - last_name (String(100), NOT NULL): фамилия
   - first_name (String(100), NOT NULL): имя
   - middle_name (String(100)): отчество
   - address (String): адрес проживания
   - phone (String(20)): номер телефона
   - discount_category (DiscountCategory, default='Regular'): категория скидки
   - discount_percent (Integer, default=0): процент скидки

   Ограничения:
   - UniqueConstraint("last_name", "first_name", "middle_name", "phone", name="uq_readers_full_info")
   - CheckConstraint("discount_percent BETWEEN 0 AND 100", name="chk_readers_discount_valid")

4. Таблица "Issued_Books":
   Колонки:
   - issue_id (Integer, PK, autoincrement): уникальный идентификатор выдачи
   - book_id (Integer, FK to Books.id_book, CASCADE): ссылка на книгу
   - reader_id (Integer, FK to Readers.reader_id, CASCADE): ссылка на читателя
   - issue_date (Date, NOT NULL): дата выдачи
   - expected_return_date (Date, NOT NULL): ожидаемая дата возврата
   - actual_return_date (Date): фактическая дата возврата
   - damage_type (DamageType, default='None'): тип повреждения
   - damage_fine (Numeric(10, 2), default=0): штраф за повреждение
   - final_rental_cost (Numeric(10, 2)): итоговая стоимость аренды
   - paid (Boolean, default=False): флаг оплаты
   - actual_rental_days (Integer): фактическое количество дней аренды

   Ограничения:
   - CheckConstraint("damage_fine >= 0", name="chk_issued_damage_fine_non_negative")
   - CheckConstraint("actual_rental_days >= 0", name="chk_issued_duration_non_negative")
   - CheckConstraint("(actual_return_date IS NULL) OR (actual_return_date >= issue_date)", name="chk_issued_return_date_valid")
   - CheckConstraint("expected_return_date >= issue_date", name="chk_issued_expected_date_valid")
   - CheckConstraint("(actual_return_date IS NULL AND final_rental_cost IS NULL AND actual_rental_days IS NULL) OR (actual_return_date IS NOT NULL AND final_rental_cost IS NOT NULL AND actual_rental_days IS NOT NULL)", name="chk_issued_consistency_on_return")
   - UniqueConstraint("book_id", "reader_id", "actual_return_date", name="uq_issued_book_reader_active")

Модифицируемые атрибуты:
- self.metadata: MetaData объект SQLAlchemy
- self.tables: словарь с ключами "Books", "Readers", "Issued_Books" и значениями Table объектов

Примеры использования:
Метод вызывается автоматически из метода connect() после успешного подключения к БД.

Побочные эффекты:
- Создаются объекты SQLAlchemy Table
- Определяются все ограничения и связи между таблицами
- Инициализируются ENUM типы данных
- Привязываются метаданные к engine (если он существует)

Логирование:
Метод не производит прямого логирования, но его результаты используются другими методами, которые логируют операции.