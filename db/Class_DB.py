from sqlalchemy.engine import Engine
from sqlalchemy import create_engine, MetaData, inspect, UniqueConstraint, CheckConstraint, Boolean, Enum, ARRAY
from sqlalchemy import Table, Column, Integer, String, Numeric, Date, ForeignKey, text
import logging
from datetime import date
from typing import Optional, Dict, Any, List, Tuple
from sqlalchemy import func, select, asc, desc, text
from sqlalchemy import DDL
from sqlalchemy.exc import SQLAlchemyError


class DB:
    def __init__(self,
                 host: str = "localhost",
                 port: int = 5432,
                 dbname: str = "library_db",
                 user: str = "postgres",
                 password: str = "root",
                 sslmode: str = "prefer",
                 connect_timeout: int = 5,
                 log_file: str = "db_app.log"):
        self.host = host
        self.port = port
        self.dbname = dbname
        self.user = user
        self.password = password
        self.sslmode = sslmode
        self.connect_timeout = connect_timeout
        self.engine: Optional[Engine] = None
        self.metadata: Optional[MetaData] = None
        self.tables: Dict[str, Table] = {}
        self.logger = logging.getLogger(f"DB")
        self.logger.setLevel(logging.INFO)
        # –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setLevel(logging.INFO)
        # –§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞, —É—Ä–æ–≤–µ–Ω—å, —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
        file_handler.setFormatter(formatter)
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç—Å—è)
        self.logger.handlers.clear()
        self.logger.addHandler(file_handler)
        # –¢–∞–∫–∂–µ –ª–æ–≥–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_handler.setFormatter(formatter)
        self.logger.addHandler(console_handler)
        self.logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DB –¥–ª—è {dbname} –Ω–∞ {host}:{port}")

    def format_db_error(self, error: Exception) -> str:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ—à–∏–±–∫–∏ –ë–î –≤ —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        error_msg = str(error)
        if "could not connect to server" in error_msg:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ë–î. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ö–æ—Å—Ç, –ø–æ—Ä—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞."
        if "password authentication failed" in error_msg:
            return "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        if "database" in error_msg and "does not exist" in error_msg:
            return "–£–∫–∞–∑–∞–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ë–î."
        if "timeout" in error_msg.lower():
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞."
        if "Connection refused" in error_msg:
            return "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL."
        # –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error_msg[:200]}..."

    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ."""
        self.logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
        try:
            url = (
                f"postgresql+psycopg2://{self.user}:{self.password}"
                f"@{self.host}:{self.port}/{self.dbname}"
                f"?sslmode={self.sslmode}&connect_timeout={self.connect_timeout}"
            )

            self.engine = create_engine(url, future=True, pool_pre_ping=True)
            with self.engine.connect() as conn:
                conn.execute(text("SELECT 1"))

            self.logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {self.dbname}@{self.host}:{self.port}")
            self._build_metadata()
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {self.format_db_error(e)}")
            self.engine = None
            return False

    def _build_metadata(self):
        BookGenre = Enum('–†–æ–º–∞–Ω', '–ü–æ–≤–µ—Å—Ç—å', '–†–∞—Å—Å–∫–∞–∑', '–ü–æ—ç–∑–∏—è', '–î–µ—Ç–µ–∫—Ç–∏–≤',
                         '–¢—Ä–∏–ª–ª–µ—Ä', '–ù–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–§—ç–Ω—Ç–µ–∑–∏', '–ù–∞—É—á–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è', '–ú–µ–º—É–∞—Ä—ã',
                         '–ò—Å—Ç–æ—Ä–∏—è', '–§–∏–ª–æ—Å–æ—Ñ–∏—è', '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è', '–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '–î–µ—Ç—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
                         '–£–∂–∞—Å—ã', '–ö–ª–∞—Å—Å–∏–∫–∞', '–≠—Å—Å–µ', '–ü—å–µ—Å–∞', '–ù–∞—É—á–Ω–æ-–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
                         name='book_genre'
                         )
        DiscountCategory = Enum('–°—Ç—É–¥–µ–Ω—Ç', '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä', '–í–µ—Ç–µ—Ä–∞–Ω', '–ß–ª–µ–Ω_–∫–ª—É–±–∞', '–û–±—ã—á–Ω—ã–π',
                                name='discount_category'
                                )
        DamageType = Enum('–ù–µ—Ç', '–¶–∞—Ä–∞–ø–∏–Ω–∞', '–ü–æ—Ä–≤–∞–Ω–∞_–æ–±–ª–æ–∂–∫–∞', '–ü–æ—Ç–µ—Ä—è–Ω–∞_—Å—Ç—Ä–∞–Ω–∏—Ü–∞', '–ó–∞–ø–∞—á–∫–∞–Ω–∞', '–£—Ç–µ—Ä—è–Ω–∞',
                          name='damage_type'
                          )
        self.metadata = MetaData()
        self.tables["Books"] = Table(
            "Books", self.metadata,
            Column("id_book", Integer, primary_key=True, autoincrement=True),
            Column("title", String(255), nullable=False),
            Column("authors", ARRAY(String(255)), nullable=False),
            Column("genre", BookGenre, nullable=False),
            Column("deposit_amount", Numeric(10, 2), nullable=False),
            Column("daily_rental_rate", Numeric(10, 2), nullable=False, comment="Base rental cost per day"),
            UniqueConstraint("title", "authors", name="uq_books_title_authors"),
            CheckConstraint("deposit_amount >= 0", name="chk_books_deposit_non_negative"),
            CheckConstraint("daily_rental_rate > 0", name="chk_books_daily_rate_positive"),
            CheckConstraint("array_length(authors, 1) > 0", name="chk_books_authors_not_empty"),
        )
        self.tables["Readers"] = Table(
            "Readers", self.metadata,
            Column("reader_id", Integer, primary_key=True, autoincrement=True),
            Column("last_name", String(100), nullable=False),
            Column("first_name", String(100), nullable=False),
            Column("middle_name", String(100)),
            Column("address", String, nullable=False),
            Column("phone", String(20), nullable=False),
            Column("discount_category", DiscountCategory, default='Regular'),
            Column("discount_percent", Integer, default=0),
            UniqueConstraint("last_name", "first_name", "middle_name", "phone", name="uq_readers_full_info"),
            CheckConstraint("discount_percent BETWEEN 0 AND 100", name="chk_readers_discount_valid"),
        )
        self.tables["Issued_Books"] = Table(
            "Issued_Books", self.metadata,
            Column("recording_id", Integer, primary_key=True, autoincrement=True),
            Column("book_id", Integer, ForeignKey("Books.id_book", ondelete="CASCADE"), nullable=False),
            Column("reader_id", Integer, ForeignKey("Readers.reader_id", ondelete="CASCADE"), nullable=False),
            Column("issue_date", Date, nullable=False),
            Column("expected_return_date", Date, nullable=False),
            Column("actual_return_date", Date),
            Column("damage_type", DamageType, default='–ù–µ—Ç', nullable=False),
            Column("damage_fine", Numeric(10, 2), default=0, nullable=False),
            Column("final_rental_cost", Numeric(10, 2)),
            Column("paid", Boolean, default=False, nullable=False),
            Column("actual_rental_days", Integer),
            CheckConstraint("damage_fine >= 0", name="chk_issued_damage_fine_non_negative"),
            CheckConstraint("actual_rental_days >= 0", name="chk_issued_duration_non_negative"),
            CheckConstraint(
                "(actual_return_date IS NULL) OR (actual_return_date >= issue_date)",
                name="chk_issued_return_date_valid"
            ),
            CheckConstraint("expected_return_date >= issue_date", name="chk_issued_expected_date_valid"),
            CheckConstraint(
                "(actual_return_date IS NULL AND final_rental_cost IS NULL AND actual_rental_days IS NULL) "
                "OR (actual_return_date IS NOT NULL AND final_rental_cost IS NOT NULL AND actual_rental_days IS NOT NULL)",
                name="chk_issued_consistency_on_return"
            ),
            UniqueConstraint("book_id", "reader_id", "actual_return_date", name="uq_issued_book_reader_active"),
        )
        if self.engine:
            self.metadata.bind = self.engine

    def disconnect(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∏ –æ—á–∏—â–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ."""
        if not self.engine:
            self.logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ –Ω–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
            return

        try:
            self.engine.dispose()
            self.engine = None
            self.metadata = None
            self.tables.clear()
            self.logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")

    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î (–ª–æ–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ)."""
        if self.engine is None:
            self.logger.warning("‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ.")
            return False
        return True

    def create_schema(self) -> bool:
        """–°–æ–∑–¥–∞—ë—Ç —Å—Ö–µ–º—É –ë–î, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        if not self.is_connected():
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ö–µ–º—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return False

        try:
            inspector = inspect(self.engine)
            existing = set(inspector.get_table_names())
            expected = set(self.tables)

            if expected.issubset(existing):
                self.logger.info("–°—Ö–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return True

            self.logger.info("üõ† –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å—Ö–µ–º—ã...")
            self.metadata.create_all(self.engine)

            missing = set(self.tables) - set(inspect(self.engine).get_table_names())
            if missing:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing)}")
                return False

            self.logger.info("‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ö–µ–º—ã: {self.format_db_error(e)}")
            return False

    def drop_schema(self) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ö–µ–º—ã –ë–î."""
        if not self.is_connected():
            self.logger.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.")
            return False

        try:
            self.logger.info("üóë –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü —Å—Ö–µ–º—ã...")
            self.metadata.drop_all(self.engine)
            self.logger.info("‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
            return True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã: {self.format_db_error(e)}")
            return False

    def get_table_names(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –≤ –ë–î."""
        if not self.is_connected():
            return []
        try:
            tables = inspect(self.engine).get_table_names()
            self.logger.info(f"üìã –¢–∞–±–ª–∏—Ü—ã –≤ –ë–î ({len(tables)}): {tables}")
            return tables
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {self.format_db_error(e)}")
            return []

    def get_column_names(self, table_name: str) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        if not self.is_connected():
            return []

        try:
            insp = inspect(self.engine)
            if table_name not in insp.get_table_names():
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î.")
                return []

            columns = [col['name'] for col in insp.get_columns(table_name)]
            self.logger.info(f"üìÑ –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}' ({len(columns)}): {columns}")
            return columns

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ '{table_name}': {self.format_db_error(e)}")
            return []

    def get_table_data(self, table_name: str) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π."""
        if not self.is_connected():
            return []

        if table_name not in self.tables:
            self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.")
            return []

        try:
            self.logger.info(f"üìä SELECT * FROM \"{table_name}\"")
            table = self.tables[table_name]
            with self.engine.connect() as conn:
                result = conn.execute(table.select())
                rows = [dict(row._mapping) for row in result]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ—Ä–æ–≤) –≤ —Å—Ç—Ä–æ–∫—É
            for row in rows:
                for key, value in row.items():
                    if isinstance(value, list):
                        row[key] = ', '.join(value)

            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ '{table_name}'.")
            return rows

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {self.format_db_error(e)}")
            return []

    def _validate_data(self, table_name: str, data: Dict[str, Any]) -> List[str]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø—ã, NOT NULL, ENUM –∏ CHECK-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö SQLAlchemy.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ (–ø—É—Å—Ç–æ–π = –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ).
        """
        if table_name not in self.tables:
            return [f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."]

        table = self.tables[table_name]
        errors = []

        for column in table.columns:
            col_name = column.name
            value = data.get(col_name)
            is_nullable = column.nullable

            # --- 1Ô∏è‚É£ –ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç PK: –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
            if column.primary_key and column.autoincrement and value is None:
                continue

            # --- 2Ô∏è‚É£ NOT NULL + –±–µ–∑ default ‚Üí –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if not is_nullable and value is None and column.default is None:
                errors.append(f"–ü–æ–ª–µ '{col_name}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (NOT NULL), –Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
                continue

            # --- 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
            py_type = {
                String: str,
                Enum: str,
                Integer: int,
                Numeric: (int, float),
                Date: (str, date),
                Boolean: bool,
                ARRAY: list
            }.get(type(column.type))

            if value is not None and py_type and not isinstance(value, py_type):
                errors.append(
                    f"–ü–æ–ª–µ '{col_name}' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –û–∂–∏–¥–∞–ª—Å—è {py_type}, –ø–æ–ª—É—á–µ–Ω {type(value)}."
                )

            # --- 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞)
            if isinstance(column.type, Date) and isinstance(value, str):
                from datetime import datetime
                try:
                    datetime.strptime(value, "%Y-%m-%d")
                except ValueError:
                    errors.append(f"–ü–æ–ª–µ '{col_name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD', –ø–æ–ª—É—á–µ–Ω–æ '{value}'.")

            # --- 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ ENUM
            if isinstance(column.type, Enum) and value is not None:
                if value not in column.type.enums:
                    errors.append(
                        f"–ü–æ–ª–µ '{col_name}' –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{value}'. "
                        f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ: {list(column.type.enums)}."
                    )

        # --- 6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ CHECK-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ!)
        for constraint in table.constraints:
            if isinstance(constraint, CheckConstraint) and constraint.sqltext is not None:
                expr = str(constraint.sqltext)
                try:
                    # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    expr_eval = expr
                    for k, v in data.items():
                        val = f"'{v}'" if isinstance(v, str) else v
                        expr_eval = expr_eval.replace(k, str(val))
                    if not eval(expr_eval):
                        errors.append(f"–ù–∞—Ä—É—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ CHECK: {expr}")
                except Exception:
                    # –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    pass

        return errors

    def _check_foreign_key_exists(self, table_name: str, column_name: str, value: Any) -> bool:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤–æ –≤–Ω–µ—à–Ω–µ–π —Ç–∞–±–ª–∏—Ü–µ."""
        if not value or table_name not in self.tables:
            return False

        table = self.tables[table_name]
        column = getattr(table.c, column_name, None)
        if column is None or not self.is_connected():
            return False

        try:
            with self.engine.connect() as conn:
                return conn.execute(table.select().where(column == value).limit(1)).first() is not None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ {table_name}.{column_name}: {e}")
            return False

    def insert_data(self, table_name: str, data: Dict[str, Any]) -> tuple[bool, Optional[str]]:
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —É—á—ë—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, –æ—à–∏–±–∫–∞)."""
        if not self.is_connected():
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        # --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
        errors = self._validate_data(table_name, data)
        if errors:
            for e in errors:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False, "; ".join(errors)

        try:
            table = self.tables[table_name]
            pk_col = self._get_primary_key_column(table_name)
            free_id = self._find_min_free_id(table_name)
            if free_id is None:
                msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π ID."
                self.logger.error(msg)
                return False, msg

            # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
            values = data.copy()
            values[pk_col] = free_id

            # –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–µ –ø–æ–ª—è
            insert_data = {
                col.name: values.get(col.name, col.default.arg if col.default is not None else None)
                for col in table.columns if not (col.primary_key and col.autoincrement)
            }

            self.logger.info(f"üü¢ INSERT INTO {table_name} (ID={free_id}) ...")

            # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ ---
            with self.engine.begin() as conn:
                conn.execute(table.insert().values(**insert_data))

            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID={free_id}.")
            return True, None

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ '{table_name}': {self.format_db_error(e)}"
            self.logger.error(f"‚ùå {error_msg}")
            return False, error_msg

    def _find_min_free_id(self, table_name: str) -> int:
        """–ù–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π ID –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ (–∏–ª–∏ 1, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞)."""
        if not self.is_connected():
            return 1

        try:
            pk = self._get_primary_key_column(table_name)
            with self.engine.connect() as conn:
                max_id = conn.execute(text(f'SELECT COALESCE(MAX("{pk}"), 0) FROM "{table_name}"')).scalar()
                result = conn.execute(text(f"""
                    SELECT MIN(id)
                    FROM generate_series(1, {max_id + 1}) AS g(id)
                    WHERE id NOT IN (SELECT "{pk}" FROM "{table_name}")
                """))
                return result.scalar() or max_id + 1

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ ID: {self.format_db_error(e)}")
            # fallback ‚Äî –±–µ—Ä—ë–º MAX+1
            try:
                with self.engine.connect() as conn:
                    max_id = conn.execute(text(f'SELECT COALESCE(MAX("{pk}"), 0) FROM "{table_name}"')).scalar()
                    return max_id + 1
            except Exception:
                return 1

    def _get_primary_key_column(self, table_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ —Ç–∞–±–ª–∏—Ü—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ, –±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö –ø—Ä–∏–≤—è–∑–æ–∫)."""
        if table_name not in self.tables:
            self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.")
            return "id"

        table = self.tables[table_name]
        pk_cols = [col.name for col in table.primary_key.columns]
        if pk_cols:
            return pk_cols[0]

        # –ï—Å–ª–∏ PK –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –ø–æ –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç—ã–º –∏–º–µ–Ω–∞–º
        for name in ("id", f"{table_name.lower()}_id", "pk"):
            if name in table.columns:
                return name

        self.logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}'. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ 'id'.")
        return "id"

    def record_exists(self, table_name: str, condition: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∞—è —É—Å–ª–æ–≤–∏—é."""
        if not self.is_connected() or table_name not in self.tables:
            return False

        table = self.tables[table_name]
        try:
            valid_conds = []
            for k, v in condition.items():
                col = getattr(table.c, k, None)
                if col is not None:
                    valid_conds.append(col == v)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{k}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")

            if not valid_conds:
                self.logger.error(f"‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ '{table_name}'.")
                return False

            stmt = table.select().where(*valid_conds).limit(1)
            self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ '{table_name}' –ø–æ —É—Å–ª–æ–≤–∏—é {condition}")

            with self.engine.connect() as conn:
                exists = conn.execute(stmt).first() is not None

            self.logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {'–Ω–∞–π–¥–µ–Ω–∞' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'} –≤ '{table_name}'.")
            return exists

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ '{table_name}': {self.format_db_error(e)}")
            return False

    def delete_data(self, table_name: str, condition: Dict[str, Any]) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é."""
        if not self.is_connected() or table_name not in self.tables:
            return False

        table = self.tables[table_name]
        try:
            where_clauses = []
            for k, v in condition.items():
                col = getattr(table.c, k, None)
                if col is not None:
                    where_clauses.append(col == v)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{k}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")

            if not where_clauses:
                self.logger.error(f"‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ '{table_name}'.")
                return False

            stmt = table.delete().where(*where_clauses)
            self.logger.info(f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ '{table_name}' –ø–æ —É—Å–ª–æ–≤–∏—é {condition}")

            with self.engine.begin() as conn:
                result = conn.execute(stmt)
                count = result.rowcount or 0

            self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ '{table_name}': {self.format_db_error(e)}")
            return False

    def update_data(self, table_name: str, condition: Dict[str, Any], new_values: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é."""
        if not self.is_connected() or table_name not in self.tables or not new_values:
            return False

        table = self.tables[table_name]
        try:
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
            valid_values = {}
            for col, val in new_values.items():
                if hasattr(table.c, col):
                    valid_values[col] = val
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{col}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")

            if not valid_values:
                self.logger.error(f"‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ '{table_name}'.")
                return False

            # --- –§–æ—Ä–º–∏—Ä—É–µ–º WHERE ---
            where_clauses = []
            for k, v in condition.items():
                col = getattr(table.c, k, None)
                if col is not None:
                    where_clauses.append(col == v)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{k}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —É—Å–ª–æ–≤–∏–∏ WHERE —Ç–∞–±–ª–∏—Ü—ã '{table_name}'.")

            if not where_clauses:
                self.logger.error(f"‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π WHERE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ '{table_name}'.")
                return False

            # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
            stmt = table.update().where(*where_clauses).values(**valid_values)
            self.logger.info(f"üìù UPDATE '{table_name}' SET {list(valid_values.keys())} WHERE {condition}")

            with self.engine.begin() as conn:
                result = conn.execute(stmt)
                count = result.rowcount or 0

            self.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è '{table_name}': {self.format_db_error(e)}")
            return False

    from sqlalchemy import func, select, asc, desc, text

    def get_sorted_data(
            self,
            table_name: str,
            sort_columns: List[tuple],
            condition: Dict[str, Any] = None,
            aggregate_functions: Dict[str, str] = None,
            group_by: List[str] = None
    ) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏ –∞–≥—Ä–µ–≥–∞—Ç–∞–º–∏."""
        if not self.is_connected() or table_name not in self.tables:
            return []

        table = self.tables[table_name]
        try:
            # --- SELECT ---
            if aggregate_functions:
                select_fields = []
                for alias, func_expr in aggregate_functions.items():
                    # –ü—Ä–∏–º–µ—Ä: aggregate_functions = {"total_books": "COUNT(id_book)"}
                    select_fields.append(text(f"{func_expr} AS {alias}"))
                stmt = select(*select_fields)
            else:
                stmt = select(table)

            # --- WHERE ---
            if condition:
                for col, val in condition.items():
                    if hasattr(table.c, col):
                        stmt = stmt.where(getattr(table.c, col) == val)
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ '{table_name}'")

            # --- GROUP BY ---
            if group_by:
                group_cols = [getattr(table.c, col) for col in group_by if hasattr(table.c, col)]
                if group_cols:
                    stmt = stmt.group_by(*group_cols)

            # --- ORDER BY ---
            if sort_columns:
                order_clauses = []
                for col, ascending in sort_columns:
                    if hasattr(table.c, col):
                        order_clauses.append(asc(getattr(table.c, col)) if ascending else desc(getattr(table.c, col)))
                if order_clauses:
                    stmt = stmt.order_by(*order_clauses)

            self.logger.info(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è '{table_name}'")
            with self.engine.connect() as conn:
                result = conn.execute(stmt)
                rows = [dict(row._mapping) for row in result]
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ '{table_name}'")
            return rows

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ '{table_name}': {self.format_db_error(e)}")
            return []

    def execute_query(self, query: str, params: Dict[str, Any] = None, fetch: str = None) -> Any:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        if not self.is_connected():
            return None

        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
            short_query = (query.strip()[:100] + "...") if len(query.strip()) > 100 else query.strip()
            self.logger.info(f"üß† SQL: {short_query}")
            if params:
                self.logger.debug(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")

            with self.engine.connect() as conn:
                result = conn.execute(text(query), params or {})

                if fetch in ("dict", "all"):
                    rows = [dict(row._mapping) for row in result]
                    self.logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ (fetch='{fetch}')")
                    return rows

                elif fetch == "one":
                    row = result.fetchone()
                    self.logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω–∞ {'1 —Å—Ç—Ä–æ–∫–∞' if row else '0 —Å—Ç—Ä–æ–∫'} (fetch='one')")
                    return dict(row._mapping) if row else None

                elif fetch is None:
                    count = result.rowcount or 0
                    self.logger.info(f"üìù DML: –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ {count} —Å—Ç—Ä–æ–∫")
                    return count

                else:
                    data = result.fetchall()
                    self.logger.info(f"‚öôÔ∏è fetch='{fetch}', –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                    return data

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ SQL: {self.format_db_error(e)}")
            return None

    def get_foreign_keys(self, table_name: str) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
        if not self.is_connected():
            return []

        try:
            insp = inspect(self.engine)
            if table_name not in insp.get_table_names():
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                return []

            fks = insp.get_foreign_keys(table_name)
            self.logger.info(f"üîó –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ '{table_name}': {len(fks)} –Ω–∞–π–¥–µ–Ω–æ")
            return fks

        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π '{table_name}': {self.format_db_error(e)}")
            return []


    def get_joined_summary(
            self,
            left_table: str,
            right_table: str,
            join_on: tuple,
            columns: List[str] = None,
            condition: Dict[str, Any] = None,
            sort_columns: List[tuple] = None,
            join_type: str = "INNER"
    ) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ JOIN (INNER, LEFT, RIGHT, FULL, CROSS)."""
        if not self.is_connected():
            return []

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            if left_table not in self.tables or right_table not in self.tables:
                self.logger.error(f"‚ùå –û–¥–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {left_table}, {right_table}")
                return []

            left, right = self.tables[left_table], self.tables[right_table]

            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
            if columns:
                selected_cols = []
                for col_str in columns:
                    if '.' in col_str:
                        prefix, column_name = col_str.split('.', 1)
                        if prefix == 't1' and hasattr(left.c, column_name):
                            selected_cols.append(getattr(left.c, column_name))
                        elif prefix == 't2' and hasattr(right.c, column_name):
                            selected_cols.append(getattr(right.c, column_name))
                        else:
                            self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è SELECT: {col_str}")
                            return []  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ —Å—Ç–æ–ª–±–µ—Ü –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π
                    else: # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–µ—Ç (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                        if hasattr(left.c, col_str):
                            selected_cols.append(getattr(left.c, col_str))
                        elif hasattr(right.c, col_str):
                            selected_cols.append(getattr(right.c, col_str))
                        else:
                            self.logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{col_str}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ —Ç–∞–±–ª–∏—Ü.")
                            return []
            else:
                selected_cols = list(left.c) + list(right.c)

            stmt = select(*selected_cols)

            # JOIN
            if join_type.upper() == "CROSS":
                stmt = stmt.select_from(left.join(right, isouter=False, full=False))
            else:
                join_map = {
                    "INNER": left.join,
                    "LEFT": left.join,
                    "RIGHT": lambda r, onclause: right.join(left, onclause, isouter=True),
                    "FULL": lambda r, onclause: left.join(r, onclause, full=True)
                }
                join_func = join_map.get(join_type.upper(), left.join)

                on_clause = getattr(left.c, join_on[0]) == getattr(right.c, join_on[1])
                stmt = stmt.select_from(join_func(right, on_clause))

            # WHERE
            if condition:
                for col, val in condition.items():
                    if hasattr(left.c, col):
                        stmt = stmt.where(getattr(left.c, col) == val)
                    elif hasattr(right.c, col):
                        stmt = stmt.where(getattr(right.c, col) == val)
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ '{left_table}' –∏–ª–∏ '{right_table}'")

            # ORDER BY (—ç—Ç–∞ —á–∞—Å—Ç—å —É–∂–µ –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ)
            if sort_columns:
                order_exprs = []
                for col, asc_order in sort_columns:
                    for t in (left, right):
                        if hasattr(t.c, col):
                            order_exprs.append(asc(getattr(t.c, col)) if asc_order else desc(getattr(t.c, col)))
                            break
                if order_exprs:
                    stmt = stmt.order_by(*order_exprs)

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            with self.engine.connect() as conn:
                result = conn.execute(stmt)
                rows = [dict(row._mapping) for row in result]

            self.logger.info(f"‚úÖ JOIN '{join_type}' –º–µ–∂–¥—É '{left_table}' –∏ '{right_table}' ‚Äî {len(rows)} —Å—Ç—Ä–æ–∫")
            return rows

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ JOIN-–∑–∞–ø—Ä–æ—Å–∞ ({join_type}): {self.format_db_error(e)}")
            return []

    def record_exists_ex_table(self, table_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Ç–æ–ª—å–∫–æ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)."""
        if not self.is_connected():
            return False
        try:
            insp = inspect(self.engine)
            exists = table_name in insp.get_table_names()
            self.logger.info(f"üîç –¢–∞–±–ª–∏—Ü–∞ '{table_name}' {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'} –≤ –ë–î")
            return exists
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {self.format_db_error(e)}")
            return False

    def count_records_filtered(self, table_name: str, condition: Dict[str, Any] = None) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ (WHERE)."""
        if not self.is_connected() or table_name not in self.tables:
            return 0

        try:
            table = self.tables[table_name]
            stmt = select(func.count()).select_from(table)

            # WHERE-—É—Å–ª–æ–≤–∏—è
            if condition:
                for col, val in condition.items():
                    if hasattr(table.c, col):
                        stmt = stmt.where(getattr(table.c, col) == val)
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{col}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            with self.engine.connect() as conn:
                count = conn.execute(stmt).scalar_one()

            self.logger.info(f"üßÆ –ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ '{table_name}' —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: {condition or '{}'}")
            return count

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –∑–∞–ø–∏—Å–µ–π '{table_name}': {self.format_db_error(e)}")
            return 0

    def _refresh_metadata(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ë–î (ALTER, DROP, CREATE)."""
        if not self.is_connected():
            self.logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î.")
            return

        try:
            md = MetaData()
            md.reflect(bind=self.engine)
            self.metadata = md
            self.tables = dict(md.tables)
            self.logger.info(f"üîÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(self.tables)} —Ç–∞–±–ª–∏—Ü –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {self.format_db_error(e)}")

    def add_column(self, table_name: str, column_name: str, column_type, **kwargs) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü—É (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π DEFAULT, CHECK, UNIQUE –∏ NULL)."""
        if not self.is_connected():
            return False

        try:
            self.logger.info(f"üß© ALTER TABLE '{table_name}': –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ '{column_name}'")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                return False

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-—á–∞—Å—Ç–∏
            type_str = column_type.compile(dialect=self.engine.dialect)
            nullable = "NULL" if kwargs.get("nullable", True) else "NOT NULL"

            default_val = kwargs.get("default")
            if default_val is not None:
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
                default = f"DEFAULT '{default_val}'" if isinstance(default_val, str) else f"DEFAULT {default_val}"
            else:
                default = ""

            check = f"CHECK ({kwargs['check']})" if "check" in kwargs else ""
            unique = "UNIQUE" if kwargs.get("unique", False) else ""

            # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É SQL
            parts = [type_str, nullable, default, check, unique]
            column_def = " ".join(p for p in parts if p)
            sql = f'ALTER TABLE "{table_name}" ADD COLUMN "{column_name}" {column_def};'
            self.logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL: {sql}")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            with self.engine.begin() as conn:
                conn.execute(text(sql))

            self._refresh_metadata()
            self.logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '{table_name}'")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ '{column_name}': {self.format_db_error(e)}")
            return False

    def drop_column_safe(self, table_name: str, column_name: str, force: bool = False) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
        force=True ‚Äî —É–¥–∞–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –≤–º–µ—Å—Ç–µ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ (CASCADE).
        """
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False

        try:
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ---
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î.")
                return False

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ ---
            columns = self.get_column_names(table_name)
            actual_col = next((c for c in columns if c.lower() == column_name.lower()), None)
            if not actual_col:
                self.logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")
                return False

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
            dependencies = self.get_column_dependencies(table_name, actual_col)
            if not force:
                if dependencies.get("foreign_keys"):
                    self.logger.error(
                        f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{actual_col}' —É—á–∞—Å—Ç–≤—É–µ—Ç –≤–æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö: {dependencies['foreign_keys']}")
                    return False
                if dependencies.get("constraints"):
                    self.logger.warning(
                        f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{actual_col}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö: {dependencies['constraints']}")
                if dependencies.get("indexes"):
                    self.logger.warning(f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{actual_col}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö: {dependencies['indexes']}")

            # --- –£–¥–∞–ª–µ–Ω–∏–µ ---
            sql = f'ALTER TABLE "{table_name}" DROP COLUMN "{actual_col}"{" CASCADE" if force else ""};'
            self.logger.info(f"üß© ALTER TABLE: —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ '{actual_col}' –∏–∑ '{table_name}' (force={force})")
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            self._refresh_metadata()
            self.logger.info(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü '{actual_col}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' –∏–∑ '{table_name}': {self.format_db_error(e)}")
            return False

    def get_column_dependencies(self, table_name: str, column_name: str) -> Dict[str, List[str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞:
        - foreign_keys: –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
        - constraints: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (CHECK)
        - indexes: –∏–Ω–¥–µ–∫—Å—ã
        """
        deps = {'foreign_keys': [], 'constraints': [], 'indexes': []}

        if not self.is_connected():
            self.logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ‚Äî –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return deps

        try:
            insp = inspect(self.engine)

            # --- –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ ---
            for fk in insp.get_foreign_keys(table_name):
                if column_name in fk.get("constrained_columns", []):
                    ref_cols = ", ".join(fk.get("referred_columns", []))
                    deps["foreign_keys"].append(f"{fk['referred_table']}({ref_cols})")

            # --- CHECK-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ---
            for chk in insp.get_check_constraints(table_name):
                sqltext = str(chk.get("sqltext", "")).lower()
                if column_name.lower() in sqltext:
                    deps["constraints"].append(chk.get("name", "(–±–µ–∑ –∏–º–µ–Ω–∏)"))

            # --- –ò–Ω–¥–µ–∫—Å—ã ---
            for idx in insp.get_indexes(table_name):
                if column_name in idx.get("column_names", []):
                    deps["indexes"].append(idx.get("name", "(–±–µ–∑ –∏–º–µ–Ω–∏)"))

            total = sum(len(v) for v in deps.values())
            self.logger.info(
                f"üîé –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' –≤ '{table_name}': {total} –Ω–∞–π–¥–µ–Ω–æ "
                f"(FK={len(deps['foreign_keys'])}, CHECK={len(deps['constraints'])}, IDX={len(deps['indexes'])})"
            )

            return deps

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π '{table_name}.{column_name}': {self.format_db_error(e)}")
            return deps

    def rename_table(self, old_table_name: str, new_table_name: str) -> bool:
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False

        try:
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ---
            if not self.record_exists_ex_table(old_table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{old_table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False
            if self.record_exists_ex_table(new_table_name):
                self.logger.error(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{new_table_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False

            # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ---
            sql = f'ALTER TABLE "{old_table_name}" RENAME TO "{new_table_name}";'
            self.logger.info(f"üîß –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: '{old_table_name}' ‚Üí '{new_table_name}'")
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ---
            self._refresh_metadata()
            self.logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: '{old_table_name}' ‚Üí '{new_table_name}'")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã '{old_table_name}': {self.format_db_error(e)}")
            return False

    def rename_column(self, table_name: str, old_column_name: str, new_column_name: str) -> bool:
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False

        try:
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ---
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False

            columns = self.get_column_names(table_name)
            actual_old = next((c for c in columns if c.lower() == old_column_name.lower()), None)
            actual_new = next((c for c in columns if c.lower() == new_column_name.lower()), None)

            if not actual_old:
                self.logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{old_column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")
                return False
            if actual_new:
                self.logger.error(f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{new_column_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ '{table_name}'.")
                return False

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞) ---
            deps = self.get_column_dependencies(table_name, actual_old)
            total_deps = sum(len(v) for v in deps.values())
            if total_deps > 0:
                self.logger.warning(
                    f"‚ö†Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ '{actual_old}' –∑–∞—Ç—Ä–æ–Ω–µ—Ç {total_deps} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π "
                    f"(FK={len(deps['foreign_keys'])}, CHECK={len(deps['constraints'])}, IDX={len(deps['indexes'])})"
                )

            # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL ---
            sql = f'ALTER TABLE "{table_name}" RENAME COLUMN "{actual_old}" TO "{new_column_name}";'
            self.logger.info(f"üß© –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞: '{table_name}.{actual_old}' ‚Üí '{new_column_name}'")
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            # --- –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ---
            self._refresh_metadata()
            self.logger.info(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü '{actual_old}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_column_name}' –≤ '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è '{table_name}.{old_column_name}': {self.format_db_error(e)}")
            return False

    def alter_column_type(self, table_name: str, column_name: str, new_type) -> bool:
        """
        –ò–∑–º–µ–Ω—è–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–∞ (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º).
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ USING –¥–ª—è PostgreSQL.
        """
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False

        try:
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—Ç–æ–ª–±—Ü–∞ ---
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False

            columns = self.get_column_names(table_name)
            actual_col = next((c for c in columns if c.lower() == column_name.lower()), None)
            if not actual_col:
                self.logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")
                return False

            # --- –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ ---
            type_str = new_type.compile(dialect=self.engine.dialect) if hasattr(new_type, "compile") else str(new_type)

            # --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ ---
            inspector = inspect(self.engine)
            current_type = None
            for col in inspector.get_columns(table_name):
                if col["name"].lower() == actual_col.lower():
                    current_type = str(col["type"])
                    break

            # --- –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º USING (—Ç–æ–ª—å–∫–æ –¥–ª—è PostgreSQL) ---
            using_clause = ""
            if self.engine.dialect.name == "postgresql" and current_type:
                old = current_type.lower()
                new = type_str.lower()

                if "char" in old and "int" in new:
                    using_clause = f" USING {actual_col}::integer"
                elif "int" in old and "char" in new:
                    using_clause = f" USING {actual_col}::varchar"
                elif "num" in old and "int" in new:
                    using_clause = f" USING {actual_col}::integer"
                elif "int" in old and "num" in new:
                    using_clause = f" USING {actual_col}::numeric"
                elif "bool" in old and "char" in new:
                    using_clause = f" USING CASE WHEN {actual_col}=true THEN 'true' ELSE 'false' END"
                elif "date" in old and "char" in new:
                    using_clause = f" USING to_char({actual_col}, 'YYYY-MM-DD')"

            sql = f'ALTER TABLE "{table_name}" ALTER COLUMN "{actual_col}" TYPE {type_str}{using_clause};'

            self.logger.info(f"üß© –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç–æ–ª–±—Ü–∞ '{table_name}.{actual_col}' ‚Üí {type_str}")
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            # --- –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ---
            self._refresh_metadata()

            self.logger.info(f"‚úÖ –¢–∏–ø —Å—Ç–æ–ª–±—Ü–∞ '{actual_col}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {type_str}.")
            return True

        except Exception as e:
            msg = self.format_db_error(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ '{table_name}.{column_name}': {msg}")
            return False

    def set_column_nullable(self, table_name: str, column_name: str, nullable: bool) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–ª–∏ —Å–Ω–∏–º–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ NOT NULL –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞.
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π NOT NULL.
        """
        if not self.is_connected():
            self.logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return False

        try:
            action = "DROP NOT NULL" if nullable else "SET NOT NULL"
            self.logger.info(f"{action} –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–∫–∏
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            existing_columns = self.get_column_names(table_name)
            if column_name not in existing_columns:
                self.logger.error(f"–°—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'")
                return False

            # –ï—Å–ª–∏ –¥–µ–ª–∞–µ–º NOT NULL ‚Äî –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ NULL –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if not nullable:
                inspector = inspect(self.engine)
                column_type = None
                for col in inspector.get_columns(table_name):
                    if col["name"].lower() == column_name.lower():
                        column_type = str(col["type"]).lower()
                        break

                if column_type:
                    # –ü–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É
                    if "int" in column_type:
                        default_value = "0"
                    elif "numeric" in column_type or "decimal" in column_type or "float" in column_type:
                        default_value = "0.0"
                    elif "bool" in column_type:
                        default_value = "FALSE"
                    elif "date" in column_type:
                        default_value = "CURRENT_DATE"
                    else:
                        default_value = "''"

                    update_sql = f'''
                        UPDATE "{table_name}" 
                        SET "{column_name}" = {default_value}
                        WHERE "{column_name}" IS NULL;
                    '''
                    with self.engine.begin() as conn:
                        result = conn.execute(text(update_sql))
                        if result.rowcount > 0:
                            self.logger.info(f"–ó–∞–ø–æ–ª–Ω–µ–Ω–æ {result.rowcount} NULL –∑–Ω–∞—á–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π NOT NULL.")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π SQL
            sql = f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" {action};'
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            self._refresh_metadata()
            self.logger.info(
                f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ NOT NULL —É—Å–ø–µ—à–Ω–æ {'—Å–Ω—è—Ç–æ' if nullable else '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'} –¥–ª—è '{column_name}'")
            return True

        except Exception as e:
            msg = self.format_db_error(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è NOT NULL: {msg}")
            return False

    def add_constraint(self, table_name: str, constraint_name: str, constraint_type: str, **kwargs) -> bool:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ (CHECK, UNIQUE, FOREIGN KEY) –∫ —Ç–∞–±–ª–∏—Ü–µ.
        –ü—Ä–∏–º–µ—Ä:
            db.add_constraint("Books", "chk_price", "CHECK", check_condition="price > 0")
            db.add_constraint("Users", "uq_email", "UNIQUE", columns=["email"])
            db.add_constraint("Orders", "fk_user", "FOREIGN_KEY",
                              columns="user_id", foreign_table="Users", foreign_columns="id")
        """
        if not self.is_connected():
            self.logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return False

        try:
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            constraint_type = constraint_type.upper()
            sql = f'ALTER TABLE "{table_name}" ADD CONSTRAINT "{constraint_name}" '

            # ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç—Ä—ë—Ö —Ç–∏–ø–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
            match constraint_type:
                case "CHECK":
                    cond = kwargs.get("check_condition")
                    if not cond:
                        self.logger.error("‚ùå –î–ª—è CHECK-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä 'check_condition'")
                        return False
                    sql += f"CHECK ({cond})"

                case "UNIQUE":
                    cols = kwargs.get("columns")
                    if not cols:
                        self.logger.error("‚ùå –î–ª—è UNIQUE –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å 'columns'")
                        return False
                    cols_str = ", ".join(f'"{c}"' for c in (cols if isinstance(cols, list) else [cols]))
                    sql += f"UNIQUE ({cols_str})"

                case "FOREIGN_KEY":
                    cols = kwargs.get("columns")
                    ref_table = kwargs.get("foreign_table")
                    ref_cols = kwargs.get("foreign_columns")

                    if not all([cols, ref_table, ref_cols]):
                        self.logger.error("‚ùå –î–ª—è FOREIGN KEY –Ω—É–∂–Ω—ã 'columns', 'foreign_table' –∏ 'foreign_columns'")
                        return False

                    if not self.record_exists_ex_table(ref_table):
                        self.logger.error(f"–°—Å—ã–ª–æ—á–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ '{ref_table}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        return False

                    cols_str = ", ".join(f'"{c}"' for c in (cols if isinstance(cols, list) else [cols]))
                    ref_cols_str = ", ".join(f'"{c}"' for c in (ref_cols if isinstance(ref_cols, list) else [ref_cols]))
                    sql += f"FOREIGN KEY ({cols_str}) REFERENCES \"{ref_table}\" ({ref_cols_str})"

                case _:
                    self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {constraint_type}")
                    return False

            sql += ";"
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            self._refresh_metadata()
            self.logger.info(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ '{constraint_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ '{table_name}'")
            return True

        except Exception as e:
            msg = self.format_db_error(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {msg}")
            return False

    def drop_constraint(self, table_name: str, constraint_name: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (CHECK, UNIQUE, FOREIGN KEY –∏ —Ç.–¥.)
        """
        if not self.is_connected():
            self.logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return False

        try:
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            self.logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è '{constraint_name}' –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (–µ—Å–ª–∏ –º–µ—Ç–æ–¥ get_table_constraints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
            constraints = self.get_table_constraints(table_name)
            if not any(c.get("name") == constraint_name for c in constraints):
                self.logger.warning(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ '{constraint_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ")
                return False

            sql = f'ALTER TABLE "{table_name}" DROP CONSTRAINT "{constraint_name}";'
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            self._refresh_metadata()
            self.logger.info(f"‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ '{constraint_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ '{table_name}'")
            return True

        except Exception as e:
            msg = self.format_db_error(e)
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è '{constraint_name}': {msg}")
            return False

    def get_table_constraints(self, table_name: str) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (CHECK, UNIQUE, FOREIGN KEY) –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã.
        """
        if not self.is_connected():
            return []

        try:
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return []

            insp = inspect(self.engine)
            constraints = []

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥)
            def add_constraint(name, type_, definition, columns=None, **extra):
                constraints.append({
                    "name": name,
                    "type": type_,
                    "definition": definition,
                    "columns": columns or [],
                    **extra
                })

            # --- CHECK ---
            for chk in insp.get_check_constraints(table_name):
                add_constraint(
                    chk["name"], "CHECK",
                    str(chk.get("sqltext", "")),
                )

            # --- UNIQUE ---
            for uq in insp.get_unique_constraints(table_name):
                cols = uq.get("column_names", [])
                add_constraint(
                    uq["name"], "UNIQUE",
                    f"UNIQUE ({', '.join(cols)})", cols
                )

            # --- FOREIGN KEY ---
            for fk in insp.get_foreign_keys(table_name):
                add_constraint(
                    fk["name"], "FOREIGN KEY",
                    f"FOREIGN KEY ({', '.join(fk['constrained_columns'])}) "
                    f"REFERENCES {fk['referred_table']}({', '.join(fk['referred_columns'])})",
                    fk["constrained_columns"],
                    foreign_table=fk["referred_table"],
                    foreign_columns=fk["referred_columns"]
                )

            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(constraints)} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤ '{table_name}'")
            return constraints

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {self.format_db_error(e)}")
            return []

    def set_column_default(self, table_name: str, column_name: str, default_value: Any) -> bool:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (DEFAULT) –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞.
        """
        if not self.is_connected():
            return False

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—Ç–æ–ª–±—Ü–∞
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return False

            if column_name not in self.get_column_names(table_name):
                self.logger.error(f"–°—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'")
                return False

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            if default_value is None:
                default_sql = "NULL"
            elif isinstance(default_value, str) and not default_value.upper().startswith(("CURRENT_", "NEXTVAL(")):
                default_sql = f"'{default_value}'"  # —Å—Ç—Ä–æ–∫–∞
            else:
                default_sql = str(default_value)  # —á–∏—Å–ª–æ –∏–ª–∏ SQL-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ

            sql = f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" SET DEFAULT {default_sql};'
            self.logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ DEFAULT {default_sql} –¥–ª—è {table_name}.{column_name}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            self._refresh_metadata()
            self.logger.info(f"–ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è '{table_name}.{column_name}'")
            return True

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.format_db_error(e)}")
            return False

    def select_with_filters(
            self,
            table_name: str,
            columns: List[str] = None,
            where_conditions: Dict[str, Any] = None,
            order_by: List[tuple] = None,
            group_by: List[str] = None,
            having_conditions: Dict[str, Any] = None,
            limit: int = None,
            offset: int = None
    ) -> List[Dict[str, Any]]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π SELECT —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π, HAVING –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
        """
        if not self.is_connected() or table_name not in self.tables:
            return []

        try:
            table = self.tables[table_name]
            stmt = table.select()

            # --- –ö–æ–ª–æ–Ω–∫–∏ ---
            if columns:
                valid_cols = [getattr(table.c, c) for c in columns if hasattr(table.c, c)]
                if not valid_cols:
                    self.logger.warning(f"–£–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ '{table_name}'")
                    return []
                stmt = stmt.with_only_columns(*valid_cols)

            params, i = {}, 0

            # --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Å–ª–æ–≤–∏–π ---
            def _make_conditions(conds, prefix):
                nonlocal i
                if not conds:
                    return []
                exprs = []
                for col, val in conds.items():
                    if hasattr(table.c, col):
                        key = f"{prefix}_{i}"
                        exprs.append(getattr(table.c, col) == text(f":{key}"))
                        params[key] = val
                        i += 1
                    else:
                        self.logger.warning(f"–ö–æ–ª–æ–Ω–∫–∞ '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ({prefix})")
                return exprs

            # WHERE
            where_expr = _make_conditions(where_conditions, "where")
            if where_expr:
                stmt = stmt.where(*where_expr)

            # GROUP BY
            if group_by:
                group_cols = [getattr(table.c, c) for c in group_by if hasattr(table.c, c)]
                if group_cols:
                    stmt = stmt.group_by(*group_cols)

            # HAVING
            having_expr = _make_conditions(having_conditions, "having")
            if having_expr:
                stmt = stmt.having(*having_expr)

            # ORDER BY
            if order_by:
                order_expr = [
                    getattr(table.c, col).asc() if asc else getattr(table.c, col).desc()
                    for col, asc in order_by if hasattr(table.c, col)
                ]
                if order_expr:
                    stmt = stmt.order_by(*order_expr)

            # LIMIT / OFFSET
            if limit:
                stmt = stmt.limit(limit)
            if offset:
                stmt = stmt.offset(offset)

            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∏–∑ '{table_name}'")
            with self.engine.connect() as conn:
                result = conn.execute(stmt, params)
                rows = [dict(row._mapping) for row in result]

            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ '{table_name}'")
            return rows

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ SELECT —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {self.format_db_error(e)}")
            return []

    def execute_aggregate_query(
            self,
            query: str,
            aggregate_functions: Dict[str, str] = None,
            group_by: List[str] = None,
            having: str = None
    ) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏ HAVING.
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π SELECT.
        """
        if not self.is_connected():
            return None

        try:
            base_query = query.strip()
            self.logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")

            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º SELECT
            if aggregate_functions:
                select_clause = ", ".join(
                    f"{func} AS {alias}" for alias, func in aggregate_functions.items()
                )

                # –ò—â–µ–º FROM (–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
                upper_query = base_query.upper()
                from_idx = upper_query.find("FROM")

                if from_idx == -1:
                    self.logger.error("–û—à–∏–±–∫–∞: –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ FROM")
                    return None

                base_query = f"SELECT {select_clause} {base_query[from_idx:]}"
                self.logger.debug(f"–ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–π SELECT: {base_query}")

            # –î–æ–±–∞–≤–ª—è–µ–º GROUP BY
            if group_by:
                base_query += " GROUP BY " + ", ".join(f'"{col}"' for col in group_by)

            # –î–æ–±–∞–≤–ª—è–µ–º HAVING
            if having:
                base_query += f" HAVING {having}"

            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
            result = self.execute_query(base_query, fetch="dict")
            count = len(result) if isinstance(result, list) else 1 if result else 0
            self.logger.info(f"–ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Äî –ø–æ–ª—É—á–µ–Ω–æ {count} —Å—Ç—Ä–æ–∫")
            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {self.format_db_error(e)}")
            return None

    def text_search(
            self,
            table_name: str,
            column_name: str,
            search_pattern: str,
            search_type: str = "LIKE"
    ) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ (LIKE, ILIKE, POSIX REGEX, NOT LIKE).
        """
        if not self.is_connected():
            return []

        try:
            table = self.tables.get(table_name)
            if not table or not hasattr(table.c, column_name):
                self.logger.error(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return []

            column = getattr(table.c, column_name)
            stmt = table.select()
            search_type = search_type.upper()

            # –ö–∞—Ä—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∏—Å–∫–∞
            ops = {
                "LIKE": column.like,
                "ILIKE": column.ilike,
                "NOT_LIKE": lambda p: ~column.like(p),
                "NOT_ILIKE": lambda p: ~column.ilike(p),
                "REGEX": lambda p: column.op("~")(p),
                "IREGEX": lambda p: column.op("~*")(p),
                "NOT_REGEX": lambda p: column.op("!~")(p),
                "NOT_IREGEX": lambda p: column.op("!~*")(p),
            }

            if search_type not in ops:
                self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}")
                return []

            stmt = stmt.where(ops[search_type](search_pattern))

            self.logger.info(f"üîç –ü–æ–∏—Å–∫ –≤ '{table_name}.{column_name}' ({search_type}) —Å —à–∞–±–ª–æ–Ω–æ–º '{search_pattern}'")

            with self.engine.connect() as conn:
                result = conn.execute(stmt)
                rows = [dict(row._mapping) for row in result]

            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –ø–æ '{search_pattern}' ({search_type})")
            return rows

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {self.format_db_error(e)}")
            return []

    def string_functions_demo(
            self,
            table_name: str,
            column_name: str,
            function_name: str,
            **params
    ) -> List[Dict[str, Any]]:
        """
        –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö SQL-—Ñ—É–Ω–∫—Ü–∏–π PostgreSQL:
        UPPER, LOWER, LENGTH, SUBSTRING, TRIM, LTRIM, RTRIM,
        REPLACE, CONCAT, CONCAT_WS.
        """
        if not self.is_connected():
            return []

        try:
            func = function_name.upper()
            col = f'"{column_name}"'
            func_sql = None

            # –ö–∞—Ä—Ç–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            basic_funcs = {
                "UPPER": f"UPPER({col}) AS upper_result",
                "LOWER": f"LOWER({col}) AS lower_result",
                "LENGTH": f"LENGTH({col}) AS length_result",
                "TRIM": f"TRIM({col}) AS trim_result",
                "LTRIM": f"LTRIM({col}) AS ltrim_result",
                "RTRIM": f"RTRIM({col}) AS rtrim_result"
            }

            if func in basic_funcs:
                func_sql = basic_funcs[func]

            elif func == "SUBSTRING":
                start = params.get("start", 1)
                length = params.get("length")
                func_sql = (
                    f"SUBSTRING({col} FROM {start} FOR {length}) AS substring_result"
                    if length else f"SUBSTRING({col} FROM {start}) AS substring_result"
                )

            elif func == "REPLACE":
                old_str = params.get("old_str", " ")
                new_str = params.get("new_str", "")
                func_sql = f"REPLACE({col}, '{old_str}', '{new_str}') AS replace_result"

            elif func == "CONCAT":
                concat_str = params.get("concat_str", "")
                func_sql = f"CONCAT({col}, '{concat_str}') AS concat_result"

            elif func == "CONCAT_WS":
                sep = params.get("separator", " ")
                concat_str = params.get("concat_str", "")
                func_sql = f"CONCAT_WS('{sep}', {col}, '{concat_str}') AS concat_ws_result"

            else:
                self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {func}")
                return []

            query = f"SELECT {col}, {func_sql} FROM \"{table_name}\" WHERE {col} IS NOT NULL LIMIT 10"
            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {func} –Ω–∞ '{table_name}.{column_name}'")

            result = self.execute_query(query, fetch="dict")
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result) if result else 0}")
            return result or []

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {self.format_db_error(e)}")
            return []

    def substring_function(self, table_name: str, column_name: str, start: int, length: int = None) -> List[
        Dict[str, Any]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞.
        –ü—Ä–∏–º–µ—Ä: SUBSTRING(column FROM start [FOR length])
        """
        if not self.is_connected():
            return []

        try:
            col = f'"{column_name}"'
            table = f'"{table_name}"'
            for_clause = f" FOR {length}" if length else ""
            query = f"SELECT {col}, SUBSTRING({col} FROM {start}{for_clause}) AS substring_result FROM {table}"

            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SUBSTRING –¥–ª—è {table_name}.{column_name} (start={start}, length={length})")
            result = self.execute_query(query, fetch="dict")

            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result) if result else 0}")
            return result or []

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SUBSTRING: {self.format_db_error(e)}")
            return []

    def trim_functions(self, table_name: str, column_name: str, trim_type: str = "BOTH", characters: str = None) -> \
    List[Dict[str, Any]]:
        """
        –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –Ω–∞—á–∞–ª–∞, –∫–æ–Ω—Ü–∞ –∏–ª–∏ –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω —Å—Ç—Ä–æ–∫–∏.

        Args:
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            column_name: –ò–º—è –∫–æ–ª–æ–Ω–∫–∏
            trim_type: "BOTH" (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é), "LEADING" –∏–ª–∏ "TRAILING"
            characters: –°–∏–º–≤–æ–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±–µ–ª—ã)

        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–ª–æ–Ω–∫–æ–π trim_result
        """
        if not self.is_connected():
            self.logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return []

        try:
            trim_type = trim_type.upper().strip()
            if trim_type not in {"BOTH", "LEADING", "TRAILING"}:
                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π trim_type '{trim_type}', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è BOTH –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                trim_type = "BOTH"

            col = f'"{column_name}"'
            table = f'"{table_name}"'

            if characters:
                query = f"SELECT {col}, TRIM({trim_type} '{characters}' FROM {col}) AS trim_result FROM {table}"
            else:
                query = f"SELECT {col}, TRIM({trim_type} FROM {col}) AS trim_result FROM {table}"

            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ TRIM –¥–ª—è {table_name}.{column_name} ({trim_type}, chars={characters})")

            result = self.execute_query(query, fetch='dict')
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result) if result else 0}")

            return result or []

        except Exception as e:
            msg = self.format_db_error(e)
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è TRIM: {msg}")
            return []

    def pad_functions(self, table_name: str, column_name: str, length: int,
                      pad_string: str = ' ', pad_type: str = "RPAD") -> List[Dict[str, Any]]:
        """
        –î–æ–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã (LPAD –∏–ª–∏ RPAD).

        Args:
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            column_name: –ò–º—è –∫–æ–ª–æ–Ω–∫–∏
            length: –û–±—â–∞—è –¥–ª–∏–Ω–∞ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            pad_string: –°–∏–º–≤–æ–ª –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            pad_type: –¢–∏–ø –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è ("LPAD" ‚Äî —Å–ª–µ–≤–∞, "RPAD" ‚Äî —Å–ø—Ä–∞–≤–∞)

        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–ª–æ–Ω–∫–æ–π pad_result
        """
        if not self.is_connected():
            self.logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return []

        try:
            pad_type = pad_type.upper().strip()
            if pad_type not in {"LPAD", "RPAD"}:
                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π pad_type '{pad_type}', –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è RPAD –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                pad_type = "RPAD"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if not isinstance(length, int) or length <= 0:
                self.logger.error("–ü–∞—Ä–∞–º–µ—Ç—Ä 'length' –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
                return []

            if not isinstance(pad_string, str) or len(pad_string) == 0:
                self.logger.warning("–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ pad_string, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–±–µ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                pad_string = " "

            col = f'"{column_name}"'
            table = f'"{table_name}"'

            query = f"SELECT {col}, {pad_type}({col}, {length}, '{pad_string}') AS pad_result FROM {table}"

            self.logger.info(
                f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ {pad_type} –¥–ª—è {table_name}.{column_name}, –¥–ª–∏–Ω–∞={length}, pad='{pad_string}'")

            result = self.execute_query(query, fetch="dict")
            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result) if result else 0}")

            return result or []

        except Exception as e:
            msg = self.format_db_error(e)
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {pad_type}: {msg}")
            return []

    def concat_operator(self, table_name: str, columns: List[str], separator: str = ' ') -> List[Dict[str, Any]]:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä || (–∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –≤ SQL).

        Args:
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            columns: –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            separator: –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±–µ–ª)

        Returns:
            List[Dict[str, Any]]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–ª–µ–º concat_result
        """
        if not self.is_connected():
            self.logger.error("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return []

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            if table_name not in self.tables:
                self.logger.error(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
                return []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏
            valid_columns = []
            invalid_columns = []
            for col in columns:
                if hasattr(self.tables[table_name].c, col):
                    valid_columns.append(f'"{col}"')
                else:
                    invalid_columns.append(col)

            if invalid_columns:
                self.logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã: {invalid_columns}")

            if not valid_columns:
                self.logger.error("–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
                return []

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            if separator:
                concat_expr = f" || '{separator}' || ".join(valid_columns)
            else:
                concat_expr = " || ".join(valid_columns)

            query = f'SELECT {concat_expr} AS concat_result FROM "{table_name}"'

            self.logger.info(
                f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ {valid_columns} —á–µ—Ä–µ–∑ '{separator}' –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'")

            result = self.execute_query(query, fetch="dict")

            self.logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(result) if result else 0}")
            return result or []

        except Exception as e:
            msg = self.format_db_error(e)
            self.logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫: {msg}")
            return []

    def get_column_constraints(self, table_name: str, column_name: str) -> Dict[str, Any]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –∏–∑ —Å—Ö–µ–º—ã –ë–î.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –≤–∫–ª—é—á–∞—è –∫—Ä–æ—Å—Å-–ø–æ–ª–µ–≤—É—é –ª–æ–≥–∏–∫—É.
        """
        if not self.is_connected():
            return {}

        constraints = {
            'nullable': True,
            'default': None,
            'data_type': None,
            'max_length': None,
            'precision': None,
            'scale': None,
            'allowed_values': None,
            'min_value': None,
            'max_value': None,
            'array_item_type': None,
            'min_elements': None,
            'max_elements': None,
            'cross_field_checks': [],
        }

        try:
            inspector = inspect(self.engine)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–∫–∏
            if table_name not in self.tables or column_name not in self.tables[table_name].c:
                self.logger.error(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return constraints

            column = self.tables[table_name].c[column_name]

            # --- 1. –ë–∞–∑–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ ---
            constraints['nullable'] = column.nullable

            from sqlalchemy.sql.elements import TextClause
            default_val = None
            if column.default is not None and hasattr(column.default, 'arg'):
                arg = column.default.arg
                if isinstance(arg, TextClause):
                    default_val = str(arg.text)
                elif callable(arg):
                    default_val = arg.__name__
                else:
                    default_val = str(arg)
            constraints['default'] = default_val

            col_type = column.type
            type_name = type(col_type).__name__
            constraints['data_type'] = type_name

            # --- 2. –¢–∏–ø—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ---
            if isinstance(col_type, String):
                constraints['max_length'] = col_type.length
            elif isinstance(col_type, Numeric):
                constraints['precision'] = col_type.precision
                constraints['scale'] = col_type.scale
            elif isinstance(col_type, Enum):
                constraints['allowed_values'] = list(col_type.enums)
            elif isinstance(col_type, ARRAY):
                constraints['array_item_type'] = type(col_type.item_type).__name__
                item_type = col_type.item_type
                if isinstance(item_type, String):
                    constraints['max_length'] = item_type.length
                elif isinstance(item_type, Numeric):
                    constraints['precision'] = item_type.precision
                    constraints['scale'] = item_type.scale
                elif isinstance(item_type, Enum):
                    constraints['allowed_values'] = list(item_type.enums)

            # --- 3. –ü–∞—Ä—Å–∏–Ω–≥ CHECK –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π ---
            check_constraints = inspector.get_check_constraints(table_name)
            import re

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –∫–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
            all_other_columns = [col.name for col in self.tables[table_name].columns if col.name != column_name]
            other_columns_pattern = '|'.join(map(re.escape, all_other_columns)) if all_other_columns else None

            for chk in check_constraints:
                sqltext = chk.get('sqltext')
                if not sqltext or column_name not in sqltext:
                    continue

                # --- –ü—Ä–∞–≤–∏–ª–æ 1: —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º —Å—Ç–æ–ª–±—Ü–æ–º, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –ø–æ–ª–µ –Ω–µ NULL ---
                if other_columns_pattern:
                    pattern_nullable_compare = re.compile(
                        rf"\(\s*{re.escape(column_name)}\s*IS\s+NULL\s*\)\s*OR\s*\(\s*{re.escape(column_name)}\s*([><=]+)\s*({other_columns_pattern})\s*\)",
                        re.IGNORECASE
                    )
                    match = pattern_nullable_compare.search(sqltext)
                    if match:
                        constraints['cross_field_checks'].append({
                            'type': 'compare_if_not_null',
                            'operator': match.group(1).strip(),
                            'reference_column': match.group(2).strip(),
                            'message': f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {match.group(1).strip()} –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è '{match.group(2).strip()}' (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ)"
                        })
                        continue

                    # --- –ü—Ä–∞–≤–∏–ª–æ 2: –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ ---
                    pattern_simple_compare = re.compile(
                        rf"{re.escape(column_name)}\s*([><=]+)\s*({other_columns_pattern})\s*(?:AND|$|\))",
                        re.IGNORECASE
                    )
                    match = pattern_simple_compare.search(sqltext)
                    if match:
                        constraints['cross_field_checks'].append({
                            'type': 'compare',
                            'operator': match.group(1).strip(),
                            'reference_column': match.group(2).strip(),
                            'message': f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {match.group(1).strip()} –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è '{match.group(2).strip()}'"
                        })
                        continue

                    # --- –ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ 3: —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ –∏–ª–∏ –æ–±–∞ NULL ---
                    pattern_equal_or_null = re.compile(
                        rf"\(\s*{re.escape(column_name)}\s*=\s*({other_columns_pattern})\s*\)\s*OR\s*\(\s*{re.escape(column_name)}\s+IS\s+NULL\s+AND\s*\1\s+IS\s+NULL\s*\)",
                        re.IGNORECASE
                    )
                    match = pattern_equal_or_null.search(sqltext)
                    if match:
                        constraints['cross_field_checks'].append({
                            'type': 'equal_or_both_null',
                            'reference_column': match.group(1),
                            'message': f"–ü–æ–ª–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å '{match.group(1)}' –∏–ª–∏ –æ–±–∞ –±—ã—Ç—å NULL"
                        })
                        continue

                    # --- –ü—Ä–∞–≤–∏–ª–æ 4: —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å NULL/NOT NULL –º–µ–∂–¥—É –ø–æ–ª—è–º–∏ ---
                    if re.search(rf"{re.escape(column_name)}\s+IS\s+NULL", sqltext, re.IGNORECASE):
                        null_part_cols = set(re.findall(r"(\w+)\s+IS\s+NULL", sqltext, re.IGNORECASE))
                        not_null_part_cols = set(re.findall(r"(\w+)\s+IS\s+NOT\s+NULL", sqltext, re.IGNORECASE))
                        if null_part_cols == not_null_part_cols:
                            constraints['cross_field_checks'].append({
                                'type': 'null_consistency',
                                'reference_columns': list(null_part_cols),
                                'message': "–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —ç—Ç–æ–≥–æ –ø–æ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—è–º–∏"
                            })
                            continue

                # --- –ü—Ä–∞–≤–∏–ª–æ 5: –ø—Ä–æ—Å—Ç—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –∏ —Å–ø–∏—Å–∫–∏ ---
                between_match = re.search(rf"{re.escape(column_name)}\s+BETWEEN\s+([\d.-]+)\s+AND\s+([\d.-]+)",
                                          sqltext, re.IGNORECASE)
                if between_match and type_name in ['Integer', 'Numeric', 'Date']:
                    constraints['min_value'] = float(between_match.group(1))
                    constraints['max_value'] = float(between_match.group(2))
                    continue

                min_match = re.search(rf"{re.escape(column_name)}\s*>=\s*([\d.-]+)", sqltext)
                if min_match:
                    constraints['min_value'] = float(min_match.group(1))

                max_match = re.search(rf"{re.escape(column_name)}\s*<=\s*([\d.-]+)", sqltext)
                if max_match:
                    constraints['max_value'] = float(max_match.group(1))

                in_match = re.search(rf"{re.escape(column_name)}\s+IN\s*\((.*?)\)", sqltext, re.IGNORECASE)
                if in_match:
                    values_str = in_match.group(1)
                    allowed = [v.strip().strip("'\"") for v in values_str.split(',')]
                    if constraints['allowed_values'] is None:
                        constraints['allowed_values'] = allowed
                    else:
                        constraints['allowed_values'] = sorted(list(set(constraints['allowed_values'] + allowed)))

            # --- –ö–æ—Ä–æ—Ç–∫–∏–π –ª–æ–≥ ---
            self.logger.info(
                f"[CONSTRAINTS] {table_name}.{column_name}: type={constraints['data_type']}, "
                f"nullable={constraints['nullable']}, default={constraints['default']}, "
                f"range=({constraints['min_value']}, {constraints['max_value']}), "
                f"cross_checks={len(constraints['cross_field_checks'])}"
            )

            return constraints

        except Exception as e:
            user_friendly_msg = self.format_db_error(e)
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è '{table_name}.{column_name}': {user_friendly_msg}")
            return constraints

    def get_predefined_joins(self) -> Dict[Tuple[str, str], Tuple[str, str]]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
        –¥–ª—è –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π JOIN.

        –î–ª—è –∫–∞–∂–¥–æ–π —Å–≤—è–∑–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–≤–µ –∑–∞–ø–∏—Å–∏, —á—Ç–æ–±—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–æ–∂–Ω–æ –±—ã–ª–æ
        –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ (A,B –∏ B,A).

        Returns:
            Dict[Tuple[str, str], Tuple[str, str]]: –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á -
            —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è JOIN.
        """
        predefined_joins = {}
        if not self.tables:
            self.logger.warning("‚ö†Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.")
            return predefined_joins

        for table in self.tables.values():
            for fk in table.foreign_keys:
                # –¢–∞–±–ª–∏—Ü–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
                local_table_name = table.name
                # –ö–æ–ª–æ–Ω–∫–∞ —Å –≤–Ω–µ—à–Ω–∏–º –∫–ª—é—á–æ–º
                local_column_name = fk.parent.name

                # –¢–∞–±–ª–∏—Ü–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å—Å—ã–ª–∞–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
                referenced_table_name = fk.column.table.name
                # –ö–æ–ª–æ–Ω–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Å—Å—ã–ª–∞–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π –∫–ª—é—á
                referenced_column_name = fk.column.name

                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (local, referenced)
                predefined_joins[(local_table_name, referenced_table_name)] = (local_column_name, referenced_column_name)

                # –ò –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (referenced, local)
                predefined_joins[(referenced_table_name, local_table_name)] = (referenced_column_name, local_column_name)

        self.logger.info(f"üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª–æ–≤–∞—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {predefined_joins}")
        return predefined_joins