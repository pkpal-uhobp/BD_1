Метод is_connected() класса DB

Назначение:
Проверяет текущее состояние подключения к базе данных. Возвращает булево значение, указывающее, активно ли соединение с БД.

Параметры:
Метод не принимает параметров.

Возвращаемое значение:
- bool: True - если соединение активно (self.engine не равен None)
- bool: False - если соединение отсутствует или закрыто

Выполняемые действия:

1. Проверка состояния:
   - Проверяет, установлен ли объект self.engine (не равен None)
   - self.engine устанавливается при успешном вызове connect() и сбрасывается при disconnect()

2. Логирование:
   - INFO: "Проверка подключения: активно" (если соединение есть)
   - INFO: "Проверка подключения: не активно" (если соединения нет)

Примеры вызова:

1. Базовая проверка:
   db = DB()
   if db.is_connected():
       print("Соединение активно")
   else:
       print("Нет активного соединения")

2. Перед выполнением операций:
   db = DB()
   if not db.is_connected():
       if db.connect():
           print("Подключение установлено")
       else:
           print("Не удалось подключиться")
   else:
       print("Уже подключены")

3. Проверка после disconnect():
   db = DB()
   db.connect()
   print(db.is_connected())  # True
   db.disconnect()
   print(db.is_connected())  # False

4. Использование в условных конструкциях:
   db = DB()
   if db.connect() and db.is_connected():
       # Выполнять операции с БД
       data = db.get_table_data("Books")
   else:
       print("Невозможно выполнить операцию - нет подключения")

Побочные эффекты:
- Запись в лог-файл информации о состоянии подключения
- Не модифицирует внутренние структуры данных
- Не влияет на состояние соединения

Особенности:
- Метод не пытается установить новое соединение
- Не проверяет реальную доступность БД (только наличие объекта engine)
- Может вернуть True даже если физическое соединение потеряно (но объект engine существует)
- Быстрая операция - выполняется локально без обращения к БД

Логирование:
- INFO: "Проверка подключения: активно" (если self.engine != None)
- INFO: "Проверка подключения: не активно" (если self.engine == None)

Рекомендации по использованию:
- Используйте перед выполнением критичных операций с БД
- Проверяйте состояние после долгих периодов бездействия
- Комбинируйте с методом connect() для автоматического восстановления соединения
- Полезен для диагностики состояния приложения

Пример комплексного использования:
   db = DB()
   def safe_db_operation():
       if not db.is_connected():
           print("Нет подключения, пытаемся подключиться...")
           if not db.connect():
               raise Exception("Не удалось подключиться к БД")

       if db.is_connected():
           return db.get_table_names()
       else:
           raise Exception("Подключение к БД отсутствует")