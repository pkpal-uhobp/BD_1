Метод record_exists() класса DB

Назначение:
Проверяет существование записи в таблице, удовлетворяющей заданному условию. Выполняет SELECT-запрос с LIMIT 1 для оптимизации производительности и возвращает булево значение результата.

Параметры:
- table_name (str): название таблицы, в которой проверяется существование записи
  Примеры: "Books", "Readers", "Issued_Books"

- condition (Dict[str, Any]): словарь с условиями поиска в формате {колонка: значение}
  Примеры:
    {"id_book": 1}
    {"title": "Война и мир", "genre": "Роман"}
    {"reader_id": 5, "last_name": "Иванов"}

Возвращаемое значение:
- bool: True - если запись, удовлетворяющая условиям, существует
- bool: False - если запись не найдена, таблица не существует, нет подключения или ошибка

Выполняемые действия:

1. Проверка подключения:
   - Вызывает is_connected() для проверки наличия активного соединения
   - Если нет подключения, возвращает False

2. Проверка существования таблицы:
   - Проверяет наличие table_name в self.tables
   - Если таблица не определена в метаданных, возвращает False

3. Построение WHERE условий:
   - Проверяет существование указанных колонок в таблице
   - Формирует список WHERE условий с параметрами
   - Логирует предупреждения для несуществующих колонок

4. Выполнение SELECT-запроса:
   - Создает SELECT * запрос с WHERE условиями и LIMIT 1
   - Выполняет запрос через engine.connect()
   - Проверяет наличие результатов через fetchone()

5. Логирование:
   - INFO: "Проверка существования записи в таблице '{table_name}' по условию: {condition}" (перед выполнением)
   - INFO: "Запись в таблице '{table_name}' по условию {condition} — найдена/не найдена" (результат)
   - ERROR: "Таблица '{table_name}' не определена в метаданных приложения" (если таблица не найдена)
   - WARNING: "Предупреждение: колонки не существуют в таблице '{table_name}': {invalid_columns}" (для невалидных колонок)
   - ERROR: "Не указаны корректные условия для поиска" (если все колонки невалидны)
   - ERROR: "Ошибка при проверке существования записи в '{table_name}': {сообщение ошибки}" (при исключениях)

Примеры вызова:

1. Проверка существования книги по ID:
   db = DB()
   if db.connect():
       exists = db.record_exists("Books", {"id_book": 1})
       if exists:
           print("Книга с ID=1 существует")
       else:
           print("Книга с ID=1 не найдена")

2. Проверка существования читателя по нескольким полям:
   db = DB()
   db.connect()
   exists = db.record_exists("Readers", {
       "last_name": "Иванов",
       "first_name": "Иван",
       "phone": "+7(999)123-45-67"
   })
   print(f"Читатель Иванов И. существует: {exists}")

3. Проверка существования выданной книги:
   db = DB()
   db.connect()
   exists = db.record_exists("Issued_Books", {
       "book_id": 1,
       "reader_id": 1,
       "actual_return_date": None  # Проверка активной выдачи
   })
   if exists:
       print("Книга выдана и еще не возвращена")

4. С обработкой ошибок:
   db = DB()
   try:
       if db.connect():
           # Проверка с несуществующей колонкой
           exists = db.record_exists("Books", {"nonexistent_column": "value"})
           # Будет выведено предупреждение в лог

           # Проверка с корректными данными
           exists = db.record_exists("Books", {"title": "Война и мир"})
           print(f"Книга найдена: {exists}")
   except Exception as e:
       print(f"Ошибка: {e}")

5. Для проверки дубликатов перед вставкой:
   def safe_insert_book(db, book_data):
       # Проверяем, существует ли уже такая книга
       duplicate_condition = {
           "title": book_data["title"],
           "authors": book_data["authors"]
       }

       if db.record_exists("Books", duplicate_condition):
           print("Такая книга уже существует")
           return False

       # Можно безопасно вставлять
       return db.insert_data("Books", book_data)

6. Проверка активных выдач:
   def has_active_issues(db, reader_id):
       # Проверяем есть ли не возвращенные книги у читателя
       return db.record_exists("Issued_Books", {
           "reader_id": reader_id,
           "actual_return_date": None
       })

Побочные эффекты:
- Выполняет SELECT-запрос к БД (операция чтения)
- Запись операций в лог-файл
- Минимальная нагрузка на БД (LIMIT 1)
- Не модифицирует данные в БД

Особенности:
- Только чтение - безопасная операция
- Использует LIMIT 1 для оптимизации производительности
- Поддерживает составные условия (AND)
- Проверяет существование колонок перед выполнением
- Потокобезопасный метод

Логирование операций:
- INFO: "Проверка существования записи в таблице '{table_name}' по условию: {condition}"
- INFO: "Запись в таблице '{table_name}' по условию {condition} — найдена"
- INFO: "Запись в таблице '{table_name}' по условию {condition} — не найдена"
- ERROR: "Таблица '{table_name}' не определена в метаданных приложения"
- WARNING: "Предупреждение: колонки не существуют в таблице '{table_name}': {invalid_columns}"
- ERROR: "Не указаны корректные условия для поиска"
- ERROR: "Ошибка при проверке существования записи в '{table_name}': {сообщение ошибки}"

Ограничения:
- Требует прав на чтение из таблицы
- Условия объединяются логическим AND
- Не поддерживает сложные условия (>, <, LIKE и т.д.)
- Работает только с точным совпадением значений

Рекомендации по использованию:
- Используйте для проверки существования записей перед операциями
- Применяйте для предотвращения дубликатов
- Полезен для валидации данных перед вставкой/обновлением
- Можно использовать для проверки состояния записей (например, активные выдачи)
- Для сложных запросов используйте execute_query() с произвольным SQL

Примеры условий:
- {"id_book": 1} - поиск по первичному ключу
- {"title": "Война и мир"} - поиск по названию
- {"reader_id": 5, "actual_return_date": None} - составное условие
- {"genre": "Роман", "deposit_amount": 500.00} - множественные условия

Пример комплексного использования:
   def can_issue_book(db, book_id, reader_id):
       # Проверяем существование книги
       if not db.record_exists("Books", {"id_book": book_id}):
           print("Книга не найдена")
           return False

       # Проверяем существование читателя
       if not db.record_exists("Readers", {"reader_id": reader_id}):
           print("Читатель не найден")
           return False

       # Проверяем, не выдана ли книга уже
       if db.record_exists("Issued_Books", {
           "book_id": book_id,
           "actual_return_date": None
       }):
           print("Книга уже выдана")
           return False

       return True  # Можно выдавать книгу