Метод create_schema() класса DB

Назначение:
Создает схему базы данных, включая все необходимые таблицы (Books, Readers, Issued_Books), если они еще не существуют. Выполняет DDL-операции создания таблиц с учетом всех ограничений и связей.

Параметры:
Метод не принимает параметров.

Возвращаемое значение:
- bool: True - если схема успешно создана или уже существует
- bool: False - если произошла ошибка при создании схемы

Выполняемые действия:

1. Проверка подключения:
   - Вызывает is_connected() для проверки наличия активного соединения
   - Если нет подключения, возвращает False

2. Инспекция существующих таблиц:
   - Использует SQLAlchemy inspector для получения списка существующих таблиц
   - Сравнивает с ожидаемым списком таблиц из self.tables

3. Проверка существования схемы:
   - Если все таблицы уже существуют, возвращает True без выполнения DDL

4. Создание таблиц:
   - Выполняет self.metadata.create_all(self.engine) для создания всех таблиц
   - Применяет все определенные ограничения, индексы и связи

5. Верификация результата:
   - Повторно проверяет список таблиц после создания
   - Убеждается что все ожидаемые таблицы были созданы

6. Логирование:
   - INFO: "Схема уже существует — все таблицы созданы ранее" (если таблицы есть)
   - INFO: "Выполнение DDL: CREATE TABLES..." (перед созданием)
   - INFO: "Схема успешно создана" (при успешном создании)
   - ERROR: "Не удалось создать таблицы: {список отсутствующих таблиц}" (при частичном создании)
   - ERROR: сообщение об ошибке при исключениях

Примеры вызова:

1. Базовое использование:
   db = DB()
   if db.connect():
       if db.create_schema():
           print("Схема БД успешно создана")
       else:
           print("Ошибка создания схемы")

2. Проверка существующей схемы:
   db = DB()
   db.connect()
   # Первый вызов - создание схемы
   db.create_schema()  # Создает таблицы
   # Второй вызов - проверка существующей схемы
   db.create_schema()  # Сообщает что схема уже существует

3. С обработкой ошибок:
   db = DB()
   try:
       if db.connect() and db.create_schema():
           print("Готово к работе с БД")
       else:
           print("Не удалось подготовить схему БД")
   except Exception as e:
       print(f"Критическая ошибка: {e}")

4. В контексте инициализации приложения:
   def initialize_database():
       db = DB()
       if not db.connect():
           raise Exception("Не удалось подключиться к БД")

       if not db.create_schema():
           raise Exception("Не удалось создать схему БД")

       return db

Побочные эффекты:
- Создание таблиц в базе данных (если их нет)
- Запись DDL-операций в лог
- Возможное изменение состояния БД
- Использование ресурсов БД для выполнения CREATE TABLE

Особенности:
- Потокобезопасный метод
- Не пересоздает существующие таблицы
- Учитывает все ограничения и связи между таблицами
- Использует транзакционный подход при создании
- Поддерживает повторный вызов без побочных эффектов

Логирование DDL операций:
- INFO: "Выполнение DDL: CREATE TABLES..."
- INFO: "Схема успешно создана"
- INFO: "Схема уже существует — все таблицы созданы ранее"
- ERROR: "Не удалось создать таблицы: {missing_tables}"
- ERROR: "Ошибка создания схемы: {сообщение ошибки}"

Ограничения:
- Требует наличия соответствующих привилегий в БД (CREATE TABLE)
- Не модифицирует существующие таблицы (только создает новые)
- Не удаляет или не изменяет данные в существующих таблицах

Рекомендации по использованию:
- Вызывайте после успешного подключения к БД
- Используйте при первоначальной настройке приложения
- Полезен для автоматического развертывания БД
- Можно вызывать регулярно для проверки целостности схемы
- Комбинируйте с проверкой is_connected() для надежности

Пример структуры создаваемой схемы:
- Таблица "Books" с колонками: id_book, title, authors, genre, deposit_amount, daily_rental_rate
- Таблица "Readers" с колонками: reader_id, last_name, first_name, middle_name, address, phone, discount_category, discount_percent
- Таблица "Issued_Books" с колонками: issue_id, book_id, reader_id, issue_date, expected_return_date, actual_return_date, damage_type, damage_fine, final_rental_cost, paid, actual_rental_days
- Все внешние ключи, ограничения уникальности и проверки целостности