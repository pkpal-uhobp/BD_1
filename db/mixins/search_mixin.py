"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import logging
from sqlalchemy import func, select, asc, desc, text, inspect
from typing import List, Dict, Any, Optional


class SearchMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–∏–∫—Å–∏–Ω–∞
        self.logger = logging.getLogger("DB")
    
    def select_with_filters(
            self,
            table_name: str,
            columns: List[str] = None,
            where_conditions: Dict[str, Any] = None,
            order_by: List[tuple] = None,
            group_by: List[str] = None,
            having_conditions: Dict[str, Any] = None,
            limit: int = None,
            offset: int = None
    ) -> List[Dict[str, Any]]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π SELECT —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π, HAVING –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
        """
        if not self.is_connected() or table_name not in self.tables:
            return []

        try:
            table = self.tables[table_name]
            stmt = table.select()

            # --- –ö–æ–ª–æ–Ω–∫–∏ ---
            if columns:
                valid_cols = [getattr(table.c, c) for c in columns if hasattr(table.c, c)]
                if not valid_cols:
                    self.logger.warning(f"–£–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ '{table_name}'")
                    return []
                stmt = stmt.with_only_columns(*valid_cols)

            params, i = {}, 0

            # --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Å–ª–æ–≤–∏–π ---
            def _make_conditions(conds, prefix):
                nonlocal i
                if not conds:
                    return []
                exprs = []
                for col, val in conds.items():
                    if hasattr(table.c, col):
                        key = f"{prefix}_{i}"
                        exprs.append(getattr(table.c, col) == text(f":{key}"))
                        params[key] = val
                        i += 1
                    else:
                        self.logger.warning(f"–ö–æ–ª–æ–Ω–∫–∞ '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ({prefix})")
                return exprs

            # WHERE
            where_expr = _make_conditions(where_conditions, "where")
            if where_expr:
                stmt = stmt.where(*where_expr)

            # GROUP BY
            if group_by:
                group_cols = [getattr(table.c, c) for c in group_by if hasattr(table.c, c)]
                if group_cols:
                    stmt = stmt.group_by(*group_cols)

            # HAVING
            having_expr = _make_conditions(having_conditions, "having")
            if having_expr:
                stmt = stmt.having(*having_expr)

            # ORDER BY
            if order_by:
                order_expr = [
                    getattr(table.c, col).asc() if asc else getattr(table.c, col).desc()
                    for col, asc in order_by if hasattr(table.c, col)
                ]
                if order_expr:
                    stmt = stmt.order_by(*order_expr)

            # LIMIT / OFFSET
            if limit:
                stmt = stmt.limit(limit)
            if offset:
                stmt = stmt.offset(offset)

            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∏–∑ '{table_name}'")
            with self.engine.connect() as conn:
                result = conn.execute(stmt, params)
                rows = [dict(row._mapping) for row in result]

            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ '{table_name}'")
            return rows

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ SELECT —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏: {self.format_db_error(e)}")
            return []

    def execute_aggregate_query(
            self,
            query: str,
            aggregate_functions: Dict[str, str] = None,
            group_by: List[str] = None,
            having: str = None
    ) -> Any:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏ HAVING.
        –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π SELECT.
        """
        if not self.is_connected():
            return None

        try:
            base_query = query.strip()
            self.logger.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")

            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º SELECT
            if aggregate_functions:
                select_clause = ", ".join(
                    f"{func} AS {alias}" for alias, func in aggregate_functions.items()
                )

                # –ò—â–µ–º FROM (–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ)
                upper_query = base_query.upper()
                from_idx = upper_query.find("FROM")

                if from_idx == -1:
                    self.logger.error("–û—à–∏–±–∫–∞: –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ FROM")
                    return None

                base_query = f"SELECT {select_clause} {base_query[from_idx:]}"
                self.logger.debug(f"–ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–π SELECT: {base_query}")

            # –î–æ–±–∞–≤–ª—è–µ–º GROUP BY
            if group_by:
                base_query += " GROUP BY " + ", ".join(f'"{col}"' for col in group_by)

            # –î–æ–±–∞–≤–ª—è–µ–º HAVING
            if having:
                base_query += f" HAVING {having}"

            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥
            result = self.execute_query(base_query, fetch="dict")
            count = len(result) if isinstance(result, list) else 1 if result else 0
            self.logger.info(f"–ê–≥—Ä–µ–≥–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Äî –ø–æ–ª—É—á–µ–Ω–æ {count} —Å—Ç—Ä–æ–∫")
            return result

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {self.format_db_error(e)}")
            return None

    def text_search(
        self,
        table_name: str,
        column_name: str,
        search_query: str,
        search_type: str = "LIKE",
        case_sensitive: bool = False
    ) -> List[Dict[str, Any]]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å—Ç–æ–ª–±—Ü—É –¥–ª—è –ª—é–±—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã: —Å—Ç—Ä–æ–∫–∏, —á–∏—Å–ª–∞, –¥–∞—Ç—ã, boolean, enum, array, json –∏ –¥—Ä.
        """
        if not self.is_connected():
            return []

        try:
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            escaped_query = search_query.replace("'", "''")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
            search_type = search_type.upper()
            if search_type == "LIKE" and not case_sensitive:
                search_type = "ILIKE"
            elif search_type == "NOT_LIKE" and not case_sensitive:
                search_type = "NOT_ILIKE"

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
            if search_type == "LIKE":
                # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É LIKE (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö %)
                sql_query = f'SELECT * FROM "{table_name}" WHERE "{column_name}"::text LIKE \'{escaped_query}\''
            elif search_type == "ILIKE":
                # –ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É ILIKE (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö %)
                sql_query = f'SELECT * FROM "{table_name}" WHERE "{column_name}"::text ILIKE \'{escaped_query}\''
            elif search_type == "NOT_LIKE":
                # –ù–ï LIKE (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
                sql_query = f'SELECT * FROM "{table_name}" WHERE "{column_name}"::text NOT LIKE \'{escaped_query}\''
            elif search_type == "NOT_ILIKE":
                # –ù–ï ILIKE (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
                sql_query = f'SELECT * FROM "{table_name}" WHERE "{column_name}"::text NOT ILIKE \'{escaped_query}\''
            elif search_type == "REGEX":
                # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
                sql_query = f'SELECT * FROM "{table_name}" WHERE "{column_name}"::text ~ \'{escaped_query}\''
            elif search_type == "IREGEX":
                # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
                sql_query = f'SELECT * FROM "{table_name}" WHERE "{column_name}"::text ~* \'{escaped_query}\''
            elif search_type == "NOT_REGEX":
                # –ù–ï —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
                sql_query = f'SELECT * FROM "{table_name}" WHERE "{column_name}"::text !~ \'{escaped_query}\''
            elif search_type == "NOT_IREGEX":
                # –ù–ï —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
                sql_query = f'SELECT * FROM "{table_name}" WHERE "{column_name}"::text !~* \'{escaped_query}\''
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º ILIKE (–±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö %)
                sql_query = f'SELECT * FROM "{table_name}" WHERE "{column_name}"::text ILIKE \'{escaped_query}\''

            self.logger.info(f"üîç –ü–æ–∏—Å–∫ –≤ '{table_name}.{column_name}' ({search_type}) —Å –∑–∞–ø—Ä–æ—Å–æ–º '{search_query}'")
            self.logger.info(f"üìù SQL: {sql_query}")

            with self.engine.connect() as conn:
                result = conn.execute(text(sql_query))
                rows = [dict(row._mapping) for row in result]

            self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –ø–æ '{search_query}' ({search_type})")
            return rows

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞: {self.format_db_error(e)}")
            return []
    

    def text_search_advanced(self, table_name: str, column_name: str, search_query: str, 
                   search_type: str, case_sensitive: bool = False) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ —Ç–∞–±–ª–∏—Ü—ã.
        
        Args:
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
            column_name: –ò–º—è —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ (LIKE, ~, ~*, !~, !~*)
            case_sensitive: –£—á–∏—Ç—ã–≤–∞—Ç—å –ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è LIKE)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
        """
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return []
            
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ inspect
            insp = inspect(self.engine)
            if table_name not in insp.get_table_names():
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
            columns = [col['name'] for col in insp.get_columns(table_name)]
            if column_name not in columns:
                self.logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'")
                return []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–µ–∫—Å—Ç –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º COALESCE –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ NULL –∑–Ω–∞—á–µ–Ω–∏–π
            column_as_text = f'COALESCE(CAST("{column_name}" AS TEXT), \'\')'
            
            if "LIKE" in search_type:
                # LIKE –ø–æ–∏—Å–∫
                if case_sensitive:
                    # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
                    where_clause = f'{column_as_text} LIKE :search_query'
                else:
                    # –ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
                    where_clause = f'LOWER({column_as_text}) LIKE LOWER(:search_query)'
                    
                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è LIKE
                escaped_query = search_query.replace('\\', '\\\\').replace('%', '\\%').replace('_', '\\_')
                
            elif "~" in search_type:
                # POSIX —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                if "!~" in search_type:
                    # –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
                    if "*" in search_type:
                        # –ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
                        where_clause = f'{column_as_text} !~* :search_query'
                    else:
                        # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
                        where_clause = f'{column_as_text} !~ :search_query'
                else:
                    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
                    if "*" in search_type:
                        # –ù–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
                        where_clause = f'{column_as_text} ~* :search_query'
                    else:
                        # –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
                        where_clause = f'{column_as_text} ~ :search_query'
                        
                escaped_query = search_query
            else:
                self.logger.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞: {search_type}")
                return []
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å
            sql_query = f'SELECT * FROM "{table_name}" WHERE {where_clause}'
            
            self.logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫: {sql_query} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: {escaped_query}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            with self.engine.connect() as conn:
                result = conn.execute(text(sql_query), {"search_query": escaped_query})
                rows = result.fetchall()
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                columns = result.keys()
                results = []
                
                for row in rows:
                    row_dict = {}
                    for i, col in enumerate(columns):
                        value = row[i]
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                        if hasattr(value, 'isoformat'):  # datetime/date
                            value = value.isoformat()
                        elif isinstance(value, (list, tuple)):  # –º–∞—Å—Å–∏–≤—ã
                            value = list(value)
                        row_dict[col] = value
                    results.append(row_dict)
                
                self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π")
                return results
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É: {self.format_db_error(e)}")
            return []

    def execute_custom_query(self, sql_query: str) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
        
        Args:
            sql_query: SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return []
            
        try:
            self.logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è SQL –∑–∞–ø—Ä–æ—Å: {sql_query}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            with self.engine.connect() as conn:
                result = conn.execute(text(sql_query))
                rows = result.fetchall()
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
                columns = result.keys()
                results = []
                
                for row in rows:
                    row_dict = {}
                    for i, col in enumerate(columns):
                        value = row[i]
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
                        if hasattr(value, 'isoformat'):  # datetime/date
                            value = value.isoformat()
                        elif isinstance(value, (list, tuple)):  # –º–∞—Å—Å–∏–≤—ã
                            value = list(value)
                        elif isinstance(value, (int, float)):  # —á–∏—Å–ª–∞
                            value = value
                        elif value is None:
                            value = None
                        else:
                            value = str(value)
                        row_dict[col] = value
                    results.append(row_dict)
                
                self.logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π")
                return results
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–∞: {self.format_db_error(e)}")
            return []

    def get_foreign_keys(self, table_name: str) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã.
        """
        if not self.is_connected():
            return []

        try:
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return []

            insp = inspect(self.engine)
            foreign_keys = []

            for fk in insp.get_foreign_keys(table_name):
                foreign_keys.append({
                    "name": fk.get("name"),
                    "constrained_columns": fk.get("constrained_columns", []),
                    "referred_table": fk.get("referred_table"),
                    "referred_columns": fk.get("referred_columns", []),
                    "ondelete": fk.get("ondelete"),
                    "onupdate": fk.get("onupdate")
                })

            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(foreign_keys)} –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –≤ '{table_name}'")
            return foreign_keys

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è '{table_name}': {self.format_db_error(e)}")
            return []

    def get_joined_summary(
            self,
            table1: str,
            table2: str,
            join_condition: str = None,
            columns: List[str] = None,
            where_conditions: Dict[str, Any] = None,
            order_by: List[tuple] = None,
            limit: int = None
    ) -> List[Dict[str, Any]]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç JOIN –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–∞–±–ª–∏—Ü–∞–º–∏ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
        """
        if not self.is_connected():
            return []

        try:
            if not self.record_exists_ex_table(table1) or not self.record_exists_ex_table(table2):
                self.logger.error("–û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
                return []

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É—Å–ª–æ–≤–∏–µ
            if join_condition:
                join_clause = join_condition
            else:
                predefined_joins = self.get_predefined_joins()
                join_key = (table1, table2)
                if join_key not in predefined_joins:
                    self.logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É '{table1}' –∏ '{table2}'")
                    return []
                
                col1, col2 = predefined_joins[join_key]
                join_clause = f'"{table1}"."{col1}" = "{table2}"."{col2}"'

            # –§–æ—Ä–º–∏—Ä—É–µ–º SELECT
            if columns:
                select_clause = ", ".join(f'"{col}"' for col in columns)
            else:
                select_clause = f'"{table1}".*, "{table2}".*'

            # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            sql = f'SELECT {select_clause} FROM "{table1}" JOIN "{table2}" ON {join_clause}'

            # WHERE —É—Å–ª–æ–≤–∏—è
            if where_conditions:
                where_clauses = []
                for col, val in where_conditions.items():
                    if "." in col:
                        where_clauses.append(f'"{col}" = :{col.replace(".", "_")}')
                    else:
                        where_clauses.append(f'"{table1}"."{col}" = :{col}')
                if where_clauses:
                    sql += " WHERE " + " AND ".join(where_clauses)

            # ORDER BY
            if order_by:
                order_clauses = []
                for col, asc in order_by:
                    if "." in col:
                        order_clauses.append(f'"{col}" {"ASC" if asc else "DESC"}')
                    else:
                        order_clauses.append(f'"{table1}"."{col}" {"ASC" if asc else "DESC"}')
                if order_clauses:
                    sql += " ORDER BY " + ", ".join(order_clauses)

            # LIMIT
            if limit:
                sql += f" LIMIT {limit}"

            self.logger.info(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JOIN: {sql}")
            
            with self.engine.connect() as conn:
                result = conn.execute(text(sql), where_conditions or {})
                rows = [dict(row._mapping) for row in result]

            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ JOIN")
            return rows

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JOIN: {self.format_db_error(e)}")
            return []
