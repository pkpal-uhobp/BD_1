"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫, –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)
"""

import logging
from sqlalchemy import inspect, text
from typing import Dict, List, Any


class TableOperationsMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–∏–∫—Å–∏–Ω–∞
        self.logger = logging.getLogger("DB")
    
    def add_column(self, table_name: str, column_name: str, column_type, **kwargs) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∏ –ø–æ—ç—Ç–∞–ø–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, —á—Ç–æ–±—ã —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ –¥–ª—è —Ç–∞–±–ª–∏—Ü —Å –¥–∞–Ω–Ω—ã–º–∏.

        –≠—Ç–∞–ø—ã:
          1) –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–≤—Å–µ–≥–¥–∞ NULL, —Å DEFAULT –µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
          2) –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º DEFAULT —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Ç—Ä–æ–∫–∞–º (UPDATE ... WHERE col IS NULL)
          3) –ü–æ –æ—á–µ—Ä–µ–¥–∏ –¥–æ–±–∞–≤–ª—è–µ–º CHECK/NOT NULL/UNIQUE/PRIMARY KEY/FOREIGN KEY
        """
        if not self.is_connected():
            return False

        try:
            self.logger.info(f"üß© ALTER TABLE '{table_name}': –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ '{column_name}'")

            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
                return False

            type_str = column_type.compile(dialect=self.engine.dialect)
            # –û–ø—Ä–µ–¥–µ–ª–∏–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–º, —á—Ç–æ–±—ã —É–º–µ—Ç—å –∞–≤—Ç–æ-–∑–∞–ø–æ–ª–Ω—è—Ç—å PK
            try:
                from sqlalchemy import Integer as SAInt, SmallInteger as SASmallInt, BigInteger as SABigInt
                is_integer_type = isinstance(column_type, (SAInt, SASmallInt, SABigInt))
            except Exception:
                is_integer_type = False
            default_val = kwargs.get("default")

            # 1) –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º—è–≥–∫–æ: –¥–æ–ø—É—Å–∫–∞–µ–º NULL
            default_sql = (
                f" DEFAULT '{default_val}'" if isinstance(default_val, str) else f" DEFAULT {default_val}"
            ) if default_val is not None else ""
            add_sql = f'ALTER TABLE "{table_name}" ADD COLUMN "{column_name}" {type_str}{default_sql};'

            with self.engine.begin() as conn:
                self.logger.debug(add_sql)
                conn.execute(text(add_sql))

                # 2) –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º DEFAULT —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º —Å—Ç—Ä–æ–∫–∞–º, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
                if default_val is not None:
                    upd_sql = text(
                        f'UPDATE "{table_name}" SET "{column_name}" = :def WHERE "{column_name}" IS NULL'
                    )
                    conn.execute(upd_sql, {"def": default_val})

                # 3) CHECK
                if "check" in kwargs and kwargs["check"]:
                    ck_name = f'ck_{table_name}_{column_name}'
                    ck_sql = f'ALTER TABLE "{table_name}" ADD CONSTRAINT "{ck_name}" CHECK ({kwargs["check"]});'
                    self.logger.debug(ck_sql)
                    conn.execute(text(ck_sql))

                # 4) NOT NULL (–ø–æ–∑–∂–µ, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è PK)
                if kwargs.get("nullable") is False and not kwargs.get("primary_key"):
                    nn_sql = f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" SET NOT NULL;'
                    self.logger.debug(nn_sql)
                    conn.execute(text(nn_sql))

                # 5) UNIQUE
                if kwargs.get("unique"):
                    # –ü—Ä–µ–¥–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                    dup_sql = text(
                        f'SELECT "{column_name}", COUNT(*) FROM "{table_name}" '
                        f'WHERE "{column_name}" IS NOT NULL GROUP BY "{column_name}" HAVING COUNT(*)>1'
                    )
                    dups = conn.execute(dup_sql).fetchall()
                    if dups:
                        self.logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å UNIQUE ‚Äî –Ω–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏–∫–∞—Ç—ã")
                        return False
                    uq_name = f'uq_{table_name}_{column_name}'
                    uq_sql = f'ALTER TABLE "{table_name}" ADD CONSTRAINT "{uq_name}" UNIQUE ("{column_name}");'
                    self.logger.debug(uq_sql)
                    conn.execute(text(uq_sql))

                # 6) PRIMARY KEY
                if kwargs.get("primary_key"):
                    # –ï—Å–ª–∏ –µ—Å—Ç—å NULL, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ-–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –¥–ª—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                    null_cnt = conn.execute(text(
                        f'SELECT COUNT(*) FROM "{table_name}" WHERE "{column_name}" IS NULL'
                    )).scalar() or 0
                    if null_cnt > 0 and is_integer_type:
                        self.logger.info("üîß –ê–≤—Ç–æ-–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ PK —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞")
                        fill_sql = (
                            f'UPDATE "{table_name}" t SET "{column_name}" = s.rn '
                            f'FROM (SELECT ctid, ROW_NUMBER() OVER () AS rn FROM "{table_name}") s '
                            f'WHERE t.ctid = s.ctid AND t."{column_name}" IS NULL'
                        )
                        self.logger.debug(fill_sql)
                        conn.execute(text(fill_sql))
                        null_cnt = 0
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ NULL
                    if null_cnt > 0:
                        self.logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å PRIMARY KEY ‚Äî –µ—Å—Ç—å NULL –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Ç–∏–ø –Ω–µ—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –¥–ª—è –∞–≤—Ç–æ-–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                        return False
                    dup_cnt = conn.execute(text(
                        f'SELECT COUNT(*) FROM (SELECT "{column_name}" FROM "{table_name}" GROUP BY "{column_name}" HAVING COUNT(*)>1) t'
                    )).scalar() or 0
                    if dup_cnt > 0:
                        self.logger.error("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å PRIMARY KEY ‚Äî –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã")
                        return False
                    # –£—Å—Ç–∞–Ω–æ–≤–∏–º NOT NULL –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º PK
                    conn.execute(text(
                        f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" SET NOT NULL;'
                    ))
                    pk_name = f'pk_{table_name}_{column_name}'
                    pk_sql = f'ALTER TABLE "{table_name}" ADD CONSTRAINT "{pk_name}" PRIMARY KEY ("{column_name}");'
                    self.logger.debug(pk_sql)
                    conn.execute(text(pk_sql))

                    # 6.1) AUTOINCREMENT (PostgreSQL IDENTITY)
                    if kwargs.get("autoincrement") and is_integer_type:
                        try:
                            ident_sql = (
                                f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" '
                                f'ADD GENERATED BY DEFAULT AS IDENTITY'
                            )
                            self.logger.debug(ident_sql)
                            conn.execute(text(ident_sql))
                            # –í—ã—Å—Ç–∞–≤–∏–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä = max+1
                            max_val = conn.execute(text(
                                f'SELECT COALESCE(MAX("{column_name}"), 0) FROM "{table_name}"'
                            )).scalar() or 0
                            setval_sql = text(
                                "SELECT setval(pg_get_serial_sequence(:t,:c), :m, true)"
                            )
                            conn.execute(setval_sql, {"t": table_name, "c": column_name, "m": max_val})
                        except Exception as e:
                            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å IDENTITY –¥–ª—è {table_name}.{column_name}: {self.format_db_error(e)}")

                # 7) FOREIGN KEY
                if "foreign_key" in kwargs and kwargs["foreign_key"]:
                    ref_table, ref_column = kwargs["foreign_key"].split(".", 1)
                    fk_name = f'fk_{table_name}_{column_name}_{ref_table}_{ref_column}'
                    # –î–æ–±–∞–≤–ª—è–µ–º NOT VALID, –∑–∞—Ç–µ–º –≤–∞–ª–∏–¥–∏—Ä—É–µ–º ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –Ω–∞ –±–æ–ª—å—à–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
                    fk_sql = (
                        f'ALTER TABLE "{table_name}" ADD CONSTRAINT "{fk_name}" '
                        f'FOREIGN KEY ("{column_name}") REFERENCES "{ref_table}"("{ref_column}") NOT VALID;'
                    )
                    self.logger.debug(fk_sql)
                    conn.execute(text(fk_sql))
                    try:
                        val_sql = f'ALTER TABLE "{table_name}" VALIDATE CONSTRAINT "{fk_name}";'
                        self.logger.debug(val_sql)
                        conn.execute(text(val_sql))
                    except Exception as e:
                        # –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º NOT VALID –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        self.logger.warning(f"‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è FK –Ω–µ –ø—Ä–æ—à–ª–∞, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ NOT VALID: {self.format_db_error(e)}")

            self._refresh_metadata()
            self.logger.info(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ '{table_name}'")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ '{column_name}': {self.format_db_error(e)}")
            return False

    def drop_column_safe(self, table_name: str, column_name: str, force: bool = False) -> bool:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
        force=True ‚Äî —É–¥–∞–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –≤–º–µ—Å—Ç–µ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ (CASCADE).
        """
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False

        try:
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ---
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î.")
                return False

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ ---
            columns = self.get_column_names(table_name)
            actual_col = next((c for c in columns if c.lower() == column_name.lower()), None)
            if not actual_col:
                self.logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")
                return False

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ---
            dependencies = self.get_column_dependencies(table_name, actual_col)
            if not force:
                if dependencies.get("foreign_keys"):
                    self.logger.error(
                        f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{actual_col}' —É—á–∞—Å—Ç–≤—É–µ—Ç –≤–æ –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–∞—Ö: {dependencies['foreign_keys']}")
                    return False
                if dependencies.get("constraints"):
                    self.logger.warning(
                        f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{actual_col}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö: {dependencies['constraints']}")
                if dependencies.get("indexes"):
                    self.logger.warning(f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{actual_col}' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∏–Ω–¥–µ–∫—Å–∞—Ö: {dependencies['indexes']}")

            # --- –£–¥–∞–ª–µ–Ω–∏–µ ---
            sql = f'ALTER TABLE "{table_name}" DROP COLUMN "{actual_col}"{" CASCADE" if force else ""};'
            self.logger.info(f"üß© ALTER TABLE: —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ '{actual_col}' –∏–∑ '{table_name}' (force={force})")
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            self._refresh_metadata()
            self.logger.info(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü '{actual_col}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' –∏–∑ '{table_name}': {self.format_db_error(e)}")
            return False

    def get_column_dependencies(self, table_name: str, column_name: str) -> Dict[str, List[str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞:
        - foreign_keys: –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
        - constraints: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è (CHECK)
        - indexes: –∏–Ω–¥–µ–∫—Å—ã
        """
        deps = {'foreign_keys': [], 'constraints': [], 'indexes': []}

        if not self.is_connected():
            self.logger.warning("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ ‚Äî –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return deps

        try:
            insp = inspect(self.engine)

            # --- –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏ ---
            for fk in insp.get_foreign_keys(table_name):
                if column_name in fk.get("constrained_columns", []):
                    ref_cols = ", ".join(fk.get("referred_columns", []))
                    deps["foreign_keys"].append(f"{fk['referred_table']}({ref_cols})")

            # --- CHECK-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ---
            for chk in insp.get_check_constraints(table_name):
                sqltext = str(chk.get("sqltext", "")).lower()
                if column_name.lower() in sqltext:
                    deps["constraints"].append(chk.get("name", "(–±–µ–∑ –∏–º–µ–Ω–∏)"))

            # --- –ò–Ω–¥–µ–∫—Å—ã ---
            for idx in insp.get_indexes(table_name):
                if column_name in idx.get("column_names", []):
                    deps["indexes"].append(idx.get("name", "(–±–µ–∑ –∏–º–µ–Ω–∏)"))

            total = sum(len(v) for v in deps.values())
            self.logger.info(
                f"üîé –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' –≤ '{table_name}': {total} –Ω–∞–π–¥–µ–Ω–æ "
                f"(FK={len(deps['foreign_keys'])}, CHECK={len(deps['constraints'])}, IDX={len(deps['indexes'])})"
            )

            return deps

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π '{table_name}.{column_name}': {self.format_db_error(e)}")
            return deps

    def rename_table(self, old_table_name: str, new_table_name: str) -> bool:
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –ë–î —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False

        try:
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ---
            if not self.record_exists_ex_table(old_table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{old_table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False
            if self.record_exists_ex_table(new_table_name):
                self.logger.error(f"‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ '{new_table_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False

            # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ---
            sql = f'ALTER TABLE "{old_table_name}" RENAME TO "{new_table_name}";'
            self.logger.info(f"üîß –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: '{old_table_name}' ‚Üí '{new_table_name}'")
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            # --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö ---
            self._refresh_metadata()
            self.logger.info(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞: '{old_table_name}' ‚Üí '{new_table_name}'")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã '{old_table_name}': {self.format_db_error(e)}")
            return False

    def rename_column(self, table_name: str, old_column_name: str, new_column_name: str) -> bool:
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Å—Ç–æ–ª–±–µ—Ü –≤ —Ç–∞–±–ª–∏—Ü–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False

        try:
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ---
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False

            columns = self.get_column_names(table_name)
            actual_old = next((c for c in columns if c.lower() == old_column_name.lower()), None)
            actual_new = next((c for c in columns if c.lower() == new_column_name.lower()), None)

            if not actual_old:
                self.logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{old_column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")
                return False
            if actual_new:
                self.logger.error(f"‚ö†Ô∏è –°—Ç–æ–ª–±–µ—Ü '{new_column_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ '{table_name}'.")
                return False

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞) ---
            deps = self.get_column_dependencies(table_name, actual_old)
            total_deps = sum(len(v) for v in deps.values())
            if total_deps > 0:
                self.logger.warning(
                    f"‚ö†Ô∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ '{actual_old}' –∑–∞—Ç—Ä–æ–Ω–µ—Ç {total_deps} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π "
                    f"(FK={len(deps['foreign_keys'])}, CHECK={len(deps['constraints'])}, IDX={len(deps['indexes'])})"
                )

            # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL ---
            sql = f'ALTER TABLE "{table_name}" RENAME COLUMN "{actual_old}" TO "{new_column_name}";'
            self.logger.info(f"üß© –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞: '{table_name}.{actual_old}' ‚Üí '{new_column_name}'")
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            # --- –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ ---
            self._refresh_metadata()
            self.logger.info(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü '{actual_old}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_column_name}' –≤ '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è '{table_name}.{old_column_name}': {self.format_db_error(e)}")
            return False

    def alter_column_type(self, table_name: str, column_name: str, new_type: str, using_expr: str = None):
        """
        –ü—Ä–æ—Å—Ç–æ–µ –∏ –Ω–∞–¥–µ–∂–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç–æ–ª–±—Ü–∞.
        –ó–∞–ø—Ä–µ—â–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è FK/PK —Å—Ç–æ–ª–±—Ü–æ–≤.
        """
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        try:
            new_type = (new_type or "").strip()
            if not new_type:
                return "–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞"

            insp = inspect(self.engine)
            if table_name not in insp.get_table_names():
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return f"–¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏
            columns = [c['name'] for c in insp.get_columns(table_name)]
            if column_name not in columns:
                self.logger.error(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ '{table_name}'.")
                return f"–ö–æ–ª–æ–Ω–∫–∞ '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ '{table_name}'."

            with self.engine.begin() as conn:
                # =====================================================
                # üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - –∑–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è FK/PK
                # =====================================================
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º PRIMARY KEY
                pk_check = conn.execute(text("""
                    SELECT 1 FROM information_schema.table_constraints tc
                    JOIN information_schema.key_column_usage kcu ON tc.constraint_name = kcu.constraint_name
                    WHERE tc.constraint_type = 'PRIMARY KEY' AND tc.table_name = :tbl AND kcu.column_name = :col
                """), {"tbl": table_name, "col": column_name}).first()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º FOREIGN KEY
                fk_check = conn.execute(text("""
                    SELECT 1 FROM information_schema.key_column_usage
                    WHERE column_name = :col AND table_name = :tbl AND position_in_unique_constraint IS NOT NULL
                """), {"tbl": table_name, "col": column_name}).first()

                # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è FK/PK —Å—Ç–æ–ª–±—Ü–æ–≤
                if pk_check:
                    return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø: —Å—Ç–æ–ª–±–µ—Ü —è–≤–ª—è–µ—Ç—Å—è PRIMARY KEY"
                if fk_check:
                    return "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø: —Å—Ç–æ–ª–±–µ—Ü —è–≤–ª—è–µ—Ç—Å—è FOREIGN KEY"

                # =====================================================
                # üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–æ–≤
                # =====================================================
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Å—Ç–æ–ª–±—Ü–∞
                current_type_info = conn.execute(text("""
                    SELECT data_type FROM information_schema.columns 
                    WHERE table_name = :tbl AND column_name = :col
                """), {"tbl": table_name, "col": column_name}).first()
                
                if not current_type_info:
                    return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Å—Ç–æ–ª–±—Ü–∞ '{column_name}'"
                
                current_type = current_type_info[0].upper()
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ __AUTO_ENUM__ - —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π ENUM
                if new_type == "__AUTO_ENUM__":
                    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞
                    unique_values = conn.execute(text(f"""
                        SELECT DISTINCT "{column_name}" FROM "{table_name}" 
                        WHERE "{column_name}" IS NOT NULL ORDER BY "{column_name}"
                    """)).fetchall()
                    
                    if not unique_values:
                        return "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å ENUM –∏–∑ –ø—É—Å—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞"
                    
                    # –°–æ–∑–¥–∞–µ–º ENUM —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                    enum_values = []
                    for val in unique_values:
                        if val[0] is not None:
                            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
                            escaped_val = str(val[0]).replace("'", "''")
                            enum_values.append(f"'{escaped_val}'")
                    
                    enum_name = f"enum_{table_name}_{column_name}"
                    
                    # –°–æ–∑–¥–∞—ë–º ENUM-—Ç–∏–ø
                    create_enum_sql = f"CREATE TYPE {enum_name} AS ENUM ({', '.join(enum_values)});"
                    self.logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ ENUM-—Ç–∏–ø–∞: {enum_name}")
                    conn.execute(text(create_enum_sql))
                    
                    # –ü—Ä–æ—Å—Ç–æ–µ USING –≤—ã—Ä–∞–∂–µ–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ —á–µ—Ä–µ–∑ text
                    using_expr = f'"{column_name}"::text::{enum_name}'
                    alter_sql = f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" TYPE {enum_name} USING {using_expr};'
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–∏–ø–æ–≤
                else:
                    # –ü—Ä–æ—Å—Ç—ã–µ USING –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
                    if not using_expr:
                        if current_type in ['INTEGER', 'BIGINT', 'SMALLINT', 'NUMERIC', 'DECIMAL', 'FLOAT', 'REAL', 'DOUBLE']:
                            if new_type.upper() in ['TEXT', 'VARCHAR', 'CHAR']:
                                using_expr = f'"{column_name}"::text'
                            else:
                                using_expr = f'"{column_name}"::{new_type}'
                        elif current_type == 'BOOLEAN':
                            if new_type.upper() in ['TEXT', 'VARCHAR', 'CHAR']:
                                using_expr = f'CASE WHEN "{column_name}" THEN \'true\' ELSE \'false\' END'
                            else:
                                using_expr = f'"{column_name}"::{new_type}'
                        else:
                            using_expr = f'"{column_name}"::{new_type}'
                    
                    alter_sql = f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" TYPE {new_type}'
                    if using_expr:
                        alter_sql += f' USING {using_expr}'
                    alter_sql += ';'

                # =====================================================
                # üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                # =====================================================
                self.logger.info(f"üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞: '{table_name}.{column_name}' ‚Üí '{new_type}'")
                self.logger.debug(f"SQL: {alter_sql}")
                conn.execute(text(alter_sql))

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            self._refresh_metadata()
            self.logger.info(f"‚úÖ –¢–∏–ø —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_type}' –≤ '{table_name}'.")
            return True

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ —Å—Ç–æ–ª–±—Ü–∞ '{table_name}.{column_name}': {self.format_db_error(e)}"
            self.logger.error(f"‚ùå {error_msg}")
            return error_msg

    def set_column_nullable(self, table_name: str, column_name: str, nullable: bool) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å NULL –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞."""
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False

        try:
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False

            columns = self.get_column_names(table_name)
            if column_name not in columns:
                self.logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ '{table_name}'.")
                return False

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ NULL –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å NOT NULL
            if not nullable:
                with self.engine.connect() as conn:
                    null_count = conn.execute(text(
                        f'SELECT COUNT(*) FROM "{table_name}" WHERE "{column_name}" IS NULL'
                    )).scalar() or 0
                    
                    if null_count > 0:
                        self.logger.error(f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å NOT NULL: –Ω–∞–π–¥–µ–Ω–æ {null_count} NULL –∑–Ω–∞—á–µ–Ω–∏–π.")
                        return False

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            action = "DROP NOT NULL" if nullable else "SET NOT NULL"
            sql = f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" {action};'
            self.logger.info(f"üîß {action} –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{table_name}.{column_name}'")
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            self._refresh_metadata()
            self.logger.info(f"‚úÖ –°—Ç–æ–ª–±–µ—Ü '{column_name}' —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –≤ '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è NULL –¥–ª—è '{table_name}.{column_name}': {self.format_db_error(e)}")
            return False

    def set_column_default(self, table_name: str, column_name: str, default_value: Any) -> bool:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞."""
        if not self.is_connected():
            self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î.")
            return False

        try:
            if not self.record_exists_ex_table(table_name):
                self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                return False

            columns = self.get_column_names(table_name)
            if column_name not in columns:
                self.logger.error(f"‚ùå –°—Ç–æ–ª–±–µ—Ü '{column_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ '{table_name}'.")
                return False

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ DEFAULT
            if default_value is None:
                sql = f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" DROP DEFAULT;'
            else:
                if isinstance(default_value, str):
                    default_str = f"'{default_value}'"
                else:
                    default_str = str(default_value)
                sql = f'ALTER TABLE "{table_name}" ALTER COLUMN "{column_name}" SET DEFAULT {default_str};'

            self.logger.info(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ DEFAULT –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{table_name}.{column_name}'")
            self.logger.debug(f"SQL ‚Üí {sql}")

            with self.engine.begin() as conn:
                conn.execute(text(sql))

            self._refresh_metadata()
            self.logger.info(f"‚úÖ DEFAULT –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ '{column_name}' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ DEFAULT –¥–ª—è '{table_name}.{column_name}': {self.format_db_error(e)}")
            return False

