"""
–ú–∏–∫—Å–∏–Ω –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π (Create, Read, Update, Delete)
"""

import logging
from sqlalchemy import func, select, asc, desc, text, inspect
from typing import List, Dict, Any, Optional, Tuple
from datetime import date


class CrudMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–∏–∫—Å–∏–Ω–∞
        self.logger = logging.getLogger("DB")
    
    def get_table_data(self, table_name: str) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π."""
        if not self.is_connected():
            return []

        if table_name not in self.tables:
            self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.")
            return []

        try:
            self.logger.info(f"üìä SELECT * FROM \"{table_name}\"")
            table = self.tables[table_name]
            with self.engine.connect() as conn:
                result = conn.execute(table.select())
                rows = [dict(row._mapping) for row in result]

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ—Ä–æ–≤) –≤ —Å—Ç—Ä–æ–∫—É
            for row in rows:
                for key, value in row.items():
                    if isinstance(value, list):
                        row[key] = ', '.join(value)

            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ '{table_name}'.")
            return rows

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {self.format_db_error(e)}")
            return []

    def _validate_data(self, table_name: str, data: Dict[str, Any]) -> List[str]:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º.
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–∏–ø—ã, NOT NULL, ENUM –∏ CHECK-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö SQLAlchemy.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—à–∏–±–æ–∫ (–ø—É—Å—Ç–æ–π = –≤—Å—ë –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ).
        """
        if table_name not in self.tables:
            return [f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."]

        table = self.tables[table_name]
        errors = []

        for column in table.columns:
            col_name = column.name
            value = data.get(col_name)
            is_nullable = column.nullable

            # --- 1Ô∏è‚É£ –ê–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç PK: –º–æ–∂–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
            if column.primary_key and column.autoincrement and value is None:
                continue

            # --- 2Ô∏è‚É£ NOT NULL + –±–µ–∑ default ‚Üí –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ
            if not is_nullable and value is None and column.default is None:
                errors.append(f"–ü–æ–ª–µ '{col_name}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ (NOT NULL), –Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ.")
                continue

            # --- 3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
            from sqlalchemy import String, Integer, Numeric, Date, Boolean, Enum, ARRAY
            py_type = {
                String: str,
                Enum: str,
                Integer: int,
                Numeric: (int, float),
                Date: (str, date),
                Boolean: bool,
                ARRAY: list
            }.get(type(column.type))

            if value is not None and py_type and not isinstance(value, py_type):
                errors.append(
                    f"–ü–æ–ª–µ '{col_name}' –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –û–∂–∏–¥–∞–ª—Å—è {py_type}, –ø–æ–ª—É—á–µ–Ω {type(value)}."
                )

            # --- 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã (–µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞)
            if isinstance(column.type, Date) and isinstance(value, str):
                from datetime import datetime
                try:
                    datetime.strptime(value, "%Y-%m-%d")
                except ValueError:
                    errors.append(f"–ü–æ–ª–µ '{col_name}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD', –ø–æ–ª—É—á–µ–Ω–æ '{value}'.")

            # --- 5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ ENUM
            if isinstance(column.type, Enum) and value is not None:
                if value not in column.type.enums:
                    errors.append(
                        f"–ü–æ–ª–µ '{col_name}' –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '{value}'. "
                        f"–î–æ–ø—É—Å—Ç–∏–º—ã–µ: {list(column.type.enums)}."
                    )

        # --- 6Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ CHECK-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ!)
        from sqlalchemy import CheckConstraint
        for constraint in table.constraints:
            if isinstance(constraint, CheckConstraint) and constraint.sqltext is not None:
                expr = str(constraint.sqltext)
                try:
                    # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    expr_eval = expr
                    for k, v in data.items():
                        val = f"'{v}'" if isinstance(v, str) else v
                        expr_eval = expr_eval.replace(k, str(val))
                    if not eval(expr_eval):
                        errors.append(f"–ù–∞—Ä—É—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ CHECK: {expr}")
                except Exception:
                    # –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    pass

        return errors

    def _check_foreign_key_exists(self, table_name: str, column_name: str, value: Any) -> bool:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤–æ –≤–Ω–µ—à–Ω–µ–π —Ç–∞–±–ª–∏—Ü–µ."""
        if not value or table_name not in self.tables:
            return False

        table = self.tables[table_name]
        column = getattr(table.c, column_name, None)
        if column is None or not self.is_connected():
            return False

        try:
            with self.engine.connect() as conn:
                return conn.execute(table.select().where(column == value).limit(1)).first() is not None
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞ {table_name}.{column_name}: {e}")
            return False

    def insert_data(self, table_name: str, data: Dict[str, Any]) -> Tuple[bool, Optional[str]]:
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —É—á—ë—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, –æ—à–∏–±–∫–∞)."""
        if not self.is_connected():
            return False, "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."

        # --- –í–∞–ª–∏–¥–∞—Ü–∏—è ---
        errors = self._validate_data(table_name, data)
        if errors:
            for e in errors:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
            return False, "; ".join(errors)

        try:
            table = self.tables[table_name]
            pk_col = self._get_primary_key_column(table_name)
            free_id = self._find_min_free_id(table_name)
            if free_id is None:
                msg = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π ID."
                self.logger.error(msg)
                return False, msg

            # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
            values = data.copy()
            values[pk_col] = free_id

            # –ò—Å–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–Ω—ã–µ –ø–æ–ª—è
            insert_data = {
                col.name: values.get(col.name, col.default.arg if col.default is not None else None)
                for col in table.columns if not (col.primary_key and col.autoincrement)
            }

            self.logger.info(f"üü¢ INSERT INTO {table_name} (ID={free_id}) ...")

            # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ ---
            with self.engine.begin() as conn:
                conn.execute(table.insert().values(**insert_data))

            self.logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID={free_id}.")
            return True, None

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –≤ '{table_name}': {self.format_db_error(e)}"
            self.logger.error(f"‚ùå {error_msg}")
            return False, error_msg

    def _find_min_free_id(self, table_name: str) -> int:
        """–ù–∞—Ö–æ–¥–∏—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–≤–æ–±–æ–¥–Ω—ã–π ID –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ (–∏–ª–∏ 1, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞)."""
        if not self.is_connected():
            return 1

        try:
            pk = self._get_primary_key_column(table_name)
            with self.engine.connect() as conn:
                max_id = conn.execute(text(f'SELECT COALESCE(MAX("{pk}"), 0) FROM "{table_name}"')).scalar()
                result = conn.execute(text(f"""
                    SELECT MIN(id)
                    FROM generate_series(1, {max_id + 1}) AS g(id)
                    WHERE id NOT IN (SELECT "{pk}" FROM "{table_name}")
                """))
                return result.scalar() or max_id + 1

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ ID: {self.format_db_error(e)}")
            # fallback ‚Äî –±–µ—Ä—ë–º MAX+1
            try:
                with self.engine.connect() as conn:
                    max_id = conn.execute(text(f'SELECT COALESCE(MAX("{pk}"), 0) FROM "{table_name}"')).scalar()
                    return max_id + 1
            except Exception:
                return 1

    def _get_primary_key_column(self, table_name: str) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞ —Ç–∞–±–ª–∏—Ü—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ, –±–µ–∑ –∂—ë—Å—Ç–∫–∏—Ö –ø—Ä–∏–≤—è–∑–æ–∫)."""
        if table_name not in self.tables:
            self.logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ '{table_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.")
            return "id"

        table = self.tables[table_name]
        pk_cols = [col.name for col in table.primary_key.columns]
        if pk_cols:
            return pk_cols[0]

        # –ï—Å–ª–∏ PK –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî –ø—ã—Ç–∞–µ–º—Å—è —É–≥–∞–¥–∞—Ç—å –ø–æ –æ–±—â–µ–ø—Ä–∏–Ω—è—Ç—ã–º –∏–º–µ–Ω–∞–º
        for name in ("id", f"{table_name.lower()}_id", "pk"):
            if name in table.columns:
                return name

        self.logger.warning(f"‚ö†Ô∏è –ü–µ—Ä–≤–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{table_name}'. –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ 'id'.")
        return "id"

    def record_exists(self, table_name: str, condition: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∞—è —É—Å–ª–æ–≤–∏—é."""
        if not self.is_connected() or table_name not in self.tables:
            return False

        table = self.tables[table_name]
        try:
            valid_conds = []
            for k, v in condition.items():
                col = getattr(table.c, k, None)
                if col is not None:
                    valid_conds.append(col == v)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{k}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")

            if not valid_conds:
                self.logger.error(f"‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ '{table_name}'.")
                return False

            stmt = table.select().where(*valid_conds).limit(1)
            self.logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ '{table_name}' –ø–æ —É—Å–ª–æ–≤–∏—é {condition}")

            with self.engine.connect() as conn:
                exists = conn.execute(stmt).first() is not None

            self.logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å {'–Ω–∞–π–¥–µ–Ω–∞' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'} –≤ '{table_name}'.")
            return exists

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–∏—Å–∏ –≤ '{table_name}': {self.format_db_error(e)}")
            return False

    def delete_data(self, table_name: str, condition: Dict[str, Any]) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é."""
        if not self.is_connected() or table_name not in self.tables:
            return False

        table = self.tables[table_name]
        try:
            where_clauses = []
            for k, v in condition.items():
                col = getattr(table.c, k, None)
                if col is not None:
                    where_clauses.append(col == v)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{k}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")

            if not where_clauses:
                self.logger.error(f"‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ '{table_name}'.")
                return False

            stmt = table.delete().where(*where_clauses)
            self.logger.info(f"üóë –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∏–∑ '{table_name}' –ø–æ —É—Å–ª–æ–≤–∏—é {condition}")

            with self.engine.begin() as conn:
                result = conn.execute(stmt)
                count = result.rowcount or 0

            self.logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –∏–∑ '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ '{table_name}': {self.format_db_error(e)}")
            return False

    def update_data(self, table_name: str, condition: Dict[str, Any], new_values: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–µ —É—Å–ª–æ–≤–∏—é."""
        if not self.is_connected() or table_name not in self.tables or not new_values:
            return False

        table = self.tables[table_name]
        try:
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
            valid_values = {}
            for col, val in new_values.items():
                if hasattr(table.c, col):
                    valid_values[col] = val
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{col}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'.")

            if not valid_values:
                self.logger.error(f"‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ '{table_name}'.")
                return False

            # --- –§–æ—Ä–º–∏—Ä—É–µ–º WHERE ---
            where_clauses = []
            for k, v in condition.items():
                col = getattr(table.c, k, None)
                if col is not None:
                    where_clauses.append(col == v)
                else:
                    self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{k}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —É—Å–ª–æ–≤–∏–∏ WHERE —Ç–∞–±–ª–∏—Ü—ã '{table_name}'.")

            if not where_clauses:
                self.logger.error(f"‚ùå –ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π WHERE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ '{table_name}'.")
                return False

            # --- –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
            stmt = table.update().where(*where_clauses).values(**valid_values)
            self.logger.info(f"üìù UPDATE '{table_name}' SET {list(valid_values.keys())} WHERE {condition}")

            with self.engine.begin() as conn:
                result = conn.execute(stmt)
                count = result.rowcount or 0

            self.logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ '{table_name}'.")
            return True

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è '{table_name}': {self.format_db_error(e)}")
            return False

    def get_sorted_data(
            self,
            table_name: str,
            sort_columns: List[tuple],
            condition: Dict[str, Any] = None,
            aggregate_functions: Dict[str, str] = None,
            group_by: List[str] = None,
            columns: List[str] = None
    ) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π, –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏ –∞–≥—Ä–µ–≥–∞—Ç–∞–º–∏."""
        if not self.is_connected() or table_name not in self.tables:
            return []

        table = self.tables[table_name]
        try:
            # --- SELECT ---
            if aggregate_functions:
                select_fields = []
                for alias, func_expr in aggregate_functions.items():
                    # –ü—Ä–∏–º–µ—Ä: aggregate_functions = {"total_books": "COUNT(id_book)"}
                    select_fields.append(text(f"{func_expr} AS {alias}"))
                stmt = select(*select_fields)
            else:
                if columns:
                    valid_cols = [getattr(table.c, c) for c in columns if hasattr(table.c, c)]
                    if not valid_cols:
                        valid_cols = [table]
                    stmt = select(*valid_cols)
                else:
                    stmt = select(table)

            # --- WHERE ---
            if condition:
                for col, val in condition.items():
                    if hasattr(table.c, col):
                        stmt = stmt.where(getattr(table.c, col) == val)
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{col}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ '{table_name}'")

            # --- GROUP BY ---
            if group_by:
                group_cols = [getattr(table.c, col) for col in group_by if hasattr(table.c, col)]
                if group_cols:
                    stmt = stmt.group_by(*group_cols)

            # --- ORDER BY ---
            if sort_columns:
                order_clauses = []
                for col, ascending in sort_columns:
                    if hasattr(table.c, col):
                        order_clauses.append(asc(getattr(table.c, col)) if ascending else desc(getattr(table.c, col)))
                if order_clauses:
                    stmt = stmt.order_by(*order_clauses)

            self.logger.info(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è '{table_name}'")
            with self.engine.connect() as conn:
                result = conn.execute(stmt)
                rows = [dict(row._mapping) for row in result]
            self.logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫ –∏–∑ '{table_name}'")
            return rows

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤ '{table_name}': {self.format_db_error(e)}")
            return []

    def execute_query(self, query: str, params: Dict[str, Any] = None, fetch: str = None) -> Any:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        if not self.is_connected():
            return None

        try:
            self.logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL: {query[:100]}...")
            with self.engine.begin() as conn:
                result = conn.execute(text(query), params or {})

                if fetch == "one":
                    return result.fetchone()
                elif fetch == "all":
                    return result.fetchall()
                elif fetch == "scalar":
                    return result.scalar()
                elif fetch == "dict":
                    return [dict(row._mapping) for row in result.fetchall()]
                else:
                    return result.rowcount

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL: {self.format_db_error(e)}")
            return None

    def record_exists_ex_table(self, table_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–Ω–µ —Ç–æ–ª—å–∫–æ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)."""
        if not self.is_connected():
            return False
        try:
            insp = inspect(self.engine)
            exists = table_name in insp.get_table_names()
            self.logger.info(f"üîç –¢–∞–±–ª–∏—Ü–∞ '{table_name}' {'—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'} –≤ –ë–î")
            return exists
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {self.format_db_error(e)}")
            return False

    def count_records_filtered(self, table_name: str, condition: Dict[str, Any] = None) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ —Å —É—á—ë—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ (WHERE)."""
        if not self.is_connected() or table_name not in self.tables:
            return 0

        try:
            table = self.tables[table_name]
            stmt = select(func.count()).select_from(table)

            # WHERE-—É—Å–ª–æ–≤–∏—è
            if condition:
                for col, val in condition.items():
                    if hasattr(table.c, col):
                        stmt = stmt.where(getattr(table.c, col) == val)
                    else:
                        self.logger.warning(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{col}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}'")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            with self.engine.connect() as conn:
                count = conn.execute(stmt).scalar_one()

            self.logger.info(f"üßÆ –ü–æ–¥—Å—á–∏—Ç–∞–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π –≤ '{table_name}' —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π: {condition or '{}'}")
            return count

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –∑–∞–ø–∏—Å–µ–π '{table_name}': {self.format_db_error(e)}")
            return 0
